<?php
App::uses('ExceptionRenderer', 'Error');
App::uses('SimplePasswordHasher', 'Controller/Component/Auth');
App::uses('AppController', 'Controller');
App::uses('CakeEmail', 'Network/Email');
App::uses('Folder', 'Utility');
App::import('Component', 'CommonfunctionComponent');
App::import('Component', 'Commonfunction');
App::import('Component', 'PaypalPaymentComponent');
App::import('Component', 'DateFormat');

class ClubsController extends AppController
{
    public $cacheAction = true;

    public $helpers = array('Session', 'Html', 'Form', 'Ck');
    public $components = array(
        'Cookie',
        'Paginator',
        'Session',
        'RequestHandler',
        'Hybridauth',
        'Commonfunction',
        'DataTable',
        'Common',
        'PaypalPayment'
    );
    public $uses = array(
        'User',
        'club_settings ',
        'subscription_settings',
        'clubs',
        'club_members',
        'banners',
        'usertypes',
        'club_operators',
        'help_pages');

    public function beforeFilter()
    {

        $this->default_call();
        parent::beforeFilter();
        if ($this->Auth->login()) {

            $this->Auth->allow(
                'access_list', 'access_list_grid', 'access_list_data_only', 'deletelist', 'access_control_list', 'getlist', 'access_control', 'club_operator_delete', 'direct_access', 'findclub_post', 'findclub_admin_and_operator', 'html_editor_delete_pg', 'club_operator_edit', 'club_operator_add', 'removephoto', 'editclubinfo', 'club_social_items', 'club_members', 'manage_club_member', 'manage_club_member_thumbnail', 'image_saveBG_ajax', 'image_upload_ajax', 'addbanner', 'clubindex', 'clubSettings', 'save_base', 'save_premium', 'save_professional', 'current_situations', 'clubindex', 'clubindexmypage', 'help_chk_pswd', 'help_save_pg', 'help_chk_pg', 'help_delete_pg', 'helpnewpage', 'help_setsession', 'help_importpage', 'help_import_pg', 'help_import_frompg', 'help_open_page', 'club_profile', 'set_password', 'club_change_passwrod', 'forgot_password', 'club_subadmin_add', 'club_subadmin_edit', 'club_subadmin_delete', 'html_help_chk_pswd', 'help_html_save_pg', 'html_help_import_pg', 'check_html_page_title', 'club_account_current', 'club_purchase_license', 'club_purchase_account', 'club_purchase_sponsors', 'purchase_account_history', 'account_subscription', 'account_subscription', 'summary_renewal', 'create_member', 'change_email_address', 'purchase_account_history_print', 'print_user_details', 'assign_new_account', 'summary_overview', 'print_account_subscription', 'account_history', 'send_paypayl_session', 'current_subscription', 'club_summary_detail', 'load_function_available', 'send_to_paypal', 'history_subscription', 'register', 'get_state', 'club_member_accounts', 'club_account_viewlist', 'club_account_viewlist_print', 'club_member_profile', 'club_membership_request', 'sendClubMembershipRequest_after_exp', 'club_send_request', 'tempdta', 'club_membership_request_reply', 'search_member', 'clubmembership_requestlist', 'clubmembership_invites', 'clubmembership_invites_print', 'clubmembership_requestlist_print', 'club_reset_passwrodalt', 'club_reset_passwrod', 'club_co_admin_delete', 'check_price', 'detail_about_version', 'send_msg_clubmember', 'paranValue', 'clubmembe_print', 'send_email_clubmember', 'clubmembership_req_members', 'give_session_createmembership', 'clubmembership_send_requestfromuser_print', 'save_payterms', 'club_idcards_pricelist', 'save_cardsterms', 'save_cardsterms_individual', 'club_pricelist_identification_cards', 'club_price_list', 'club_pricelist_identification_cards_checkdata', 'savepricelist_idcards', 'price_list', 'club_user_identification_cards', 'success_purchase_received', 'club_menu_selected_pricelist', 'dummy_form', 'card_pay_form', 'card_save_rest_payments', 'manufacturing_add', 'manufacturing_thirdparty', 'manufacturing', 'cryptUrl', 'save_delivery_date', 'delete_delivery_date', 'card_lists', 'manufacturing_print', 'manage_card_lists', 'card_availabe_for_assinement', 'card_availabe_for_assinement_page', 'assing_card_to_user', 'check_assing_status', 'remove_suspended_status', 'club_edit_card_assing', 'save_edit_assing_card', 'club_terminate_card_assing', 'club_saveterminate_card_assing', 'user_card_assinement', 'save_card_to_user', 'manage_card_lists_print', 'store_date_to_session', 'club_account_purches', 'club_co_admin', 'clubsetting_membertype', 'delete_membertype', 'edit_membertype', 'clubsetting_membertype_edit', 'check_dubplicate_name', 'clubsetting_typology_subscription_add', 'clubsetting_typology_subscription_edit', 'clubsetting_typology_subscription_delete', 'clubsetting_typology_subscription', 'clubsetting_typology_subscription_copy', 'clubsetting_typology_subscription_copy_add', 'ClubSettingSubscriptionTypology_dubplicate_name', 'clubsetting_typology_subscription_print', 'checkuser_name', 'check_admin_password', 'new_member_otherdetails', 'search_by_staff_log', 'myFunction', 'create_club_member', 'club_other_setting', 'new_member_additional_setting', 'new_member_additional_setting_edit','new_member_references_edit', 'import_timetable', 'admin_import_timetable', 'load_timetable_block', 'club_operator_security_password', 'new_member_otherdetails_edit', 'club_timetable_print', 'checkRecordExit', 'checkuser_name_edit', 'check_already_send_request', 'enable_password', 'check_managment_password', 'check_system_password', 'check_managment_password_for_co_admin', 'enable_security', 'club_security_other_settings', 'send_request_super_admin', 'enable_disable_password', 'club_setting_for_each_level', 'club_admin_system_pswd', 'club_send_password_request', 'club_reset_password', 'ajax_club_operator_security_password', 'ajax_club_operator_security_old_password', 'ajax_club_operator_security_old_password1', 'ajax_check_mail_exit', 'club_operator_list', 'club_operator_list_edit', 'club_operator_list_view', 'club_operator_list_delete', 'club_coadmin_list', 'club_operator_list_print', 'club_coadmin_list_edit', 'club_coadmin_list_view', 'club_coadmin_list_delete', 'show_days_duration', 'club_reset_email', 'show_all_subscription', 'history_account_purchased', 'club_coadmin_list_print', 'orderByName', 'search_by_staff_log', 'save_thirdParty_terms', 'otherPriceVesions', 'ajax_save_device_data', 'ajax_update_device_enable', 'device_info_club', 'ajax_send_message', 'ajax_enable_current_pc', 'ajax_enable_device', 'delete_html_session_id', 'html_page_ajax_data', 'ajax_get_amount', 'club_site', 'manage_cards', 'ajaxManagementInfo', 'ajax_management_info_data', 'cardToAssign', 'feedbacks', 'closeManagementSection', 'assing_card_to_member', 'process_card_replacement', 'ajax_get_member_data', 'assing_card_to_operator', 'show_ajax_document_index_list', 'addHtmlPageChapter', 'ajax_edit_chapter_data', 'updateHtmlPageChapter', 'ajaxDeleteChapter', 'addHtmlPageChapterLink', 'ajax_edit_chapter_link_data', 'updateHtmlPageChapterLink', 'ajaxDeleteChapterLink', 'ajaxEnableDocumentIndex', 'expiring', 'terminate', 'checkstatus_expiring', 'member_terminate', 'print_terminate', 'send_mail', 'send_msg', 'expiring_member', 'remove_post', 'ajax_multiple_delete_post', 'help_page', 'comment_suggestion', 'bugs_error', 'help_editing', 'checkstatus_notrenewed', 'ajax_delete_help_edit', 'ajax_pwd_check', 'comments_list', 'commentDisplayHtml', 'htmlpage_advance_mode', 'buildCommentsTree', 'commentDisplayHtml1', 'ajax_data_by_lang_id', 'subscription', 'load_member_timetable_block', 'html1_page', 'sendPasswordsForAdmin', 'new_moment_cash', 'load_cash_form', 'insert_cash_record', 'insert_emp_mem_record', 'archive_service_list', 'delete_service', 'delete_service_detail', 'payment_detail', 'check_super_admin_password', 'admin_clubsetting_membertype', 'dead_line', 'dead_line_detail', 'admin_load_timetable_block', 'admin_delete_membertype', 'admin_clubsetting_membertype_edit', 'pay_emp_member', 'load_emp_member_form', 'movement_cash', 'movement_cash_details', 'addNewExpense', 'ajaxCheckUserAndOperator', 'save_add_form', 'deadline_detail', 'user_payment_list', 'payment_of_deadline', 'ajax_payment_of_deadline', 'user_payment_detail', 'get_sector_record', 'delete_db_name', 'movesbook_website_setting', 'change_display_official_status', 'official_website_setting', 'riepilog_of_cash', 'report_moment_of_cash', 'show_riepilog_detail', 'club_archive_reciept', 'accsess_data', 'filter_readers_and_subscriptions_by_user', 'get_user_data_by_card', 'get_user_data_by_card_decrease', 'load_course_readers_data', 'sub_descrease_access', 'ajax_check_password', 'getToken', 'ajax_change_checkpoint_setting', 'payment_post', 'add_club_sponser', 'exhaustionStatus', 'help_page_ajax_data', 'html_editing_page_ajax_data', 'sendMessageToSelectedUsers', 'search_member_for_autocomplete', 'confirm_pwd', 'readers_for_device', 'management_access', 'messages', 'identity_verification', 'paused', 'screensavers', 'get_card_historical_list', 'remove_background', 'ajax_new_banner', 'save_embed_banner', 'upload_banners_seq', 'remove_banner_images', 'save_seq_banner', 'change_card_check', 'make_card_assignment', 'all_cards_assigned_to_user', 'assign_card_to_member', 'helpPage', 'purchase_new_members');


        } else {

            $this->Auth->allow('access_control_list', 'getlist', 'otherPriceVesions', 'identificationDevice', 'identificationDevice_dammy', 'optionalModules', 'priceAccount', 'clubFeature', 'club_site', 'ajaxManagementInfo', 'ajax_management_info_data', 'admin_load_timetable_block');

        }
    }

    /*
     * *************************
     * Action : clubSettings
     * Description: the action
     * clubSettings is used to
     * showing the current
     * existing setting for
     * clubs for basic,premium
     * and professional version
     * Author : Nilesh
     * *************************
     */

    public function default_call()
    {

        /*****For Club Tab** */
        $this->loadmodel('setting_newpost_lists');
        $this->loadmodel('setting_newposts');
        $menusSaved_Clubdef = array();
        $finalAry_Clubdef = array();
        $mixary_Clubdef = array();
        $menusSaved1_Clubdef = $this->setting_newposts->find('all', array('conditions' => array('club_id' => $this->Session->read('Auth.Club.id'))));
        if (count($menusSaved1_Clubdef) > 0) {
            if ($menusSaved1_Clubdef[0]['setting_newposts']['menus'] != '') {
                $menusSaved_Clubdef = explode(',', $menusSaved1_Clubdef[0]['setting_newposts']['menus']);
            }
        }
        if (!empty($menusSaved_Clubdef)) {
            $menus_Clubdef = $this->setting_newpost_lists->find('all', array('conditions' => array('id' => $menusSaved_Clubdef), 'order' => array('FIELD(setting_newpost_lists.id, ' . $menusSaved1_Clubdef[0]['setting_newposts']['menus'] . ')')));
        } else {
            $menus_Clubdef = $this->setting_newpost_lists->find('all', array('order' => 'setting_newpost_lists.name ASC'));
        }
        $finalAryDisplay_Clubdef = array();
        $finalAryDropdown_Clubdef = array();
        $i = 0;
        foreach ($menus_Clubdef as $key => $value) {
            unset($value['setting_newpost_lists']['created']);
            unset($value['setting_newpost_lists']['modified']);
            $finalAry_Clubdef[] = $value['setting_newpost_lists'];
            if ($i <= 6) {
                $finalAryDisplay_Clubdef[] = $value['setting_newpost_lists'];
            } else {
                $finalAryDropdown_Clubdef[] = $value['setting_newpost_lists'];
            }
            $i++;
        }

        /*****For Single user Tab*****/
        $this->loadmodel('newpost_lists');
        $this->loadmodel('newposts_usersettings');
        $menusSaved_def = array();
        $finalAry_def = array();
        $mixary_def = array();
        $menusSaved1_def = $this->newposts_usersettings->find('all', array('conditions' => array('user_id' => $this->Session->read('Auth.User.id'))));
        if (count($menusSaved1_def) > 0) {
            if ($menusSaved1_def[0]['newposts_usersettings']['menus'] != '') {
                $menusSaved_def = explode(',', $menusSaved1_def[0]['newposts_usersettings']['menus']);
            }
        }
        if (!empty($menusSaved_def)) {
            $menus_def = $this->newpost_lists->find('all', array('conditions' => array('id' => $menusSaved_def), 'order' => array('FIELD(newpost_lists.id, ' . $menusSaved1_def[0]['newposts_usersettings']['menus'] . ')')));
        } else {
            $menus_def = $this->newpost_lists->find('all', array('order' => 'newpost_lists.name ASC'));
        }
        $finalAryDisplay_def = array();
        $finalAryDropdown_def = array();
        $i = 0;
        foreach ($menus_def as $key => $value) {
            unset($value['newpost_lists']['created']);
            unset($value['newpost_lists']['modified']);
            $finalAry_def[] = $value['newpost_lists'];
            if ($i <= 6) {
                $finalAryDisplay_def[] = $value['newpost_lists'];
            } else {
                $finalAryDropdown_def[] = $value['newpost_lists'];
            }
            $i++;
        }
        /*         * ***For Single user Tab**** */
        $this->set(compact('finalAry_def', 'finalAryDisplay_def', 'finalAryDropdown_def', 'finalAryDisplay_Clubdef', 'finalAryDropdown_Clubdef'));
    }

    public function findclub_admin_and_operator()
    {

        $this->layout = 'ajax';
        $this->loadModel('ClubOperatorAssignAccessLevel');
        $this->loadModel('User');
        $this->loadModel('userlogins');
        $this->loadModel('club_operator_assign_access_levels');
        $allData1 = $this->ClubOperatorAssignAccessLevel->getUserList(
            $this->Session->read('Auth.User.id')
        );
        $conditions["conditions"] = array('User.id' => $allData1);
        $userId = $this->User->find(
            "all", array(
                "joins" => array(
                    array(
                        'table' =>
                            'userlogins',
                        'alias' => 'userlogins',
                        'type' => 'INNER',
                        'conditions' => array(
                            'userlogins.user_id = User.id'
                        )
                    ),
                    array(
                        'table' => 'club_operator_assign_access_levels',
                        'alias' => 'club_operator_assign_access_levels',
                        'type' => 'INNER',
                        'conditions' => array(
                            'club_operator_assign_access_levels.operator_id = User.id'
                        )
                    )
                ),
                'fields' => array(
                    'User.id',
                    'User.image',
                    'User.firstname',
                    'User.lastname',
                    'User.username',
                    'club_operator_assign_access_levels.id'
                ),
                "conditions" => $conditions["conditions"]
            )
        );

        $club_co_admin = array();
        $club_operator = array();
        $club_operator_Pusharray = array();
        $club_co_admin_Pusharray = array();

        foreach ($userId as $row) {

            $club_operator["image"] = $row["User"]["image"];
            $club_operator["firstname"] = $row["User"]["firstname"];
            $club_operator["lastname"] = $row["User"]["lastname"];
            $club_operator["name"] = $row["User"]["username"];
            $club_operator["user_id"] = $row["User"]["id"];
            $club_co_admin["image"] = $row["User"]["image"];
            $club_co_admin["name"] = $row["User"]["username"];
            $club_co_admin["firstname"] = $row["User"]["firstname"];
            $club_co_admin["lastname"] = $row["User"]["lastname"];
            $club_co_admin["user_id"] = $row["User"]["id"];
            $club_co_admin["club_subadmins_id"] = $row["club_operator_assign_access_levels"]["id"];
            array_push($club_operator_Pusharray, $club_operator);
            array_push($club_co_admin_Pusharray, $club_co_admin);

        }

        $UserListArray["club_operator"] = $club_operator_Pusharray;
        $UserListArray["club_co_admin"] = $club_co_admin_Pusharray;

        return $UserListArray;
    }

    public function findclub_post()
    {

        $this->loadmodel('setting_mypost_lists');
        $this->loadmodel('setting_myposts');
        $this->loadmodel('languages');

        $finalAry = array();
        $menusSaved = array();
        $finalAry = array();
        $mixary = array();

        /************Get Selected language value from  cookies **************/
        if (isset($_COOKIE['lg']) && $_COOKIE['lg'] != '') {
            $language = $_COOKIE['lg'];
        } else {
            $language = 'en';
        }

        /************END ***************************************************/
        $menusSaved1 = $this->setting_myposts->find(
            'all', array(
            'conditions' => array(
                'club_id' => $this->Session->read('Auth.Club.id')
            )
        ));

        if (count($menusSaved1) > 0) {
            $menusSaved = explode(',', $menusSaved1[0]['setting_myposts']['menus']);
        }
        /*******END**********/

        $finalAry1 = $this->setting_mypost_lists->find(
            'list', array(
            'fields' => array('id', 'name'),
            'conditions' => array('setting_mypost_lists.id' => $menusSaved)
        ));

        $menuArray1 = '"' . implode('","', $finalAry1) . '"';
        $result = $this->languages->query("SELECT " . $language . " as " . $language . " , variable_name as variable_name FROM `languages` WHERE `variable_name` in(" . $menuArray1 . ") order by " . $language . " ASC");
        $finalAry = array();
        foreach ($result as $row) {
            $finalAry[$row["languages"]["variable_name"]] = $row["languages"][$language];
        }
        return $finalAry;
    }

    /*
    Send message to user or moovesbook staff
     */

    public function clubSettings()
    {


        $this->layout = 'admin';
        $this->loadModel("club_settings");
        $club_settings_base = $this->club_settings->find(
            'first', array(
            'conditions' => array('club_settings.name' => 'Base')
        ));

        $this->request->data['club_settings_base'] = $club_settings_base['club_settings'];

        $club_settings_base = $this->club_settings->find(
            'first', array(
            'conditions' => array('club_settings.name' => 'Premium')
        ));

        $this->request->data['club_settings_premium'] = $club_settings_base['club_settings'];

        $club_settings_base = $this->club_settings->find(
            'first', array(
            'conditions' => array('club_settings.name' => 'Pro')
        ));

        $this->request->data['club_settings_professional'] = $club_settings_base['club_settings'];

        $this->loadmodel('language_values');
        $languageDetl = $this->language_values->find(
            'list', array(
            'fields' => array('id', 'lang_name')
        ));

        $this->loadModel('club_acnt_payterms');
        $club_payTerm = $this->club_acnt_payterms->find('all');
        $this->request->data['club_acnt_payterms'] = $club_payTerm[0]['club_acnt_payterms'];
        $b = unserialize($this->request->data['club_acnt_payterms']['message']);

        unset($this->request->data['club_acnt_payterms']['message']);
        foreach ($languageDetl as $key => $value) {
            $this->request->data['club_acnt_payterms']['msg_' . $value] = $b[$value];
        }

        $this->set(compact('languageDetl'));
    }

    /*
     * *************************
     * Action : save_base
     * Description: the action
     * save_base is used to
     * saving the new settings
     * for club of basic version
     * after edit.
     * Author : Nilesh
     * *************************
     */

    public function sendMessageToSelectedUsers()
    {
        $this->layout = 'ajax';
        $this->autoRender = true;
        if ($this->request->is('post')) {
            print_r($_POST);
            exit;
        }
        echo 'hiiii';
        exit;
    }

    /*
     **************************
     * Action : save_premium
     * Description: the action
     * save_premium is used to
     * saving the new settings
     * for club of premium
     * version after edit.
     * Author : Nilesh
     **************************
     */

    public function save_base()
    {

        $this->loadModel("club_settings");

        $this->autoRender = false;
        if ($this->request->is('post')) {

            if ($this->request->data['club_settings_base']['200'] == "0") {

                $this->request->data['club_settings_base']['200'] = "N";
                unset($this->request->data['club_settings_base']['200_price']);
                unset($this->request->data['club_settings_base']['200_total']);
            }

            if ($this->request->data['club_settings_base']['300'] == "0") {

                $this->request->data['club_settings_base']['300'] = "N";
                unset($this->request->data['club_settings_base']['300_price']);
                unset($this->request->data['club_settings_base']['300_total']);
            }

            if ($this->request->data['club_settings_base']['500'] == "0") {

                $this->request->data['club_settings_base']['500'] = "N";
                unset($this->request->data['club_settings_base']['500_price']);
                unset($this->request->data['club_settings_base']['500_total']);
            }

            if ($this->request->data['club_settings_base']['1000'] == "0") {

                $this->request->data['club_settings_base']['1000'] = "N";
                unset($this->request->data['club_settings_base']['1000_price']);
                unset($this->request->data['club_settings_base']['1000_total']);
            }

            $saveData['club_settings'] = $this->request->data['club_settings_base'];

            $this->club_settings->id = 1;

            $this->club_settings->saveAll($saveData);

            return $this->redirect(array('controller' => 'clubs', 'action' => 'clubSettings'));
        }
    }

    /*
     * *************************
     * Action : save_professional
     * Description: the action
     * save_professional is used to
     * saving the new settings
     * for club of professional
     *  version after edit.
     * Author : Nilesh
     * *************************
     */

    public function save_premium()
    {

        $this->autoRender = false;
        if ($this->request->is('post')) {

            if ($this->request->data['club_settings_premium']['200'] == "0") {

                $this->request->data['club_settings_premium']['200'] = "N";
                unset($this->request->data['club_settings_premium']['200_price']);
                unset($this->request->data['club_settings_premium']['200_total']);
            }

            if ($this->request->data['club_settings_premium']['300'] == "0") {

                $this->request->data['club_settings_premium']['300'] = "N";
                unset($this->request->data['club_settings_premium']['300_price']);
                unset($this->request->data['club_settings_premium']['300_total']);
            }

            if ($this->request->data['club_settings_premium']['500'] == "0") {


                $this->request->data['club_settings_premium']['500'] = "N";
                unset($this->request->data['club_settings_premium']['500_price']);
                unset($this->request->data['club_settings_premium']['500_total']);
            }

            if ($this->request->data['club_settings_premium']['1000'] == "0") {

                $this->request->data['club_settings_premium']['1000'] = "N";
                unset($this->request->data['club_settings_premium']['1000_price']);
                unset($this->request->data['club_settings_premium']['1000_total']);
            }

            $saveData['club_settings'] = $this->request->data['club_settings_premium'];
            $this->club_settings->id = 2;
            $this->club_settings->save($saveData);
            return $this->redirect(array('controller' => 'clubs', 'action' => 'clubSettings'));
        }
    }

    /*
     * *************************
     * Action : current_situations
     * Description: the action
     * current_situations is used to
     * show the current club
     * status and its member
     * overview
     * Author : Nilesh
     * Date : 23/8/2014
     * *************************
     */

    public function save_professional()
    {

        $this->autoRender = false;
        if ($this->request->is('post')) {

            if ($this->request->data['club_settings_professional']['200'] == "0") {

                $this->request->data['club_settings_professional']['200'] = "N";
                unset($this->request->data['club_settings_professional']['200_price']);
                unset($this->request->data['club_settings_professional']['200_total']);
            }

            if ($this->request->data['club_settings_professional']['300'] == "0") {

                $this->request->data['club_settings_professional']['300'] = "N";
                unset($this->request->data['club_settings_professional']['300_price']);
                unset($this->request->data['club_settings_professional']['300_total']);
            }

            if ($this->request->data['club_settings_professional']['500'] == "0") {

                $this->request->data['club_settings_professional']['500'] = "N";
                unset($this->request->data['club_settings_professional']['500_price']);
                unset($this->request->data['club_settings_professional']['500_total']);
            }

            if ($this->request->data['club_settings_professional']['1000'] == "0") {

                $this->request->data['club_settings_professional']['1000'] = "N";
                unset($this->request->data['club_settings_professional']['1000_price']);
                unset($this->request->data['club_settings_professional']['1000_total']);
            }

            $saveData['club_settings'] = $this->request->data['club_settings_professional'];
            $this->club_settings->id = 3;
            $this->club_settings->save($saveData);
            return $this->redirect(array('controller' => 'clubs', 'action' => 'clubSettings'));
        }
    }

    public function current_situations($clubId = null)
    {

        $this->layout = 'admin';
        $clubDataFromUser = $this->User->findById($clubId);
        $clubsubscriptionsData = $this->subscription_settings->findById(
            $clubDataFromUser['User']['subscription_setting_id']
        );

        $clubData = $this->clubs->findByUserId($clubId);
        $clubMembers = $this->club_members->find(
            'all', array(
            'conditions' => array('club_members.club_id' => $clubData['clubs']['id'])
        ));

        //---basic version counts---
        $expired_in_basic = 0;
        $expiring_in_15_days_in_basic = 0;
        $expiring_in_30_days_in_basic = 0;
        $available_in_basic = 0;

        //---premium version counts---
        $expired_in_premium = 0;
        $expiring_in_15_days_in_premium = 0;
        $expiring_in_30_days_in_premium = 0;
        $available_in_premium = 0;

        //---proffessional version count---
        $expired_in_pro = 0;
        $expiring_in_15_days_in_pro = 0;
        $expiring_in_30_days_in_pro = 0;
        $available_in_pro = 0;
        foreach ($clubMembers as $clubMember) {
            $clubMemberFromUser = $this->User->findById(
                $clubMember['club_members']['user_id']
            );
            //get the end of subscription date counts day remaining and show status expired,expiring or current
            $finalDate = new DateTime($clubMemberFromUser['User']['subscription_end_date']);
            $now = new DateTime();
            $diff = $now->diff($finalDate);

            /*
             * ***********************
             * In basic
             * **********************
             */
            if (in_array($clubMemberFromUser['User']['subscription_setting_id'], array(1, 2, 3, 6, 7))) {

                if ($diff->invert == 1) {

                    $expired_in_basic++;
                } else if ($diff->days < 31 && $diff->days > 15) {

                    $expiring_in_30_days_in_basic++;
                    $available_in_basic++;
                } else if ($diff->days < 31 && $diff->days < 16) {

                    $expiring_in_15_days_in_basic++;
                    $available_in_basic++;
                } else {

                    $available_in_basic++;
                }

            }

            /*
             * ***********************
             * In premium
             * **********************
             */
            if (in_array($clubMemberFromUser['User']['subscription_setting_id'], array(4, 8, 9))) {

                if ($diff->invert == 1) {

                    $expired_in_premium++;

                } else if ($diff->days < 31 && $diff->days > 15) {

                    $expiring_in_30_days_in_premium++;
                    $available_in_pro++;

                } else if ($diff->days < 31 && $diff->days < 16) {

                    $expiring_in_15_days_in_premium++;
                    $available_in_pro++;

                } else {

                    $available_in_pro++;
                }
            }
        }

        /*
         * **********************
         * In professional
         * **********************
         */
        if (in_array($clubMemberFromUser['User']['subscription_setting_id'], array(5, 14, 15))) {

            if ($diff->invert == 1) {
                $expired_in_pro++;
            } else if ($diff->days < 31 && $diff->days > 15) {

                $expiring_in_30_days_in_pro++;
                $available_in_basic++;

            } else if ($diff->days < 31 && $diff->days < 16) {

                $expiring_in_15_days_in_pro++;
                $available_in_basic++;

            } else {
                $available_in_basic++;
            }
        }

        $clubSettingVersionData['basic'] = $this->club_settings->findById(1);
        $clubSettingVersionData['premium'] = $this->club_settings->findById(2);
        $clubSettingVersionData['pro'] = $this->club_settings->findById(3);

        //---setting counts for basic version for frontend---
        $this->set(compact('expired_in_basic'));
        $this->set(compact('expiring_in_15_days_in_basic'));
        $this->set(compact('expiring_in_30_days_in_basic'));
        $this->set(compact('available_in_basic'));
        //--setting the count for premium version for frontend
        $this->set(compact('expired_in_premium'));
        $this->set(compact('expiring_in_15_days_in_premium'));
        $this->set(compact('expiring_in_30_days_in_premium'));
        $this->set(compact('available_in_premium'));
        //--setting the count for proffrssional version for frontend
        $this->set(compact('expired_in_pro'));
        $this->set(compact('expiring_in_15_days_in_pro'));
        $this->set(compact('expiring_in_30_days_in_pro'));
        $this->set(compact('available_in_pro'));
        $this->set(compact('clubSettingVersionData'));

    }

    public function access_control_list()
    {

        $this->layout = 'club_list_layout';

    }

    /*
     * Method used in ajax calls to render
     * users for autocomplete.
     *
     * It will return only the users that have a
     * relation with the club
     *
     * Use querystring term to search among the
     * username, first name and lastname*/
    public function search_member_for_autocomplete()
    {
        $this->autoRender = false;
        $this->loadModel('User');

        $val = $this->request->query['term'];

        $users = $this->User->find(
            'list', [
            'fields' => ['User.id', 'virtualfullnamewithlogin'],
            'conditions' => [
                'ClubMember.club_id' => $this->Session->read('Auth.Club.id'),
                'OR' => [
                    'User.firstname LIKE' => "%{$val}%",
                    'User.lastname LIKE' => "%{$val}%",
                    'User.username LIKE' => "%{$val}%"
                ]
            ],
            'joins' => [
                [
                    'alias' => 'ClubMember',
                    'table' => 'club_members',
                    'type' => 'LEFT',
                    'conditions' => '`ClubMember.user_id` = `User.id`'
                ]
            ]
        ]);

        return json_encode($users);
    }

    public function access_control()
    {

        $this->layout = 'club_clubtab';

        $this->loadModel('ClubSettingSubscriptionTypology');

        $date_from = $this->request->query["date_from"];
        $date_to = $this->request->query["date_to"];

        if (empty($date_from) && empty($date_to)) {
            $today = date('Y-m-d');
            $date_from = $today;
            $date_to = $today;
        }

        $subscription_categories = $this->ClubSettingSubscriptionTypology->find(
            'list',
            [
                'conditions' => ['ClubSettingSubscriptionTypology.club_id' => $this->Session->read('Auth.Club.id')],
                'fields' => ['ClubSettingSubscriptionTypology.id', 'ClubSettingSubscriptionTypology.activity_name']
            ]
        );

        $this->set('default_date_from', $date_from);
        $this->set('default_date_to', $date_to);

        // $this->set('users', $users);
        $this->set('lang_sys', $this->get_language_sysadministration());
        // print_r($subscription_categories);exit;
        $this->set(compact('subscription_categories'));
    }

    public function deletelist()
    {
        $this->loadModel('ClubAccessControl');
        $condition = array('ClubAccessControl.id in' => $_REQUEST['record_selected']);
        $this->ClubAccessControl->deleteAll($condition, false);
        echo 'delete';
        exit;
    }

    /**
     * Get list of all club members
     * return json to datatable or to print
     */
    public function getlist()
    {

        $this->loadModel('ClubAccessControl');
        $this->loadModel('ClubMember');

        // your code here
        $conditions['ClubAccessControl.status'] = 1;
        $conditions['ClubMember.club_id'] = $this->Session->read('Auth.Club.id');

        $month_condition = $this->request->query['condition'];


        if ($this->request->query['month'] && $month_condition == 'month') {
            $conditions['MONTH(ClubAccessControl.date)'] = $this->request->query['month'];
        }

        if ($this->request->query['year'] && $month_condition == 'month') {
            $conditions['YEAR(ClubAccessControl.date)'] = $this->request->query['year'];
        }

        if ($this->request->query['category']) {
            $conditions['ClubAccessControl.category_id'] = $this->request->query['category'];
        }

        if ($this->request->query['members']) {
            $member_ids = explode(',', $this->request->query['members']);
            $conditions['ClubAccessControl.user_id'] = $member_ids;
        }

        if (($this->request->query['date_from'] && $this->request->query['date_to']) && $month_condition != 'month') {

            $conditions['ClubAccessControl.date >= '] = date('Y-m-d', strtotime($this->request->query['date_from']));
            $conditions['ClubAccessControl.date <= '] = date('Y-m-d', strtotime($this->request->query['date_to']));

        }

        if (($this->request->query['time_from'] && $this->request->query['time_to']) && $month_condition != 'month') {
            $conditions['ClubAccessControl.hour >= '] = $this->request->query['time_from'];
            $conditions['ClubAccessControl.hour <= '] = $this->request->query['time_to'];
        }

        if (($this->request->query['card_from'] && $this->request->query['card_to']) && $month_condition != 'month') {
            $conditions['ClubAccessControl.card >= '] = trim($this->request->query['card_from']);
            $conditions['ClubAccessControl.card <= '] = trim($this->request->query['card_to']);
        }

        if (($this->request->query['card_type']) && $month_condition != 'month') {
            $conditions['ClubAccessControl.card_type'] = $this->request->query['card_type'];
        }

        if ($this->request->query['outcome'] && $month_condition != 'month') {
            $conditions['ClubAccessControl.outcome >'] = $this->request->query['outcome'];
        }


        $this->DataTable->mDataProp = true;


        if ($this->request->data['print_type_limit']) {

            if ($this->request->data['print_type_limit'] == 1) {
                $conditions['DATE_FORMAT(ClubAccessControl.date, "%Y-%m-%d")'] = date('Y-m-d');
            } else if ($this->request->data['print_type_limit'] == 2) {
                $conditions['MONTH(ClubAccessControl.date)'] = date('m');
            }

            $this->paginate = array(
                'conditions' => $conditions,
                'fields' => ['ClubAccessControl.id', 'ClubAccessControl.image', 'ClubAccessControl.name', 'ClubAccessControl.date', 'ClubAccessControl.hour', 'ClubAccessControl.sector', 'ClubAccessControl.outcome', 'ClubAccessControl.card', 'ClubAccessControl.type', 'ClubAccessControl.operator', 'ClubAccessControl.reader', 'ClubAccessControl.door', 'ClubSettingSubscriptionTypology.activity_name'],
                'joins' => [
                    [
                        'alias' => 'ClubMember',
                        'table' => 'club_members',
                        'type' => 'LEFT',
                        'conditions' => '`ClubMember.user_id` = `ClubAccessControl.user_id`'
                    ],
                    [
                        'alias' => 'ClubSettingSubscriptionTypology',
                        'table' => 'club_setting_subscription_typologies',
                        'type' => 'LEFT',
                        'conditions' => '`ClubSettingSubscriptionTypology.id` = `ClubAccessControl.category_id`'
                    ]
                ],
                'count_only' => [
                    'ClubMember.club_id = ' => $this->Session->read('Auth.Club.id')
                ]
            );
            $data = $this->DataTable->getResponse(null, 'ClubAccessControl');


            if ($this->request->data['export_category'] == 'excel') {
                $this->layout = '';
                $this->set('data', $data);
                $html = $this->render();
                $this->Common->arrayToexcell2($html); // export as table html
                //$this->Common->arrayToexcell($data['data']); // export as normal excell file
            }

            if ($this->request->data['export_category'] == 'pdf') {
                $this->layout = '';
                $this->set('data', $data);
                $html = $this->render();
                $this->Common->arrayTopdf($html);
            }

            if ($this->request->data['export_category'] == 'word') {

                $this->layout = '';
                $this->set('data', $data);
                $html = $this->render();
                $this->Common->arrayToword($html);
            }

            if ($this->request->data['export_category'] == 'webpage') {
                $this->layout = '';
                $this->set('data', $data);
                $html = $this->render();
                $this->Common->arrayTohtml($html);
            }

            $this->layout = '';
            $this->set('data', $data);

        } else {
            $this->autoRender = false;

            $maxResults = 0;
            if ($this->request->query['maxResults'] && (int)$this->request->query['maxResults'] > 0) {
                $maxResults = $this->request->query['maxResults'];
            }

            $this->paginate = array(
                'limit' => 10,
                'conditions' => $conditions,
                'fields' => ['ClubAccessControl.id', 'ClubAccessControl.image', 'User.firstname', 'User.lastname', 'ClubAccessControl.date', 'ClubAccessControl.hour', 'ClubAccessControl.sector', 'ClubAccessControl.outcome', 'ClubAccessControl.card', 'ClubAccessControl.type', 'ClubAccessControl.operator', 'ClubAccessControl.reader', 'ClubAccessControl.door', 'ClubSettingSubscriptionTypology.activity_name'],
                'joins' => [
                    [
                        'alias' => 'ClubMember',
                        'table' => 'club_members',
                        'type' => 'LEFT',
                        'conditions' => '`ClubMember.user_id` = `ClubAccessControl.user_id`'
                    ],
                    [
                        'alias' => 'ClubSettingSubscriptionTypology',
                        'table' => 'club_setting_subscription_typologies',
                        'type' => 'LEFT',
                        'conditions' => '`ClubSettingSubscriptionTypology.id` = `ClubAccessControl.category_id`'
                    ],
                    [
                        'alias' => 'User',
                        'table' => 'users',
                        'type' => 'LEFT',
                        'conditions' => '`ClubMember.user_id = `User.id``'
                    ]
                ],
                'count_only' => [
                    'ClubMember.club_id = ' => $this->Session->read('Auth.Club.id')
                ],
                'maxResultsOnly' => $maxResults
            );


            echo json_encode($this->DataTable->getResponse(null, 'ClubAccessControl'));


            exit;

        }
    }

    public function clubindex()
    {
        // $paypal = new PaypalPaymentComponent();
        // echo json_encode($paypal->doPayment('DoDirectPayment', 'Mastercard', '2223016768739313', '082022', '000', 'Eduardo', 'Macagnan', 3.00, 'USD', 'Teste'));
        // exit;
        //echo AuthComponent::password('123');exit;
        $this->layout = 'club_clubtab';
        $club_link_result = $this->club_link_name();
        //$_SESSION['Auth']['User']['action']=$this->params['action'];
        $conditions = array(
            'conditions' => array(
                'User.username' => $this->Session->read('Auth.User.username')
            ));
        $this->loadModel('User');
        $userResult = $this->User->getUserRecordByCondtions($conditions);
        //$userResult = $this->User->find('all', array('conditions' => array('User.username' => $this->Session->read('Auth.User.username'))));
        $openModal = (isset($this->request->query['openModal']) ? (bool)$this->request->query['openModal'] : true);
        $userResult[0]['User']['Clubmember_cnt'] = 0;
        $this->set('userResult', $userResult);
        $this->set(compact("club_link_result"));
        if ($openModal) {
            $today = (int)$this->Session->read('Popus.clubindex');
            $this->Session->write('Popups.clubindex', $today + 1);
        }
        $userProfile = $this->User->getUserRecordByWithoutCondtions();
    }

    //gurpreet

    public function club_site()
    {
        //$this->layout = 'clubSite';
        $this->layout = 'club_iframe';
    }

    //monika 08/05/2020

    public function access_list()
    {
        $this->layout = 'club_clubtab';

        $this->loadModel('User');

        $limit = (empty($this->request->query['limit']) ? 5 : $this->request->query['limit']);


        if (isset($_POST['log_ids']) && !empty($_POST['log_ids'])) {
            $log_ids = $_POST['log_ids'];
            $this->User->getDeleteLogs($log_ids);
        }

        $this->loadModel('ClubMember');
        $this->loadModel('ClubAccessControl');

        $this->paginate = $this->User->getAccessListCakeVersion($limit, $this->request->query);


        $userList = $this->paginate('ClubAccessControl');


        // $userList = $this->User->getAccessList();
        $this->set(compact('userList'));

    }

    public function access_list_grid()
    {

        $this->layout = 'club_clubtab';
        $this->loadModel('User');

        if (isset($_POST['log_ids']) && !empty($_POST['log_ids'])) {
            $log_ids = $_POST['log_ids'];
            $this->User->getDeleteLogs($log_ids);
        }

        //$limit = (empty($this->request->query['limit']) ? 5 : $this->request->query['limit']);

        $limit = 10;


        $this->loadModel('ClubMember');
        $this->loadModel('ClubAccessControl');

        $this->paginate = $this->User->getAccessListCakeVersion($limit, $this->request->query);

        $usergridList = $this->paginate('ClubAccessControl');

        $this->set(compact('usergridList'));

    }

    public function identity_verification()
    {

        $this->layout = 'club_clubtab';
        $this->loadModel('User');

        $limit = (empty($this->request->query['limit']) ? 5 : $this->request->query['limit']);

        $this->loadModel('ClubMember');
        $this->loadModel('ClubAccessControl');

        $this->paginate = $this->User->getIdentityVerification($limit, $this->request->query);

        $usergridList = $this->paginate('ClubAccessControl');
        $two_last_pics = glob(WWW_ROOT . 'entrance_user_pictures/*.jpeg');

        $listUsersWithMore = [];

        if ($this->request->query['only_multiple']) {
            $listUsersWithMore = $this->ClubAccessControl->find(
                'list', [
                'fields' => ['ClubAccessControl.user_id', 'ClubAccessControl.entrances_same_day'],
                'joins' => [
                    [
                        'table' => 'club_members',
                        'alias' => 'ClubMember',
                        'type' => 'LEFT',
                        'conditions' => [
                            'ClubAccessControl.user_id = ClubMember.user_id'
                        ]
                    ],
                ],
                'group' => ['ClubAccessControl.user_id, ClubAccessControl.date HAVING ClubAccessControl__entrances_same_day > 1'],
                'conditions' => [
                    'ClubMember.club_id' => $this->Session->read('Auth.Club.id')
                ]
            ]);
        }


        $this->set(compact('usergridList', 'two_last_pics', 'listUsersWithMore'));

    }

    public function access_list_data_only()
    {
        $this->layout = 'ajax';
        $this->loadModel('User');
        echo json_encode($this->User->getAccessList());
        exit;
    }

    public function clubindexmypage()
    {
        $this->layout = 'single_user';
    }

    public function image_upload_ajax($roleid)
    {

        $this->layout = '';
        $this->autoRender = false;
        $this->loadmodel('banners');
        $path = WWW_ROOT . 'img/banner/';
        $userUpdates = $this->banners->find(
            'all', array(
            'conditions' => array(
                'user_id' => $this->Session->read('Auth.User.id'),
                'role_id' => $roleid
            )
        ));

        $valid_formats = array("jpg", "png", "gif", "bmp", "jpeg", "PNG", "JPG", "JPEG", "GIF", "BMP");
        if ($this->request->form['bannerimg']['name'] != '') {

            $name = $this->request->form['bannerimg']['name'];
            $size = $this->request->form['bannerimg']['size'];
            if (strlen($name) != '') {
                $i = strrpos($name, ".");
                if (!$i) {
                    return "";
                }
                $l = strlen($name) - $i;
                $ext = substr($name, $i + 1, $l);
                if (in_array($ext, $valid_formats)) {
                    if ($size < (1024 * 1024)) {
                        $actual_image_name = time() . $this->Session->read('Auth.User.id') . "." . $ext;
                        $tmp = $this->request->form['bannerimg']['tmp_name'];
                        $bgSave = '<div id="uX' . $this->Session->read('Auth.User.id') . '" class="bgSave wallbutton blackButton">Save Cover</div>';
                        if (move_uploaded_file($tmp, $path . $actual_image_name)) {
                            if (count($userUpdates) == 0) {
                                $saveInfo = $this->banners->query("INSERT into banners values(''," . $this->Session->read('Auth.User.id') . "," . $roleid . ",'" . $actual_image_name . "','-')");
                            } else {
                                $saveInfo = $this->banners->query("UPDATE banners SET profile_background='" . $actual_image_name . "' where user_id=" . $this->Session->read('Auth.User.id') . " and role_id=" . $roleid);
                            }
                            echo $bgSave . "<img src='" . $this->webroot . "img/banner/" . $actual_image_name . "'  id='timelineBGload' class='headerimage ui-corner-all' style='top:0px'/>";
                        }
                    }
                }
            }
        }
    }

    public function image_saveBG_ajax()
    {

        $this->layout = '';
        $this->autoRender = false;
        $this->loadmodel('banners');
        if ($this->request->data['position'] != '') {
            $position = $this->request->data['position'];
            $saveInfo = $this->banners->query("UPDATE banners SET profile_background_position='" . $this->request->data['position'] . "' where user_id=" . $this->Session->read('Auth.User.id') . " and role_id=" . $this->request->data['roleid']);
            echo $position;
        }

    }

    public function manage_club_member_thumbnail()
    {
        $this->layout = 'club_clubtab';
    }

    //swap coded//
    public function new_moment_cash()
    { //swap

        $this->layout = 'club_clubtab';
        $this->loadModel('ClubMember');
        $this->ClubMember->recursive = 1;
        $club_members = $this->ClubMember->getMemberData($this->Session->read('Auth.Club.id'));
        $members = array();
        foreach ($club_members as $key => $value) {
            if (!empty($value['User']['id'])) {
                $members[$value['User']['id']] = (!empty($value['User']['firstname']) || !empty($value['User']['lastname'])) ? $value['User']['firstname'] . " " . $value['User']['lastname'] : $value['User']['username'];
            }
        }


        $this->set(compact('members'));
    }

    public function load_cash_form()
    { //swap

        $this->layout = 'ajax';
        $this->autoRender = true;
        $this->loadModel('ClubSettingSector');
        $this->loadModel('ClubSettingService');
        $this->loadModel('User');
        $sectorData = $this->ClubSettingSector->getSectorFunctionList();
        $seviceData = $this->ClubSettingService->find('all');
        $image_name = $this->User->getUserProfileById($this->request->data['user_id']);


        $this->set('username', $this->request->data['user_name']);

        $this->loadModel("ClubOperator");

        $UserID = $this->Session->read("Auth.User.id");
        $operators = $this->ClubOperator->getUsernameByUserID($UserID);
        $this->set(compact("sectorData", "seviceData", "operators", 'image_name'));
    }

    public function get_sector_record()
    {
        $this->layout = 'ajax';
        $this->autoRender = true;
        $this->loadModel('ClubSettingService');
        $seviceData = $this->ClubSettingService->getDataByserviceId($this->request->data['service_id']);
        echo json_encode($seviceData);
        exit;
    }

    public function pay_emp_member()
    { //swap

        $this->layout = 'club_clubtab';
        $this->loadModel('ClubMember');
        $this->loadModel('ClubOperator');
        $this->ClubMember->recursive = 1;
        $club_members = $this->ClubMember->getMemberData($this->Session->read('Auth.Club.id'));

        $employee = $this->ClubOperator->getEmployeeData($this->Session->read('Auth.User.id'));

        $members = array();
        foreach ($club_members as $key => $value) {
            if (!empty($value['User']['id'])) {
                $members[$value['User']['id']] = (!empty($value['User']['firstname']) || !empty($value['User']['lastname'])) ? $value['User']['firstname'] . " " . $value['User']['lastname'] : $value['User']['username'];
            }
        }
        $this->set(compact('members', 'employee'));

    }

    public function load_emp_member_form()
    { //swap

        $this->layout = 'ajax';
        $this->autoRender = true;
        $this->loadModel('ClubSettingSector');
        $this->loadModel('ClubSettingService');
        $sectorData = $this->ClubSettingSector->getSectorFunctionList();
        $seviceData = $this->ClubSettingService->find('all');
        $this->set('username', $this->request->data['user_name']);
        $this->set('sectorData', $sectorData);
        $this->set('seviceData', $seviceData);

    }

    public function insert_cash_record()
    { //swap

        $this->layout = 'ajax';
        $this->autoRender = false;
        $this->loadModel('ServicePurchase');
        $this->loadModel('ServicePurchasesDetail');

        $restAmt = $this->request->data['value'] - $this->request->data['payAmount'];
        $saveData['ServicePurchase']['sector_id'] = $this->request->data['sector'];
        $saveData['ServicePurchase']['user_id'] = $this->request->data['user_id'];
        $saveData['ServicePurchase']['club_id'] = $this->Session->read('Auth.Club.id');
        $saveData['ServicePurchase']['service_id'] = $this->request->data['service'];
        $saveData['ServicePurchase']['value'] = $this->request->data['value'];
        $saveData['ServicePurchase']['pay'] = $this->request->data['payAmount'];
        $saveData['ServicePurchase']['rest'] = $restAmt;
        $saveData['ServicePurchase']['paydate'] = $this->request->data['paydate'];
        $saveData['ServicePurchase']['casual'] = $this->request->data['casual'];

        if ($this->ServicePurchase->save($saveData)) {

            $id = $this->ServicePurchase->getLastInsertID();
            $spDetail['ServicePurchasesDetail']['sp_id'] = $id;
            $spDetail['ServicePurchasesDetail']['paid'] = $this->request->data['value'];
            $spDetail['ServicePurchasesDetail']['balance'] = $this->request->data['value'] - $this->request->data['payAmount'];
            $spDetail['ServicePurchasesDetail']['payment_date'] = $this->request->data['paydate'];
            $spDetail['ServicePurchasesDetail']['description'] = $this->request->data['casual'];
            $this->ServicePurchasesDetail->create();
            $this->ServicePurchasesDetail->save($spDetail);
            echo "1";
            exit;
        } else {
            echo "0";
            exit;
        }
    }


    public function insert_emp_mem_record()
    {  //swap

        $this->layout = 'ajax';
        $this->autoRender = false;
        $this->loadModel('ServicePurchase');
        $this->loadModel('ServicePurchasesDetail');

        if (!empty($this->request->data["discount"])) {
            $currentAmount = $this->request->data["value"];
            $discount = ($currentAmount * $this->request->data["discount"]) / 100;
            $totalDisc = $currentAmount - $discount;
            $this->request->data["value"] = $totalDisc;
        }
        if (!empty($this->request->data['date']))
            $expireDate = date("Y-m-d", strtotime($this->request->data['date']));
        else
            $expireDate = "";


        if (!empty($this->request->data["pay"])) {

            // $this->request->data["value"]= $this->request->data["value"]-$this->request->data["pay"]; // comment
        }
        if ($this->request->data['type'] == 1) {
            $saveData['ServicePurchase']['out'] = $this->request->data['out'];
            $saveData['ServicePurchase']['user_id'] = $this->request->data['user_id'];
            $saveData['ServicePurchase']['club_id'] = $this->Session->read('Auth.Club.id');
            $saveData['ServicePurchase']['paydate'] = $this->request->data['paydate'];
            $saveData['ServicePurchase']['type'] = $this->request->data['type'];
        } else {

            if (!empty($this->request->data['date'])) {
                $time = (!empty($this->request->data['time'])) ? $this->request->data['time'] : "00:00";
                $date = $this->request->data['date'] . " " . $time . ":00";
                unset($this->request->data['date']);
                unset($this->request->data['time']);
            }
            if (empty($this->request->data['passowrdTxt'])) {
                echo "0";
                exit;
            }
            $passwordHasher = new SimplePasswordHasher();
            $getPasword = trim($passwordHasher->hash($this->request->data['passowrdTxt']));
            $this->loadModel("User");
            $loginPassword = $this->User->getUserPasswordById($this->request->data['operator_id']);

            // $loginPassword      = trim($this->Session->read("Auth.User.password"));
            if ($loginPassword != $getPasword) {
                echo "2";
                exit;
            }
            unset($this->request->data['passowrdTxt']);
            $this->request->data['club_id'] = $this->Session->read('Auth.Club.id');
            $saveData['ServicePurchase'] = $this->request->data;
        }

        if (!empty($this->request->data['annotation']))
            $saveData['ServicePurchase']['annotation'] = !empty($this->request->data['annotation']) ? $this->request->data['annotation'] : "";
        else
            $saveData['ServicePurchase']['casual'] = !empty($this->request->data['casual']) ? $this->request->data['casual'] : "";


        if (empty($this->request->data['pay'])) {
            $saveData['ServicePurchase']['rest'] = !empty($this->request->data['value']) ? $this->request->data['value'] : $this->request->data['out'];
        } else {
            $saveData['ServicePurchase']['rest'] = $this->request->data['value'] - $this->request->data['pay'];
        }

        if (!empty($this->request->data['sector_id'])) {
            $saveData['ServicePurchase']['sector_id'] = $this->request->data['sector_id'];
        }
        if (!empty($this->request->data['service_id'])) {
            $saveData['ServicePurchase']['service_id'] = $this->request->data['service_id'];
        }


        if (empty($saveData["ServicePurchase"]["discount"])) {
            $saveData["ServicePurchase"]["discount"] = 0;
        } else {
            $saveData["ServicePurchase"]["discount"] = 10;
        }

        $this->ServicePurchase->create();
        if ($this->ServicePurchase->save($saveData)) {


            $id = $this->ServicePurchase->getInsertID();
            $spDetail['ServicePurchasesDetail']['sp_id'] = $id;
            $spDetail['ServicePurchasesDetail']['paid'] = !empty($this->request->data['pay']) ? $this->request->data['pay'] : 0;
            $spDetail['ServicePurchasesDetail']['balance'] = !empty($this->request->data['value']) ? $this->request->data['value'] - $this->request->data['pay'] : $this->request->data['out'];
            $spDetail['ServicePurchasesDetail']['payment_date'] = $this->request->data['paydate'];
            $spDetail['ServicePurchasesDetail']['expire_date'] = $expireDate;
            // $spDetail['ServicePurchasesDetail']['balance']=$this->request->data['value']-$this->request->data['payAmount'];
            //   $spDetail['ServicePurchasesDetail']['payment_date']=$this->request->data['paydate'];

            $spDetail['ServicePurchasesDetail']['description'] = !empty($this->request->data['casual']) ? $this->request->data['casual'] : !empty($this->request->data['annotation']) ? $this->request->data['annotation'] : "";


            if (empty($spDetail["ServicePurchasesDetail"]["description"])) unset($spDetail["ServicePurchasesDetail"]["description"]);
            $this->ServicePurchasesDetail->create();
            $this->ServicePurchasesDetail->save($spDetail);

            echo "1";
            exit;

        } else {
            echo "3";
            exit;
        }

    }


    public function archive_service_list($param = 'all', $mode = "image")
    { //swap

        $this->layout = 'club_clubtab';
        $this->loadModel('ServicePurchase');
        $pconditions = array("ServicePurchase.club_id" => $this->Session->read('Auth.Club.id'));
        $porder_condition = array("ServicePurchase.id" => "DESC");
        if ($this->request->is('post') || $this->request->is('pust')) {
            $conditions = $this->__getFilterData('ServicePurchase', $this->request->data);
            $order = $this->__getOrderData('ServicePurchase', $this->request->data);
            if (!empty($order['conditions'])) {
                array_push($pconditions, $order['conditions']);
            }
            if (!empty($order['order'])) {
                array_push($porder_condition, $order['order']);
            }
            if (!empty($conditions)) {
                array_push($pconditions, $conditions);
            }
        }


        if ($param == '7') {
            $conditions = array_push($pconditions, array('ServicePurchase.paydate BETWEEN ? AND ?' => array(date('Y-m-d', strtotime('-1 months')), date('Y-m-d'))));
        }
        if ($param == '15') {
            $conditions = array_push($pconditions, array('ServicePurchase.paydate BETWEEN ? AND ?' => array(date('Y-m-d', strtotime('-1 months')), date('Y-m-d'))));
        }

        if ($param == 'Last') {
            $conditions = array_push($pconditions, array('ServicePurchase.paydate BETWEEN ? AND ?' => array(date('Y-m-d', strtotime('-1 months')), date('Y-m-d'))));
        }
        $this->Paginator->settings = array(
            'conditions' => $pconditions,
            'limit' => 10,
            'recursive' => 1,
            'order' => $porder_condition
        );
        $ServicePurchase = $this->Paginator->paginate('ServicePurchase');

        $this->set('ServicePurchase', $ServicePurchase);
        $this->set('mode', $mode);
        $this->set('param', $param);
    }

    public function deadline_detail($param = 'all', $mode = "image")
    { //swap

        $this->layout = 'club_clubtab';
        $this->loadModel('ServicePurchase');
        $pconditions = array("ServicePurchase.club_id" => $this->Session->read('Auth.Club.id'));
        $porder_condition = array("ServicePurchase.id" => "DESC");
        if ($this->request->is('post') || $this->request->is('pust')) {
            $conditions = $this->__getFilterData('ServicePurchase', $this->request->data);
            $order = $this->__getOrderData('ServicePurchase', $this->request->data);
            if (!empty($order['conditions'])) {
                array_push($pconditions, $order['conditions']);
            }
            if (!empty($order['order'])) {
                array_push($porder_condition, $order['order']);
            }
            if (!empty($conditions)) {
                array_push($pconditions, $conditions);
            }
        }

        if ($param == '7') {
            $conditions = array_push($pconditions, array('ServicePurchase.paydate BETWEEN ? AND ?' => array(date('Y-m-d', strtotime('-1 months')), date('Y-m-d'))));
        }
        if ($param == '15') {
            $conditions = array_push($pconditions, array('ServicePurchase.paydate BETWEEN ? AND ?' => array(date('Y-m-d', strtotime('-1 months')), date('Y-m-d'))));
        }
        if ($param == 'Last') {
            $conditions = array_push($pconditions, array('ServicePurchase.paydate BETWEEN ? AND ?' => array(date('Y-m-d', strtotime('-1 months')), date('Y-m-d'))));
        }
        $this->Paginator->settings = array(
            'conditions' => $pconditions,
            'limit' => 10,
            'recursive' => 1,
            'order' => $porder_condition
        );
        $ServicePurchase = $this->Paginator->paginate('ServicePurchase');
        $this->set('ServicePurchase', $ServicePurchase);
        $this->set('mode', $mode);
        $this->set('param', $param);

    }

    public function user_payment_list($id, $param = 'all', $mode = "image")
    {

        $pconditions = array("ServicePurchase.id" => $id);
        $this->loadModel('ServicePurchasesDetail');
        $this->loadModel('ServicePurchase');
        $this->loadModel('User');
        $this->layout = 'club_clubtab';
        $porder_condition = array("ServicePurchasesDetail.id" => "DESC");

        if ($this->request->is('post') || $this->request->is('pust')) {
            $conditions = $this->__getFilterData('ServicePurchasesDetail', $this->request->data, 'payment_date');


            $order = $this->__getOrderData('ServicePurchasesDetail', $this->request->data);

            if (!empty($order['conditions'])) {
                $user_id = $this->User->find(
                    'list',
                    array(
                        'fields' => array('id'),
                        'conditions' => $order['conditions']
                    )
                );
                $pconditions = array("ServicePurchase.user_id" => $user_id);


                //   array_push($pconditions, $order['conditions']);
            }
            if (!empty($order['order'])) {
                array_push($porder_condition, $order['order']);
            }
            if (!empty($conditions)) {
                array_push($pconditions, $conditions);
            }
        }

        switch ($param) {
            case '7':
                $conditions = array_push($pconditions, array('ServicePurchasesDetail.payment_date BETWEEN ? AND ?' => array(date('Y-m-d', strtotime('-1 months')), date('Y-m-d'))));
                break;

            case '15':
                $conditions = array_push($pconditions, array('ServicePurchasesDetail.payment_date BETWEEN ? AND ?' => array(date('Y-m-d', strtotime('-1 months')), date('Y-m-d'))));
                break;

            case 'Last':
                $conditions = array_push($pconditions, array('ServicePurchasesDetail.payment_date BETWEEN ? AND ?' => array(date('Y-m-d', strtotime('-1 months')), date('Y-m-d'))));
                break;

        }

        //pr($pconditions);die;
        $this->ServicePurchase->unbindModel(
            array('hasMany' => array('ServicePurchasesDetail'))
        );
        $this->Paginator->settings = array(
            'limit' => 10,
            'conditions' => $pconditions,
            'recursive' => 2,
        );
        $serviceDetails = $this->Paginator->paginate('ServicePurchasesDetail');
        $userList = $this->User->find('list', array('fields' => array('id', 'username')));

        $this->set('serviceDetails', $serviceDetails);
        $this->set('userList', $userList);
        $this->set('mode', $mode);
        $this->set('param', $param);
        $this->set('id', $id);


    }

    public function user_payment_list_old($id, $param = 'all', $mode = "image")
    { //swap

        $this->layout = 'club_clubtab';
        $this->loadModel('ServicePurchase');
        $pconditionsId = array("ServicePurchase.id" => $id);
        $pconditions = array();
        $porder_condition = array("ServicePurchasesDetail.id" => "DESC");
        $userList = $this->User->find('list', array('fields' => array('id', 'username')));
        if ($this->request->is('post') || $this->request->is('pust')) {
            $conditions = $this->__getFilterData('ServicePurchasesDetail', $this->request->data, 'payment_date');

            $order = $this->__getOrderData('ServicePurchasesDetail', $this->request->data);
            if (!empty($order['conditions'])) {
                array_push($pconditions, $order['conditions']);
            }
            if (!empty($order['order'])) {
                array_push($porder_condition, $order['order']);
            }
            if (!empty($conditions)) {
                array_push($pconditions, $conditions);
            }
        }


        if ($param == '7') {

            $conditions = array_push($pconditions, array('ServicePurchasesDetail.payment_date BETWEEN ? AND ?' => array(date('Y-m-d', strtotime('-1 months')), date('Y-m-d'))));
        }
        if ($param == '15') {
            $conditions = array_push($pconditions, array('ServicePurchasesDetail.payment_date BETWEEN ? AND ?' => array(date('Y-m-d', strtotime('-1 months')), date('Y-m-d'))));
        }

        if ($param == 'Last') {
            $conditions = array_push($pconditions, array('ServicePurchasesDetail.payment_date BETWEEN ? AND ?' => array(date('Y-m-d', strtotime('-1 months')), date('Y-m-d'))));
        }


        $this->loadModel('ServicePurchasesDetail');
        $this->ServicePurchasesDetail->recursive = -1;
        $result = $this->ServicePurchasesDetail->find('all', array(array("fields" => array('ServicePurchasesDetail.sp_id'), $conditions)));
        $ps_id = Hash::extract($result, '{n}.ServicePurchasesDetail.id');


        $this->Paginator->settings = array(
            'conditions' => $pconditionsId,
            'limit' => 10,
            'recursive' => 1,
            //'order'         => $porder_condition
        );

        $ServicePurchase = $this->Paginator->paginate('ServicePurchase');
        $serviceDetails = $ServicePurchase[0]['ServicePurchasesDetail'];

        foreach ($serviceDetails as $key => $value) {

            if (in_array($value['id'], $ps_id)) {

                $serviceDetails[$key]["User"] = $ServicePurchase[0]['User'];
                $serviceDetails[$key]["ServicePurchase"] = $ServicePurchase[0]["ServicePurchase"];
            }

        }


        $this->set('serviceDetails', $serviceDetails);
        $this->set('userList', $userList);
        $this->set('mode', $mode);
        $this->set('param', $param);
        $this->set('id', $id);

    }


    public function dead_line($param = 'all', $mode = "image")
    { //swap

        $this->layout = 'club_clubtab';
        $this->loadModel('ServicePurchase');
        $this->loadModel('User');

        $userList = $this->User->find('list', array('fields' => array('id', 'username')));
        $pconditions = array('ServicePurchase.club_id' => $this->Session->read('Auth.Club.id'));
        $porder_condition = array("ServicePurchase.id" => "DESC");
        if ($this->request->is('post') || $this->request->is('pust')) {
            $conditions = $this->__getFilterData('ServicePurchase', $this->request->data);
            $order = $this->__getOrderData('ServicePurchase', $this->request->data);
            if (!empty($order['conditions'])) {
                array_push($pconditions, $order['conditions']);
            }
            if (!empty($order['order'])) {
                array_push($porder_condition, $order['order']);
            }
            if (!empty($conditions)) {
                array_push($pconditions, $conditions);
            }
        }

        if ($param == 'Last') {
            $conditions = array_push($pconditions, array('ServicePurchase.paydate BETWEEN ? AND ?' => array(date('Y-m-d', strtotime('-1 months')), date('Y-m-d'))));
        }
        $this->Paginator->settings = array(
            'conditions' => $pconditions,
            'limit' => 10,
            'recursive' => 1,
            'order' => $porder_condition
        );
        $ServicePurchase = $this->Paginator->paginate('ServicePurchase');
        $this->set('ServicePurchase', $ServicePurchase);
        $this->set(compact('mode', 'param', 'userList'));

    }

    public function movement_cash($param = 'all', $mode = "image")
    { //swap

        $this->layout = 'club_clubtab';
        $this->loadModel('ServicePurchase');
        $this->loadModel('User');

        $userList = $this->User->find('list', array('fields' => array('id', 'username')));
        $pconditions = array('ServicePurchase.club_id' => $this->Session->read('Auth.Club.id'));
        $porder_condition = array("ServicePurchase.id" => "DESC");

        if ($this->request->is('post') || $this->request->is('pust')) {
            $conditions = $this->__getFilterData('ServicePurchase', $this->request->data);
            $order = $this->__getOrderData('ServicePurchase', $this->request->data);

            if (!empty($order['conditions'])) {
                array_push($pconditions, $order['conditions']);
            }
            if (!empty($order['order'])) {
                $porder_condition = $order['order'];
            }
            if (!empty($conditions)) {
                array_push($pconditions, $conditions);
            }
        }

        if ($param == 'Last') {
            $conditions = array_push($pconditions, array('ServicePurchase.paydate BETWEEN ? AND ?' => array(date('Y-m-d', strtotime('-1 months')), date('Y-m-d'))));
        }
        if ($param == '7') {
            $conditions = array_push($pconditions, array('ServicePurchase.paydate BETWEEN ? AND ?' => array(date('Y-m-d', strtotime('-15 days')), date('Y-m-d'))));
        }
        if ($param == '15') {
            $conditions = array_push($pconditions, array('ServicePurchase.paydate BETWEEN ? AND ?' => array(date('Y-m-d', strtotime('-7 days')), date('Y-m-d'))));
        }


        $this->Paginator->settings = array(
            'conditions' => $pconditions,
            'limit' => 10,
            'recursive' => 1,
            'order' => $porder_condition
        );
        $ServicePurchase = $this->Paginator->paginate('ServicePurchase');

        $operatorList = $this->User->getUserListRecord();

        $this->set('ServicePurchase', $ServicePurchase);
        $this->set(compact('mode', 'param', 'userList', 'operatorList'));

    }

    public function movement_cash_details($param = 'all', $mode = "image")
    { //swap

        $this->layout = 'club_clubtab';
        $this->loadModel('DeadlineExpense');
        $this->loadModel('User');

        $userList = $this->User->find('list', array('fields' => array('id', 'username')));
        $pconditions = array('DeadlineExpense.club_id' => $this->Session->read('Auth.Club.id'));
        $porder_condition = array("DeadlineExpense.id" => "DESC");


        if ($param == 'IN') {
            $conditions = array_push($pconditions, array('DeadlineExpense.status' => $param));
        }
        if ($param == 'OUT') {
            $conditions = array_push($pconditions, array('DeadlineExpense.status' => $param));
        }


        $this->Paginator->settings = array(
            'conditions' => $pconditions,
            'limit' => 10,
            'recursive' => 1,
            'order' => $porder_condition
        );
        $DeadlineExpense = $this->Paginator->paginate('DeadlineExpense');

        $operatorList = $this->User->getUserListRecord();

        $this->set('DeadlineExpense', $DeadlineExpense);
        $this->set('status_selected', $param);
        $this->set(compact('mode', 'param', 'userList', 'operatorList'));

    }


    public function dead_line_detail($id, $param = 'all', $mode = "image")
    { //swap

        $this->layout = 'club_clubtab';
        $this->loadModel('ServicePurchasesDetail');
        $this->loadModel('User');

        $userList = $this->User->find('list', array('fields' => array('id', 'username')));
        $pconditions = array('ServicePurchasesDetail.sp_id' => $id);
        $porder_condition = array("ServicePurchasesDetail.id" => "DESC");

        if ($this->request->is('post') || $this->request->is('pust')) {
            $conditions = $this->__getFilterDataDetail('ServicePurchasesDetail', $this->request->data);
            $order = $this->__getOrder('ServicePurchasesDetail', $this->request->data);

            if (!empty($order['conditions'])) {
                array_push($pconditions, $order['conditions']);
            }
            if (!empty($order['order'])) {
                array_push($porder_condition, $order['order']);
            }
            if (!empty($conditions)) {
                array_push($pconditions, $conditions);
            }
        }

        if ($param == '7') {
            $conditions = array_push($pconditions, array('ServicePurchasesDetail.payment_date BETWEEN ? AND ?' => array(date('Y-m-d', strtotime('-7 days')), date('Y-m-d'))));
        }
        if ($param == '15') {
            $conditions = array_push($pconditions, array('ServicePurchasesDetail.payment_date BETWEEN ? AND ?' => array(date('Y-m-d', strtotime('-15 days')), date('Y-m-d'))));
        }

        if ($param == '30') {
            $conditions = array_push($pconditions, array('ServicePurchasesDetail.payment_date BETWEEN ? AND ?' => array(date('Y-m-d', strtotime('-1 months')), date('Y-m-d'))));
        }

        $this->Paginator->settings = array(
            'conditions' => $pconditions,
            'limit' => 10,
            'recursive' => 2,
            'order' => $porder_condition
        );
        $ServicePurchase = $this->Paginator->paginate('ServicePurchasesDetail');

        $this->set('ServicePurchase', $ServicePurchase);
        $this->set(compact('mode', 'param', 'userList', 'id'));

    }

    public function __getFilterDataDetail($tableName, $requestData)
    {


        $conditions = array();
        $fields = array("paydate" => "paydate", "country_id" => "country_id");

        if (!empty($requestData['ServicePurchase']['country_id'])) {


            $listId = $this->User->getUserIdList(array("User." . $fields["country_id"] => $requestData['ServicePurchase']['country_id']));
            $pushArray = array("ServicePurchase.user_id" => $listId);

            array_push($conditions, $pushArray);
        }
        if (!empty($requestData['ServicePurchase']['form_date']) && !empty($requestData['ServicePurchase']['to_date'])) {
            $pushArray = array(
                "ServicePurchasesDetail.payment_date" . " >="
                => $requestData['ServicePurchase']['form_date'],
                "ServicePurchasesDetail.payment_date" . " <="
                => $requestData['ServicePurchase']['to_date']
            );
            array_push($conditions, $pushArray);
        }
        if (!empty($requestData['ServicePurchase']['form_date']) && empty($requestData['ServicePurchase']['to_date'])) {
            $pushArray = array("ServicePurchasesDetail.payment_date >=" => $requestData['ServicePurchase']['form_date']);
            array_push($conditions, $pushArray);
        }
        return $conditions;

    }

    private function __getOrder($tableName, $requestData)
    {


        $order = array();
        if ($requestData['orderbing'] == "old") {
            $pushArray = array("ServicePurchasesDetail.id" => "ASC");
            array_push($order, $pushArray);
        }
        if ($requestData['orderbing'] == "recent") {
            $order["order"] = array("ServicePurchasesDetail.id" => "DESC");
        }
        if (!empty($requestData['username']) && empty($requestData['coloume_name'])) {

            $listId = $this->User->getUserIdList(array("User.username" => $requestData['username']));
            $order["conditions"] = array("ServicePurchase.user_id" => $listId);
        }
        if (!empty($requestData['username']) && !empty($requestData['coloume_name'])) {

            $listId = $this->User->getUserIdList(array("User." . $requestData['coloume_name'] => $requestData['username']));
            $order["conditions"] = array("ServicePurchase.user_id" => $listId);

        }
        return $order;


    }

    public function delete_service()
    {
        $this->layout = 'ajax';
        $this->autoRender = false;
        $this->loadModel('ServicePurchase');
        $idArray = $this->request->data['id'];
        if ($this->ServicePurchase->deleteAll(array('ServicePurchase.id' => $idArray), false)) {
            echo "1";
            exit;
        } else {
            echo "0";
            exit;
        }

    }

    public function delete_service_detail()
    {
        $this->layout = 'ajax';
        $this->autoRender = false;
        $this->loadModel('ServicePurchasesDetail');
        $idArray = $this->request->data['id'];

        if ($this->ServicePurchasesDetail->deleteAll(array('ServicePurchasesDetail.id' => $idArray), false)) {
            echo "1";
            exit;
        } else {
            echo "0";
            exit;
        }

    }


    public function payment_detail($id)
    {

        $this->layout = 'club_clubtab';
        $this->loadModel('ClubOperator');
        $this->loadModel('ServicePurchase');
        $this->loadModel('ServicePurchasesDetail');
        $this->ServicePurchase->recursive = 1;

        if ($this->request->is('post') || $this->request->is('pust')) {

            $ServicePurchase = $this->ServicePurchase->getRecordBydId($id);
            $restAmount = $this->request->data['rest_give'] - $this->request->data['amount_paid'];
            $previousAmount = $ServicePurchase['ServicePurchase']['pay'] + $this->request->data['amount_paid'];
            $this->__updateServicePurchaseTable($this->request->data, $previousAmount, $restAmount, $id);
            $this->__insertServicePurchaseDetailbeTable($this->request->data, $previousAmount, $restAmount, $id);
            if ($this->request->data['pay_mode'] == 3)
                $this->__savePaymentCreditRecord($this->request->data, $ServicePurchase['ServicePurchase']['user_id']);

        }

        $ServicePurchase = $this->ServicePurchase->getRecordBydId($id);
        $total = $ServicePurchase['ServicePurchase']['value'];
        $section = $ServicePurchase['ClubSettingSector']['sector_name'] . "-" . $ServicePurchase['ClubSettingService']['service_name'];
        $UserID = $this->Session->read('Auth.User.id');
        $operators = $this->ClubOperator->getUsernameByUserID($UserID);
        $this->set('ServicePurchase', $ServicePurchase);
        $this->set('operators', $operators);
        $this->set('id', $id);
        $this->set('user_id', $ServicePurchase["ServicePurchase"]["user_id"]);
        $this->set('total', $total);
        $this->set('section', $section);

    }

    private function __updateServicePurchaseTable($thisRequest, $previousAmount, $restAmount, $id)
    { //swap
        $this->loadModel('ServicePurchase');
        $spData['ServicePurchase']['pay'] = $previousAmount;
        $spData['ServicePurchase']['rest'] = $restAmount;
        $spData['ServicePurchase']['operator_id'] = $thisRequest['operator_id'];
        $spData['ServicePurchase']['pay_mode'] = $thisRequest['pay_mode'];
        $spData['ServicePurchase']['casual'] = $thisRequest['description'];
        $spData['ServicePurchase']['payment_type'] = $thisRequest['payment_type'];
        $spData['ServicePurchase']['tax_doc'] = ($this->request->data['tax_doc'] == "on") ? 1 : 0;
        $this->ServicePurchase->id = $id;
        $this->ServicePurchase->save($spData);
    }

    private function __insertServicePurchaseDetailbeTable($thisRequest, $previousAmount, $restAmount, $id)
    {

        $this->loadModel('ServicePurchasesDetail');
        $spDetail['ServicePurchasesDetail']['sp_id'] = $id;
        $spDetail['ServicePurchasesDetail']['paid'] = $thisRequest['amount_paid'];
        //$spDetail['ServicePurchasesDetail']['paid']=$thisRequest['pay_with'];
        $spDetail['ServicePurchasesDetail']['balance'] = $restAmount;
        $spDetail['ServicePurchasesDetail']['payment_date'] = $thisRequest['date_payment'];
        $spDetail['ServicePurchasesDetail']['expire_date'] = $thisRequest['debt_expire'];
        $this->ServicePurchasesDetail->create();
        $this->ServicePurchasesDetail->save($spDetail);

    }

    private function __savePaymentCreditRecord($requestData, $user_id)
    {

        $this->loadModel('InsertCredit');
        $this->loadModel('InsertCreditDetail');
        $uesrData = $this->InsertCredit->find('all', array('conditions' => array('club_id' => $_SESSION['Auth']['User']["Club"][0]["id"], 'user_id' => $user_id)));
        $insertCreditData = array();
        $remainingData = $uesrData[0]["InsertCredit"]["last_annotations"] - $requestData['amount_paid'];
        $insertCreditData["InsertCredit"]["last_credit_added"] = $uesrData[0]["InsertCredit"]["last_annotations"];
        $insertCreditData["InsertCredit"]["credit_available"] = $remainingData;
        $insertCreditData["InsertCredit"]["pay"] = $requestData['amount_paid'];
        //print_r($insertCreditData);die;
        $this->InsertCredit->id = $uesrData[0]["InsertCredit"]["id"];
        if ($this->InsertCredit->save($insertCreditData)) {
            $InsertCreditDetail["InsertCreditDetail"]["credit_id"] = $this->InsertCredit->id;
            $InsertCreditDetail["InsertCreditDetail"]["last_current_available"] = $uesrData[0]["InsertCredit"]["last_annotations"];
            $InsertCreditDetail["InsertCreditDetail"]["total_current_available"] = $remainingData;
            $InsertCreditDetail["InsertCreditDetail"]["pay"] = $requestData['amount_paid'];
            $InsertCreditDetail["InsertCreditDetail"]["credit_type"] = "pay";
            $this->InsertCreditDetail->save($InsertCreditDetail);
        }
    }

    public function check_super_admin_password()
    {

        $this->layout = '';
        $this->autoRender = false;
        if ($this->request->data['textPayMode'] == 3)
            $this->__checkCreditValue($this->request->data);
        $password = $this->request->data['password'];
        $hashedPassword = Security::hash($password, null, true);
        $this->unbindUserSocialBanner();
        $result = $this->User->find('all', array('fields' => array("User.id"), 'conditions' => array('AND' => array(array('User.password' => $hashedPassword), array('User.email' => $_SESSION['Auth']['User']['email'])))));
        if (!empty($result)) {
            echo "1";
            exit;
        } else {
            echo "0";
            exit;
        }
    }

    private function __checkCreditValue($requestData)
    {

        if (!empty($requestData['textAmountPaid'])) {
            $this->loadModel('InsertCredit');
            $this->InsertCredit->recursive = -1;
            $uesrData = $this->InsertCredit->find('all', array('conditions' => array('club_id' => $_SESSION['Auth']['User']["Club"][0]["id"], 'user_id' => $requestData['user_id'])));

            if (!empty($uesrData[0]["InsertCredit"]["credit_available"]) && $uesrData[0]["InsertCredit"]["credit_available"] > $requestData['textAmountPaid']) {
                return true;
            } else {
                echo 3;
                die;
            }
        } else {
            echo "3";
            exit;
        }
    }

    //swap//

    public function manage_club_member()
    {

        $this->layout = 'club_clubtab';
        $this->loadModel('club_members');
        $this->loadModel('users');
        $this->loadModel('countries');
        $this->loadModel('roles');
        $this->loadModel('subscription_settings');
        $this->loadModel('club_membership_requests');
        $this->loadModel('states');
        $this->loadModel('user_payments');
        $fileter_condition = array();
        $filterSubCondition = array();
        $order = array('club_members.user_id  ASC');
        $club_country = $this->Auth->User('Country');
        $club_currency_code = $club_country['code'];

        if ($this->request->is('post') || $this->request->is('pust')) {
            // pr($this->request->data); //exit;
            /***************filter condition*************/
            //$fileter_condition = array('club_members.club_id' => $_SESSION['Auth']['Club']['id']);
            array_push($filterSubCondition, array('club_members.club_id' => $_SESSION['Auth']['Club']['id'], array('club_membership_requests.status' => 'accepted')));
            //if filter condition false
            $flag = false;
            if (!empty($this->request->data['filter']['Username'])) {
                //Push subcondition in array
                array_push($filterSubCondition, array('users.username' => $this->request->data['filter']['Username']));
                $flag = true;

                //ENd

            }

            if (!empty($this->request->data['filter']['date_join'])) {
                array_push($filterSubCondition, array('club_members.created' => $this->request->data['filter']['date_join']));
                $flag = true;
            }

            if (!empty($this->request->data['filter']['from']) && empty($this->request->data['filter']['to'])) {
                array_push($filterSubCondition, array('users.subscription_start_date' => $this->request->data['filter']['from']));
                $flag = true;
            }

            if (!empty($this->request->data['filter']['from']) && !empty($this->request->data['filter']['to'])) {
                array_push($filterSubCondition, array("AND" => array(array('users.subscription_start_date <= ' => $this->request->data['filter']['from']), array('users.subscription_end_date >= ' => $this->request->data['filter']['to']))));
                $flag = true;
            }
            // pr($this->request->data); exit;
            /***************filter condition****************/
            if (isset($this->request->data['search'])) {
                if ($this->request->data['search']['order'] == "username") {
                    $order = array();
                    $order = array('users.username  ASC');
                    //$order = "users." . $this->request->data['search']['order'];

                } else if ($this->request->data['search']['order'] == "firstname") {
                    $order = array();
                    $order = array('users.firstname  ASC');

                } else if ($this->request->data['search']['order'] == "lastname") {
                    $order = array();
                    $order = array('users.lastname  ASC');

                } else if (!empty($this->request->data['search']['name'])) {

                    array_push($filterSubCondition, array("OR" => array(array('users.username' => $this->request->data['search']['name']), array('users.firstname ' => $this->request->data['search']['name']), array('users.lastname' => $this->request->data['search']['name']))));
                    $flag = true;
                }
            }
            if ($flag)
                $fileter_condition = array("AND" => array($filterSubCondition));
            else
                $fileter_condition = $filterSubCondition;

        } else {
            $fileter_condition = array("AND" => array('club_members.club_id' => $_SESSION['Auth']['Club']['id'], 'club_membership_requests.status' => 'accepted'));
        }

        $club_members = $this->club_members->find(
            'all',
            array(
                "joins" =>
                    array(
                        array(
                            'table' => 'users',
                            'type' => 'INNER',
                            'conditions' => array('users.id=club_members.user_id')
                        ),
                        array(
                            'table' => 'roles',
                            'type' => 'INNER',
                            'conditions' => array('roles.id=users.role_id')
                        ),
                        array(
                            'table' => 'countries',
                            'type' => 'LEFT',
                            'conditions' => array('users.country_id=countries.id')
                        ),
                        array(
                            'table' => 'subscription_settings',
                            'type' => 'LEFT',
                            'conditions' => array('users.subscription_setting_id=subscription_settings.id')
                        ),
                        array(
                            'table' => 'states',
                            'type' => 'LEFT',
                            'conditions' => array('users.state_id=states.id')
                        ),
                        array(
                            'table' => 'club_membership_requests',
                            'type' => 'LEFT',
                            'conditions' => array('club_members.user_id=club_membership_requests.user_id')
                        ),
                        array(
                            'table' => 'club_member_accounts',
                            'type' => 'LEFT',
                            'conditions' => array('club_members.user_id=club_member_accounts.member_user_id')
                        ),
                        array(
                            'table' => 'club_purchase_accounts',
                            'type' => 'LEFT',
                            'conditions' => array('club_member_accounts.club_purches_id=club_purchase_accounts.id')
                        ),
                        array(
                            'table' => 'club_settings',
                            'type' => 'LEFT',
                            'conditions' => array('club_settings.id=club_purchase_accounts.club_setting_id')
                        ),
                    ),
                'fields' =>
                    array(
                        'users.id',
                        'users.image',
                        'users.username',
                        'users.firstname',
                        'users.lastname',
                        'users.subscription_start_date',
                        'users.subscription_end_date',
                        'roles.id',
                        'roles.name',
                        'countries.name',
                        'countries.currency_symbol',
                        'club_members.created',
                        'subscription_settings.subscription_name',
                        'club_membership_requests.request_from',
                        'states.name',
                        'club_member_accounts.status',
                        'club_purchase_accounts.accounts',
                        'club_settings.200_price',
                        'club_settings.300_price',
                        'club_settings.500_price',
                        'club_settings.1000_price',
                    ),
                'conditions' =>
                    $fileter_condition,
                "group" => array(
                    'club_members.user_id'
                ),
                "order" =>
                    $order
            )
        );


        $this->set(compact('club_members', 'club_currency_code'));
    }


    public function club_members()
    {

        $this->layout = 'club_clubtab';
        $this->loadModel('club_members');
        $this->loadModel('users');
        $this->loadModel('countries');
        $this->loadModel('roles');
        $this->loadModel('subscription_settings');
        $this->loadModel('club_membership_requests');
        $this->loadModel('states');
        $this->loadModel('user_payments');
        $fileter_condition = array();
        $filterSubCondition = array();
        $order = array('club_members.user_id  ASC');
        $club_country = $this->Auth->User('Country');
        $club_currency_code = $club_country['code'];
        $array = array(0 => "une", 1 => "r�");
        //setlocale(LC_COLLATE, 'fr_CA.utf8');
        //asort($array, SORT_LOCALE_STRING);
        //pr($array);exit;

        if ($this->request->is('post') || $this->request->is('pust')) {

            /***************filter condition*************/
            //$fileter_condition = array('club_members.club_id' => $_SESSION['Auth']['Club']['id']);

            array_push($filterSubCondition, array('club_members.club_id' => $_SESSION['Auth']['Club']['id'], array('club_membership_requests.status' => 'accepted')));
            //if filter condition false
            $flag = false;
            if (!empty($this->request->data['filter']['Username'])) {
                //Push subcondition in array
                array_push($filterSubCondition, array('users.username' => $this->request->data['filter']['Username']));
                $flag = true;
                //ENd

            }

            if (!empty($this->request->data['filter']['date_join'])) {
                array_push($filterSubCondition, array('club_members.created' => $this->request->data['filter']['date_join']));
                $flag = true;
            }

            if (!empty($this->request->data['filter']['from']) && empty($this->request->data['filter']['to'])) {
                array_push($filterSubCondition, array('users.subscription_start_date' => $this->request->data['filter']['from']));
                $flag = true;
            }

            if (!empty($this->request->data['filter']['from']) && !empty($this->request->data['filter']['to'])) {
                array_push($filterSubCondition, array("AND" => array(array('users.subscription_start_date <= ' => $this->request->data['filter']['from']), array('users.subscription_end_date >= ' => $this->request->data['filter']['to']))));
                $flag = true;
            }

            /***************filter condition****************/
            if (isset($this->request->data['search'])) {
                if ($this->request->data['search']['order'] == "username") {
                    $order = array();
                    $order = array('users.username  ASC');
                    //$order = "users." . $this->request->data['search']['order'];

                } else if ($this->request->data['search']['order'] == "firstname") {
                    $order = array();
                    $order = array('users.firstname  ASC');

                } else if ($this->request->data['search']['order'] == "lastname") {
                    $order = array();
                    $order = array('users.lastname  ASC');

                } else if (!empty($this->request->data['search']['name'])) {

                    array_push($filterSubCondition, array("OR" => array(array('users.username' => $this->request->data['search']['name']), array('users.firstname ' => $this->request->data['search']['name']), array('users.lastname' => $this->request->data['search']['name']))));
                    $flag = true;
                }
            }
            if ($flag)
                $fileter_condition = array("AND" => array($filterSubCondition));
            else
                $fileter_condition = $filterSubCondition;

        } else {

            $fileter_condition = array("AND" => array('club_members.club_id' => $_SESSION['Auth']['User']['Club'][0]['id'], 'club_membership_requests.status' => 'accepted'));
        }

        $club_members = $this->club_members->find(
            'all',
            array(
                "joins" =>
                    array(
                        array(
                            'table' => 'users',
                            'type' => 'INNER',
                            'conditions' => array('users.id=club_members.user_id')
                        ),
                        array(
                            'table' => 'roles',
                            'type' => 'INNER',
                            'conditions' => array('roles.id=users.role_id')
                        ),
                        array(
                            'table' => 'countries',
                            'type' => 'LEFT',
                            'conditions' => array('users.country_id=countries.id')
                        ),
                        array(
                            'table' => 'subscription_settings',
                            'type' => 'LEFT',
                            'conditions' => array('users.subscription_setting_id=subscription_settings.id')
                        ),
                        array(
                            'table' => 'states',
                            'type' => 'LEFT',
                            'conditions' => array('users.state_id=states.id')
                        ),
                        array(
                            'table' => 'club_membership_requests',
                            'type' => 'LEFT',
                            'conditions' => array('club_members.user_id=club_membership_requests.user_id')
                        ),
                        array(
                            'table' => 'club_member_accounts',
                            'type' => 'LEFT',
                            'conditions' => array('club_members.user_id=club_member_accounts.member_user_id')
                        ),
                        array(
                            'table' => 'club_purchase_accounts',
                            'type' => 'LEFT',
                            'conditions' => array('club_member_accounts.club_purches_id=club_purchase_accounts.id')
                        ),
                        array(
                            'table' => 'club_settings',
                            'type' => 'LEFT',
                            'conditions' => array('club_settings.id=club_purchase_accounts.club_setting_id')
                        )
                    ),
                'fields' =>
                    array(
                        'users.id',
                        'users.role_id',
                        'users.image',
                        'users.username',
                        'users.firstname',
                        'users.lastname',
                        'users.subscription_start_date',
                        'users.subscription_end_date',
                        'roles.id',
                        'roles.name',
                        'countries.name',
                        'countries.currency_symbol',
                        'club_members.created',
                        'subscription_settings.subscription_name',
                        'club_membership_requests.request_from',
                        'states.name',
                        'club_member_accounts.status',
                        'club_purchase_accounts.accounts',
                        'club_settings.200_price',
                        'club_settings.300_price',
                        'club_settings.500_price',
                        'club_settings.1000_price',
                    ),
                'conditions' =>
                    $fileter_condition,
                "group" => array(
                    'club_members.user_id'
                ),
                "order" =>
                    $order
            )
        );


        $this->set(compact('club_members', 'club_currency_code'));


    }


    public function clubmembe_print($paranValue = null)
    {

        $this->layout = '';
        $record_array = explode('#', $paranValue);
        $m = 0;
        foreach ($record_array as $value) {
            $urlIdArray1 = (urldecode($value));
            $dataToPrint12 = explode('&', $urlIdArray1);
            foreach ($dataToPrint12 as $key1 => $value1) {
                $dataToPrint12345 = explode('=', $value1);
                $prData[$m][$dataToPrint12345[0]] = $dataToPrint12345[1];
            }
            $m++;
        }
        $this->set(compact('prData'));

    }

    public function club_social_items()
    {

        if (!empty($_SESSION['layout']) && $_SESSION['layout'] == "club_page") {
            //pr($_SESSION['clubAuth']['User']['id']);exit;
            $id = $_SESSION['clubAuth']['User']['id'];
            $this->submenu($id);
            $this->layout = 'club_page';
        } else {
            $this->layout = 'club_clubtab';
        }

    }

    public function help_chk_pswd()
    {

        $this->layout = 'ajax';
        $this->autoRender = false;
        $this->loadmodel('language_values');
        $this->loadModel('helppasswords');
        // $languageDetl = $this->language_values->find('all', array('conditions' => array('id'=>$this->request->data['lngID']),'fields' => array('lang_name')));
        //colmnname=  ucfirst($languageDetl[0]['language_values']['lang_name']).'_pswd';
        //$DtaList = $this->helppasswords->find('count',array('conditions'=>array($colmnname => $this->request->data['pswdID'])));
        $dirhelppass = $this->helppasswords->find('count', array('fields' => 'normal_help_pass', 'conditions' => array('lang_id' => $this->request->data['lngID'], 'normal_help_pass' => $this->request->data['pswdID'])));
        echo $dirhelppass;
        exit;

    }

    /*------- html help page start----------*/

    public function html_help_chk_pswd()
    {

        $this->layout = 'ajax';
        $this->autoRender = false;
        $this->loadmodel('language_values');
        $this->loadModel('helppasswords');
        $dirhelppass = $this->helppasswords->find('count', array('fields' => 'normal_help_pass', 'conditions' => array('lang_id' => $this->request->data['lngID'], 'html_lang_pass' => $this->request->data['pswdID'])));
        // $this->Cookie->write('htmlPageEditor', '1');
        $new = $this->Session->write('htmlPageEditor', '1');
        print_r($dirhelppass);
        exit;

    }

    /*-------html help page end-------------*/

    public function delete_html_session_id()
    {
        $this->layout = 'ajax';
        $this->autoRender = false;

        $this->Session->delete('htmlPageEditor');
        exit;
    }

    public function help_save_pg()
    {

        $this->layout = 'ajax';
        $this->autoRender = false;
        $this->loadmodel('help_pages');
        $this->loadmodel('site_pages');

        if (!empty($this->request->data['action']) && $this->request->data['action'] == 'action_copy') {

            $datasave['name_assigned'] = $this->request->data['title_copy'];
            $postData = $this->request->data;

            $site_page = $this->site_pages->find(
                'first', array(
                'conditions' => array(
                    'site_pages.id' => $postData['sitepage_id'],
                )
            ));

            $insData['site_pages'] = array(
                'pagename' => $this->request->data['title_copy'],
                'path' => $site_page['site_pages']['path'],
                'section' => $site_page['site_pages']['section']
            );

            $this->site_pages->create();
            if ($this->site_pages->save($insData)) {

                $insertId = $this->site_pages->getInsertID();


                $insDataHelpPg['help_pages'] = array(
                    'user_id' => $this->Session->read('Auth.User.id'),
                    'sitepage_id' => $insertId,
                    'lang_id' => $this->request->data['lng_id'],
                    'display_mode' => $this->request->data['display_mode'],
                    'content' => $this->request->data['content'],
                    'name_assigned' => $this->request->data['titlelang'],
                );

                if ($this->help_pages->save($insDataHelpPg)) {

                    $help_editors = $this->help_pages->find(
                        'all', array(
                        'conditions' => array(
                            'help_pages.sitepage_id' => $postData['sitepage_id']
                        )
                    ));

                    foreach ($help_editors as $key => $content) {

                        $this->help_pages->id = $content['help_pages']['id'];
                        $htmlUpdateContents['help_html_pages'] = array(
                            'display_mode' => $this->request->data['display_mode']
                        );
                        $this->help_pages->save($htmlUpdateContents);
                    }

                }
                exit;
            }


        } else {


            $datasave['user_id'] = $this->Session->read('Auth.User.id');
            $datasave['display_mode'] = $this->request->data['display_mode'];
            $datasave['lang_id'] = $this->request->data['lng_id'];
            $datasave['sitepage_id'] = $this->request->data['sitepage_id'];
            $datasave['content'] = $this->request->data['content'];

            if (!empty($this->request->data['action']) && $this->request->data['action'] == 'action_rename') {
                $datasave['name_assigned'] = $this->request->data['title_rename'];
            }

            /******Check New Entry or Old*********/
            $data101 = $this->help_pages->find(
                'first', array(
                'conditions' => array(
                    'help_pages.sitepage_id' => $datasave['sitepage_id'],
                    'help_pages.lang_id' => $datasave['lang_id']
                )
            ));

            if (count($data101) > 0) {
                $this->help_pages->id = $data101['help_pages']['id'];
            } else {
                $this->help_pages->create();
            }

            /*************************************/
            if ($this->help_pages->save($datasave)) {


                $help_editors = $this->help_pages->find(
                    'all', array(
                    'conditions' => array(
                        'help_pages.sitepage_id' => $this->request->data['sitepage_id']
                    )
                ));

                foreach ($help_editors as $key => $content) {

                    $this->help_pages->id = $content['help_pages']['id'];
                    $htmlUpdateContents['help_pages'] = array(
                        'display_mode' => $this->request->data['display_mode']
                    );
                    $this->help_pages->save($htmlUpdateContents);
                }


                echo 'Successfully saved';
                exit;
            } else {
                echo 'Not saved please try again !';
                exit;
            }
        }
    }

    /**********save html page content**********/
    public function help_html_save_pg()
    {

        $this->layout = '';
        $this->autoRender = false;
        $this->loadModel('help_html_pages');
        $this->loadModel('language_values');
        if ($this->Session->read('Auth.User.username') != 'operator') {

            $generateUserId = $this->Session->read('Auth.User.id');
        } else {

            $get_operator_id = explode('_', $this->Session->read('Auth.User.id'));
            $generateUserId = isset($get_operator_id[1]) ? $get_operator_id[1] : '';
        }

        $languageDetl = $this->language_values->find(
            'list', array(
            'fields' => array('id', 'lang_name')
        ));

        $page_id = $this->request->data['id'];
        $lng_id = $this->request->data['lng_id'];
        $action = $this->request->data['action'];

        $unique_id = uniqid();

        if (!empty($page_id) && $page_id > 0) {


            if (!empty($action) && $action == 'save_rename') {

                $fetchRecord = $this->help_html_pages->find(
                    'first', array(
                    'conditions' => array(
                        'help_html_pages.id' => $page_id,
                    ),
                    'fields' => array(
                        'id'
                    )
                ));

                $sectionId = "";

                if (!empty($this->request->data['section_link'])) {

                    $buildFor = $this->request->data['build_for_id'];
                    $sectionId = $this->request->data['section_link'];

                }

                if (!empty($fetchRecord)) {

                    $this->help_html_pages->id = $fetchRecord['help_html_pages']['id'];

                    $renameHtmlTitme['help_html_pages'] = array(

                        'lang_id' => $lng_id,
                        'section_id' => $this->request->data['section_id'],
                        'build_for' => $this->request->data['build_for_id'],
                        'page_title' => $this->request->data['rename'],
                        'page_description' => $this->request->data['page_description'],
                        'content' => $this->request->data['content'],
                        'section_link' => $sectionId,
                        'user_id' => $generateUserId,
                    );


                    if ($this->help_html_pages->save($renameHtmlTitme)) {

                        echo 'Successfully updated';
                        exit;
                    }
                }

            } else if (!empty($action) && $action == 'save_copy') {

                $fetchRecord = $this->help_html_pages->find(
                    'first', array(
                    'conditions' => array(
                        'help_html_pages.id' => $page_id,
                    ),
                    'fields' => array(
                        'id'
                    )
                ));

                $sectionId = "";

                if (!empty($this->request->data['section_link'])) {

                    $buildFor = $this->request->data['build_for_id'];
                    $sectionId = $this->request->data['section_link'];

                }

                if (!empty($fetchRecord)) {


                    $copyHtmlTitme['help_html_pages'] = array(

                        'lang_id' => $lng_id,
                        'uniqueid' => $unique_id,
                        'section_id' => $this->request->data['section_id'],
                        'build_for' => $this->request->data['build_for_id'],
                        'page_title' => $this->request->data['copy'],
                        'page_description' => $this->request->data['page_description'],
                        'content' => $this->request->data['content'],
                        'section_link' => $sectionId,
                        'user_id' => $generateUserId,
                    );


                    if ($this->help_html_pages->save($copyHtmlTitme)) {

                        echo 'Successfully updated';
                        exit;
                    }
                }

            } else {


                $edit_unique_id = $this->request->data['unique_id'];
                $sectionId = "";

                if (!empty($this->request->data['section_link'])) {

                    $buildFor = $this->request->data['build_for_id'];
                    $sectionId = $this->request->data['section_link'];

                }


                $fetchRecord = $this->help_html_pages->find(
                    'first', array(
                    'conditions' => array(
                        'help_html_pages.lang_id' => $lng_id,
                        'help_html_pages.uniqueid' => $edit_unique_id,
                    ),
                    'fields' => array(
                        'id'
                    )
                ));


                if (!empty($fetchRecord)) {

                    $this->help_html_pages->id = $fetchRecord['help_html_pages']['id'];

                    $htmlUpdateContent['help_html_pages'] = array(

                        'lang_id' => $lng_id,
                        'uniqueid' => $edit_unique_id,
                        'section_id' => $this->request->data['section_id'],
                        'build_for' => $this->request->data['build_for_id'],
                        'page_description' => $this->request->data['page_description'],
                        'content' => $this->request->data['content'],
                        'section_link' => $sectionId,
                        'user_id' => $generateUserId,
                    );


                    if ($this->help_html_pages->save($htmlUpdateContent)) {

                        $htmlpageContent = $this->help_html_pages->find(
                            'all', array(
                            'conditions' => array(
                                'help_html_pages.uniqueid' => $edit_unique_id,
                                'NOT' => array(
                                    'help_html_pages.id' => $fetchRecord['help_html_pages']['id']
                                )
                            )
                        ));

                        if (!empty($htmlpageContent)) {

                            foreach ($htmlpageContent as $key => $content) {

                                $this->help_html_pages->id = $content['help_html_pages']['id'];
                                $htmlUpdateContents['help_html_pages'] = array(
                                    'uniqueid' => $edit_unique_id,
                                    'section_id' => $this->request->data['section_id'],
                                    'build_for' => $this->request->data['build_for_id'],
                                    'section_link' => $sectionId,
                                    'user_id' => $generateUserId,
                                );

                                $this->help_html_pages->save($htmlUpdateContents);
                            }
                        }

                        echo 'Successfully updated';
                        exit;
                    }
                }
            }


        } else {

            //**** This is a add new html page section ****\\

            $sectionId = "";
            $buildFor = $this->request->data['build_for_id'];

            if (!empty($this->request->data['section_link'])) {
                $sectionId = $this->request->data['section_link'];
            }

            $htmlContent['help_html_pages'] = array(
                'lang_id' => $lng_id,
                'uniqueid' => $unique_id,
                'section_id' => $this->request->data['section_id'],
                'build_for' => $buildFor,
                'page_title' => $this->request->data['page_title'],
                'page_description' => $this->request->data['page_description'],
                'content' => $this->request->data['content'],
                'section_link' => $sectionId,
                'user_id' => $generateUserId,
            );

            if ($this->help_html_pages->save($htmlContent)) {
                echo 'Successfully saved';
                exit;
            }

            echo 'Not saved please try again !';
            exit;
        }

    }

    public function html_page_ajax_data()
    {
        $this->layout = 'ajax';
        $this->loadModel('help_html_pages');
        $this->loadModel('language_values');
        $help_html_pages = array();

        if ($this->request->is('post')) {

            $postData = $this->request->data;

            if (!empty($postData['lang'])) {
                $help_html_pages = $this->help_html_pages->find(
                    'all', array(
                    'conditions' => array(
                        'help_html_pages.lang_id' => $postData['lang']
                    ),
                    'order' => array('help_html_pages.id DESC')
                ));
            }
        }

        $languageDetl = $this->language_values->find(
            'list', array(
            'fields' => array('id', 'lang_name')
        ));

        $this->set(compact('help_html_pages', 'languageDetl'));
    }

    /**********save html page content end**********/
    public function html_editor_delete_pg()
    {
        $this->layout = 'ajax';
        $this->autoRender = false;
        $this->loadmodel('help_html_pages');
        $lng_id = $this->request->data['lng_id'];
        $page_title = $this->request->data['sitepage_id'];
        $id = $this->help_html_pages->find('all', array('fields' => array('id'), 'conditions' => array('lang_id' => $lng_id, 'page_title' => $page_title)));
        $this->help_html_pages->id = $id[0]['help_html_pages']['id'];
        if ($this->help_html_pages->delete()) {
            echo "1";
            exit;
        } else {
            echo "0";
        }
    }

    /***********************************************/
    public function check_html_page_title()
    {

        $this->layout = 'ajax';
        $this->autoRender = false;
        $response = array();
        $this->loadmodel('help_html_pages');

        $title = $this->request->data['title'];
        $result1 = '';
        $section_link = $this->request->data['section_link'];

        if ($this->Session->read('Auth.User.username') != 'operator') {
            $lngid = $this->request->data['lngid'];
        } else {
            $lngid = $this->Session->read('Auth.User.work_lang_id');
        }

        $page_id = $this->request->data['page_id'];
        $result = $this->help_html_pages->find(
            'all', array(
            'conditions' => array(
                'AND' => array(
                    array(
                        'id !=' => $page_id
                    ),
                    array(
                        'page_title' => strtolower($title)
                    ),
                    array(
                        'lang_id' => $lngid
                    )
                )
            ),
            'fields' => array(
                'id'
            )
        ));

        if (!empty($section_link)) {
            $result1 = $this->help_html_pages->find(
                'all', array(
                'conditions' => array(
                    'AND' => array(
                        array(
                            'id !=' => $page_id
                        ),
                        array(
                            'section_link' => strtolower($section_link)
                        ),
                        array(
                            'lang_id' => $lngid
                        )
                    )
                ),
                'fields' => array(
                    'id'
                )
            ));
        }

        //print_r($this->getLastQuery('help_html_pages'));exit;
        if (!empty($result1)) {
            echo 2;
            exit;
        } else if (!empty($result1)) {

            echo 0;
            exit;

        } else {
            echo 1;
            exit;
        }
    }

    public function help_chk_pg()
    {

        $this->layout = 'ajax';
        $this->autoRender = false;
        $this->loadmodel('help_pages');
        $datasave['lang_id'] = $this->request->data['lng_id'];
        $datasave['sitepage_id'] = $this->request->data['sitepage_id'];
        /*         * **** Check New Entry or Old ******** */
        $data101 = $this->help_pages->find('all', array('conditions' => array('help_pages.sitepage_id' => $datasave['sitepage_id'], 'help_pages.lang_id' => $datasave['lang_id'])));
        //print_r($data101);exit;
        if (count($data101) > 0) {

            $response['content'] = $data101[0]['help_pages']['content'];
            $response['display_mode'] = $data101[0]['help_pages']['display_mode'];
            $response['status'] = '1';
        } else {
            $response['Dtavalue'] = '';
            $response['status'] = '0';
        }
        echo json_encode($response);
        exit;

        /************************************ */
    }

    public function help_delete_pg()
    {

        $this->layout = 'ajax';
        $this->autoRender = false;
        $this->loadmodel('help_pages');
        $datasave['lang_id'] = $this->request->data['lng_id'];
        $datasave['sitepage_id'] = $this->request->data['sitepage_id'];
        $data101 = $this->help_pages->find('all', array('conditions' => array('help_pages.sitepage_id' => $datasave['sitepage_id'], 'help_pages.lang_id' => $datasave['lang_id'])));
        if (count($data101) > 0) {

            $this->help_pages->id = $data101[0]['help_pages']['id'];
            if ($this->help_pages->delete()) {
                echo '1';
                exit;
            } else {
                echo '0';
                exit;
            }
        } else {
            echo '1';
            exit;
        }
    }

    public function helpnewpage()
    {

        $this->layout = 'club_clubtab';
        $varible = Cache::read('helpcontentdata');
        $this->set('contentData', $varible);
        Cache::delete('helpcontentdata');
    }

    public function help_setsession()
    {
        $this->layout = 'ajax';
        $this->autoRender = false;
        Cache::write('helpcontentdata', $this->request->data['content']);
    }

    public function help_importpage()
    {

        $this->layout = 'ajax';
        $this->autoRender = true;
        $ary = array();
        $lng_id = $this->request->data['lngID'];
        $this->loadmodel('help_pages');
        $data101 = $this->help_pages->find('list', array('conditions' => array('help_pages.lang_id' => $lng_id), 'fields' => array('id', 'sitepage_id')));
        $this->loadmodel('site_pages');
        $sitepgDetl = $this->site_pages->find('list', array('fields' => array('id', 'pagename')));
        foreach ($data101 as $key => $value) {
            $ary[$key] = $sitepgDetl[$value];
        }
        $this->set('ary', $ary);
    }

    public function help_import_pg()
    {

        $this->layout = 'ajax';
        $this->autoRender = false;
        $lng_id = $this->request->data['lang_id'];
        $page_id = $this->request->data['pg_id'];
        $this->loadmodel('help_pages');
        $data101 = $this->help_pages->find('first', array('conditions' => array('help_pages.sitepage_id' => $page_id, 'help_pages.lang_id' => $lng_id), 'fields' => array('id', 'content', 'display_mode')));
        //print_r($data101);exit;
        if (count($data101) > 0) {
            $responce['id'] = $data101['help_pages']['id'];
            $responce['content'] = $data101['help_pages']['content'];
            $responce['display_mode'] = $data101['help_pages']['display_mode'];
        } else {
            $responce['id'] = '';
            $responce['content'] = '';
            $responce['display_mode'] = '0';
        }
        echo json_encode($responce);
        exit;
    }

    public function help_import_frompg()
    {

        $this->layout = 'ajax';
        $this->autoRender = false;
        $lng_id = $this->request->data['lang_id'];
        $page_id = $this->request->data['pg_id'];

        $this->loadmodel('help_pages');
        $data101 = $this->help_pages->find(
            'first', array(
            'conditions' => array(
                'help_pages.sitepage_id' => $page_id,
                'help_pages.lang_id' => $lng_id
            ),
            'fields' => array(
                'id', 'content', 'display_mode'
            )
        ));

        if (count($data101) > 0) {
            $responce['content'] = $data101['help_pages']['content'];
        } else {
            $responce['content'] = '';
        }
        echo json_encode($responce);
        exit;
    }

    /*     * ********************* */

    public function html_help_import_pg()
    {

        $this->layout = 'ajax';
        $this->autoRender = false;
        $lng_id = $this->request->data['lang_id'];
        $page_id = $this->request->data['pg_id'];
        $this->loadmodel('help_html_pages');

        if ($this->Session->read('Auth.User.username') != 'operator') {

            $data101 = $this->help_html_pages->find(
                'all', array(
                'conditions' => array(
                    'id' => $page_id,
                    'lang_id' => $lng_id
                )
                , 'fields' => array(
                    'id',
                    'content',
                    'page_title',
                    'page_description',
                    'section_id',
                    'build_for',
                    'display_mode',
                    'section_link',
                    'uniqueid',
                    'enable_document'
                )
            ));

        } else {

            $data101 = $this->help_html_pages->find(
                'all', array(
                'conditions' => array(
                    'id' => $page_id,
                    'lang_id' => $this->Session->read('Auth.User.work_lang_id')
                ),
                'fields' => array(
                    'id',
                    'content',
                    'page_title',
                    'page_description',
                    'section_id',
                    'build_for',
                    'display_mode',
                    'section_link',
                    'uniqueid',
                    'enable_document'
                )
            ));
        }

        if (count($data101) > 0) {

            $htmlContent = $data101[0]['help_html_pages']['content'];

            $responce['section_id'] = $data101[0]['help_html_pages']['section_id'];
            $responce['id'] = $data101[0]['help_html_pages']['id'];
            $responce['content'] = $data101[0]['help_html_pages']['content'];
            $responce['html_content'] = $htmlContent;
            $responce['enable_documenta'] = $data101[0]['help_html_pages']['enable_document'];
            $responce['page_title'] = $data101[0]['help_html_pages']['page_title'];
            $responce['page_description'] = $data101[0]['help_html_pages']['page_description'];
            $responce['build_for_id'] = $data101[0]['help_html_pages']['build_for'];
            $responce['display_mode'] = $data101[0]['help_html_pages']['display_mode'];
            $responce['section_link'] = $data101[0]['help_html_pages']['section_link'];
            $responce['page_uniqueid'] = $data101[0]['help_html_pages']['uniqueid'];

        } else {

            $responce['id'] = '';
            $responce['content'] = '';
            $response['help_html_pages'] = '';
            $responce['page_description'] = '';
            $responce['enable_document'] = '';
            $responce['html_content'] = '';
            $response['section_id'] = '';
            $responce['build_for_id'] = '';
            $responce['display_mode'] = '';
            $responce['page_uniqueid'] = '';
        }
        echo json_encode($responce);
        exit;
    }

    /*     * ********************* */

    public function help_open_page()
    {
        $this->layout = 'ajax';
        $this->autoRender = false;
        $pg_nme = $this->request->data['pg_nme'];
        $this->loadmodel('site_pages');
        $sitepgDetl = $this->site_pages->find('all', array('conditions' => array('site_pages.pagename' => $pg_nme), 'fields' => array('id')));
        // echo $sitepgDetl[0]['site_pages']['id'];exit;
        $hid = $sitepgDetl[0]['site_pages']['id'];
        $this->loadmodel('help_pages');
        if (isset($_COOKIE['lg']) && $_COOKIE['lg'] != '') {
            $language = $_COOKIE['lg'];
        } else {
            $language = 'en';
        }
        $this->loadModel('language_values');
        $languageId1 = $this->language_values->find('all', array('conditions' => array('language_values.lang_name' => $language)));
        $languageId = $languageId1[0]['language_values']['id'];
        $data102 = $this->help_pages->find('all', array('conditions' => array('help_pages.sitepage_id' => $hid, 'help_pages.lang_id' => $languageId)));
        //print_r($data102[0]['help_pages']);exit;
        if (count($data102) > 0) {
            $response['status'] = '1';
            $response['display_mode'] = $data102[0]['help_pages']['display_mode'];
            $response['content'] = $data102[0]['help_pages']['content'];
        } else {
            $response['status'] = '0';
        }
        echo json_encode($response);
        exit;
    }

    public function editclubinfo()
    {
    
      /*echo "sdfsfsfsfd";

      echo  $this->Session->read('Auth.Club.id');
        echo "<pre>";
       print_r($this->Session->read('Auth.Club'));
       echo "</pre>";
               exit;*/
        $this->layout = 'club_clubtab';
        $this->loadmodel('usertypes');
        $this->loadmodel('User');
        $this->loadmodel('Club');
        $this->loadmodel('users_subscriptionsettings_types');
        $clubusertype = $this->usertypes->find('list', array('conditions' => array('usertypes.role_id' => 8)), array('fields' => array('id', 'title')));        

        $this->set('clubusertype', $clubusertype);
        // pr($clubusertype); exit;
        if ($this->request->is('post')) {


            unset($this->request->data['User']['email']);
            unset($this->request->data['User']['password']);
            unset($this->request->data['User']['alternate_pass']);

            $this->User->id = $this->request->data['User']['id'];

            //$this->getLastQuery('User');  exit;

            $this->Club->id = $this->request->data['Club']['cid'];
            //ZST ADD new fields Start 
            $this->Club->whatsapp = $this->request->data['Club']['whatsapp'];
            // $this->Club->whatsapp = $this->request->data['Club']['whatsapp'];
            // $this->Club->whatsapp = $this->request->data['Club']['whatsapp'];
            // $this->Club->whatsapp = $this->request->data['Club']['whatsapp'];

            // ZST Add new fields end


            $this->Club->save($this->request->data['Club']);
            $this->User->save($this->request->data['User']);
            $info1 = $this->User->find('all', array('conditions' => array('User.id' => $this->Session->read('Auth.User.id'))));
           
            echo "dsfsfsdf---<br>";
    $info2 = $this->Club->find('all', array('conditions' => array('Club.id' => $this->Session->read('Auth.Club.id'))));
    $info3 = $this->Club->find('all', array('conditions' => array('Club.id' => $this->Session->read('Auth.Club.id'))));
    // $info2 = $this->Club->all();
     //$info2 = $this->Club->query('select * from clubs where id=', $this->Session->read('Auth.User.id'));
     echo "<pre>";
    array_push($info2['0']['Club']['whatsapp']=$this->request->data['Club']['whatsapp']);
   // print_r($info2);
     echo "</pre>";

     echo $this->Session->read('Auth.Club.id');
     //echo "info2";
     echo $this->request->data['Club']['whatsapp'];
            echo "<pre>";
       // print_r($info2);
        echo "</pre>";
       //exit;

            $tryary = $this->Session->read('Auth.User');
            unset($tryary['Role']);
            unset($tryary['CurrentLoginDetail']);
            unset($tryary['dateDisplay']);
            unset($tryary['random_id']);
            unset($tryary['lastTimeLogin']);
            foreach ($tryary as $key => $value) {
                if (($info1[0]['User'][$key]) != $value || ($info1[0]['User'][$key]) != 'alternate_pass' || ($info1[0]['User'][$key]) != 'access_only_once') {
                    $this->Session->write('Auth.User.' . $key, $info1[0]['User'][$key]);
                }
            }
            $tryClubary = $this->Session->read('Auth.Club');
            $tryClubary['whatsapp']=$this->request->data['Club']['whatsapp'];
            echo "tryClubary";
            echo "<pre>";
            //print_r($tryClubary);
            print_r($this->Session->read('Auth.User'));

             //   print_r($this->request->data['Club']);
                echo "</pre>";

            //exit;

            //$tryClubary = $this->Session->read('Auth.Club');
            foreach ($tryClubary as $key1 => $value1) {
                if (($info2[0]['Club'][$key1]) != $value1) {
                    $this->Session->write('Auth.Club.' . $key1, $info2[0]['Club'][$key1]);
                }
            }
            echo "Stop Club view page";
            $this->Session->setFlash(__('Club admin profile updated successfully.'));
            //$this->redirect(array('action' => 'editclubinfo'));
        }
        $this->loadModel('UsersSubscriptionsettingsType');
        $info_coach_limit = $this->UsersSubscriptionsettingsType->getUsersSubscriptionsettingsType(array('conditions' => array('UsersSubscriptionsettingsType.user_id' => $this->Session->read('Auth.User.id')), 'fields' => array('coaches_limit'), 'limit' => '1', "order" => array('UsersSubscriptionsettingsType.id  DESC')));
        $this->set('coach_limit', !empty($info_coach_limit[0]['UsersSubscriptionsettingsType']['coaches_limit']) ? $info_coach_limit[0]['UsersSubscriptionsettingsType']['coaches_limit'] : "");
    }

    public function club_profile()
    {

        $this->layout = 'club_clubtab';
        $this->loadModel('Country');
        $countries = $this->Country->getCountryIdName();
        $this->set(compact('countries'));
        $this->loadModel('clubtypes');
        $clubtypes = $this->clubtypes->find('list', array('fields' => array('id', 'title')));
        $this->set(compact('clubtypes'));
        $this->loadModel('states');
        $states = $this->states->find('list', array('conditions' => array('country_id' => $this->Session->read('Auth.User.country_id'))));
        $this->set(compact('states'));
        $this->loadModel('sports');
        $sports = $this->sports->find('all');
        $this->set(compact('sports'));
        $this->request->data['selected_sport'] = explode(',', $this->Session->read('Auth.Club.sports'));
        $rster = unserialize($this->Session->read('Auth.Club.roster_option_settings'));
        $this->request->data['Rostersettings1'] = $rster;
        $publicprof1 = unserialize($this->Session->read('Auth.Club.public_profile_option_settings'));

        $this->request->data['public_profile_option_settings1'] = $publicprof1;
        $this->loadModel('club_subadmins');
        $this->loadModel('Club');
        $this->loadModel('User');
        /*********************************************************************/
        $coadminList1 = $this->club_subadmins->find('list', array('conditions' => array('admin_id' => $this->Session->read('Auth.User.id')), 'fields' => array('id', 'user_id')));
        $coadminarray = array();
        foreach ($coadminList1 as $key => $value) {

            $coadminList1 = $this->User->find('all', array('conditions' => array('user.id' => $value), 'fields' => array('id', 'username', 'firstname', 'lastname', 'email', 'image')));
            $coadminarray[$value] = $coadminList1[0]['User'];
        }

        $this->set(compact('coadminarray'));

        /**********************************************/
        if ($this->request->is('post')) {

            $keySrch1 = array_search($this->request->data['MainSport'], $this->request->data['chk12']); // $key = 2;
            if (!empty($keySrch1)) {
                unset($this->request->data['chk12'][$keySrch1]);
            }
            $this->request->data['Club']['sports'] = implode(',', $this->request->data['chk12']);
            $cd = $this->request->data['Publicsettings'];
            $this->request->data['Club']['roster_option_settings'] = serialize($this->request->data['Rostersettings']);
            $this->request->data['Club']['public_profile_option_settings'] = serialize($this->request->data['Publicsettings']);
            $this->request->data['User']['sport_id'] = $this->request->data['MainSport'];
            $this->User->id = $this->Session->read('Auth.User.id');
            $this->User->save($this->request->data['User']);
            $this->Club->id = $this->Session->read('Auth.Club.id');
            $this->Club->save($this->request->data['Club']);
            $info1 = $this->User->find('all', array('conditions' => array('User.id' => $this->Session->read('Auth.User.id'))));
            $info2 = $this->Club->find('all', array('conditions' => array('Club.id' => $this->Session->read('Auth.Club.id'))));
            $tryary = $this->Session->read('Auth.User');
            unset($tryary['Role']);
            unset($tryary['CurrentLoginDetail']);
            unset($tryary['dateDisplay']);
            unset($tryary['random_id']);
            unset($tryary['lastTimeLogin']);
            unset($tryary['image']);
            $this->Session->write('Auth.Club.roster_option_settings', $this->request->data['Club']['roster_option_settings']);
            $this->Session->write('Auth.Club.public_profile_option_settings', $this->request->data['Club']['public_profile_option_settings']);
            foreach ($tryary as $key => $value) {
                if (isset($info1[0]['User'][$key])) {
                    if (($info1[0]['User'][$key]) != $value) {
                        $this->Session->write('Auth.User.' . $key, $info1[0]['User'][$key]);
                    }
                }
            }
            $tryClubary = $this->Session->read('Auth.Club');
            foreach ($tryClubary as $key1 => $value1) {
                if (($info2[0]['Club'][$key1]) != $value1) {
                    $this->Session->write('Auth.Club.' . $key1, $info2[0]['Club'][$key1]);
                }
            }
            
            $rster = unserialize($this->Session->read('Auth.Club.roster_option_settings'));
            $this->request->data['Rostersettings1'] = $rster;
            $publicprof1 = unserialize($this->Session->read('Auth.Club.public_profile_option_settings'));
            $this->request->data['public_profile_option_settings1'] = $publicprof1;
        }

    }

    public function direct_access()
    {

        $this->layout = 'club_clubtab';
        $user_record = $this->User->findById($this->Auth->User('id'));
        $alternate_club_pass = $user_record['User']['alternate_club_pass'];
        $this->set(compact('alternate_club_pass', 'user_record'));
    }

    public function set_password()
    {

        $this->layout = 'club_clubtab';
        $user_record = $this->User->findById($this->Auth->User('id'));
        $alternate_club_pass = $user_record['User']['alternate_club_pass'];
        $this->set(compact('alternate_club_pass'));

    }

    /* set password code end here */
    /* set password for alternet */
    public function club_reset_passwrod()
    {

        $this->layout = 'ajax';
        $this->autoRender = false;
        $this->loadmodel('users');
        $user_id = $_SESSION['Auth']['User']['id'];
        $Mypassword = $this->request->data['Mypassword'];
        $password = Security::hash($Mypassword, null, true);
        $check_record = $this->users->find('count', array("conditions" => array('id' => $user_id, 'password' => $password)));
        if ($check_record == 1) {

            $result = $this->users->find('all', array('fields' => array('id', 'email', 'firstname', 'username'), "conditions" => array('id' => $user_id)));
            if (!empty($result)) {

                $to = $result[0]['users']['email'];
                $this->User->id = $result[0]['users']['id'];
                $data_stored['rand_password'] = $this->request->data['password'];
                $data_stored['user_name'] = $result[0]['users']['username'];
                $data_stored['firstname'] = $result[0]['users']['firstname'];
                if ($this->User->save($this->request->data)) {
                    $Email = new CakeEmail('default');
                    $Email->config('default');
                    $Email->from(array('swapnilb@datalogysoftware.com' => 'MovesBook'))
                        ->to($to)
                        ->subject('Change password')
                        ->emailFormat('html')
                        ->template('change_password_info')
                        ->viewVars(array('ms' => $data_stored));
                    $Email->send();
                    echo "1";
                    exit;
                }

            } else {
                echo "0";
                exit;
            }
        } else {
            echo "2";
            exit;
        }
    }

    function club_reset_passwrodalt()
    {

        $this->layout = 'ajax';
        $this->autoRender = false;
        $this->loadmodel('users');
        $user_id = $_SESSION['Auth']['User']['id'];
        $Mypassword = $this->request->data['Mypassword'];
        $password = Security::hash($Mypassword, null, true);

        $check_record = $this->users->find('count', array("conditions" => array('id' => $user_id, 'password' => $password)));

        if ($check_record == 1) {


            $result = $this->users->find('all', array('fields' => array('id', 'email', 'username', 'firstname'), "conditions" => array('id' => $user_id)));

            if (!empty($result)) {
                $to = $result[0]['users']['email'];
                $this->User->id = $result[0]['users']['id'];

                $data_stored['rand_password'] = $this->request->data['alternate_pass'];
                $data_stored['user_name'] = $result[0]['users']['username'];
                $data_stored['firstname'] = $result[0]['users']['firstname'];
                if ($this->User->save($this->request->data)) {
                    $Email = new CakeEmail('default');
                    $Email->config('default');
                    $Email->from(array('swapnilb@datalogysoftware.com' => 'MovesBook'))
                        ->to($to)
                        ->subject('Change password')
                        ->emailFormat('html')
                        ->template('change_altpassword_info')
                        ->viewVars(array('ms' => $data_stored));
                    $Email->send();
                    echo "1";
                    exit;
                }
            } else {
                echo "0";
                exit;
            }

        } else {
            echo "2";
            exit;
        }
    }

    /* end set password for alternet */


    public function club_reset_email()
    {

        $this->layout = 'ajax';
        $this->autoRender = false;
        $this->loadmodel('users');

        $user_id = $_SESSION['Auth']['User']['id'];
        $Mypassword = $this->request->data['Mypassword'];
        $password = Security::hash($Mypassword, null, true);

        $check_record = $this->users->find('count', array("conditions" => array('id' => $user_id, 'password' => $password)));

        if ($check_record == 1) {

            $result = $this->users->find('all', array('fields' => array('id', 'email', 'firstname', 'username'), "conditions" => array('id' => $user_id)));

            if (!empty($result)) {

                $commonMethods = new CommonfunctionComponent();
                $to = $result[0]['users']['email'];

                $this->User->id = $result[0]['users']['id'];

                $data_stored['email'] = $this->request->data['email'];
                $data_stored['user_name'] = $result[0]['users']['username'];
                $data_stored['firstname'] = $result[0]['users']['firstname'];
                if ($this->User->save($this->request->data)) {

                    $Email = new CakeEmail('smtp');
                    $Email->config('smtp');
                    $Email->from(array($commonMethods->authorEmail() => 'MovesBook'))
                        ->to($to)
                        ->subject('Change Email')
                        ->emailFormat('html')
                        ->template('change_email_info')
                        ->viewVars(array('ms' => $data_stored));
                    $Email->send();
                    echo "1";
                    exit;
                }
            } else {
                echo "0";
                exit;
            }
        } else {
            echo "2";
            exit;
        }
    }


    /* reset password */

    public function forgot_password($action = null)
    {

        $rand_password = rand("9999", "1234");
        $this->layout = 'ajax';
        $this->autoRender = false;
        $this->loadmodel('users');

        $user_id = $_SESSION['Auth']['User']['id'];
        $result = $this->users->find(
            'all', array(
            'fields' => array(
                'id',
                'email',
                'username',
                'firstname'
            ),
            "conditions" => array(
                'id' => $user_id,
                'verification_status' => 'T'
            )
        ));

        $commonMethods = new CommonfunctionComponent();

        if (!empty($result)) {

            //Apoorv 21-oct 2016 for reset the alternate_club_password
            if (!empty($action)) {
                $this->request->data['alternate_club_pass'] = $rand_password;
            } else {
                $this->request->data['password'] = $rand_password;
            }

            $data_stored = array();
            $data_stored['rand_password'] = $rand_password;
            $data_stored['user_name'] = $result[0]['users']['username'];
            $data_stored['firstname'] = $result[0]['users']['firstname'];

            $this->User->id = $result[0]['users']['id'];

            if ($this->User->save($this->request->data)) {
                //============Email================//
                /* SMTP Options */
                $to = $result[0]['users']['email'];
                $Email = new CakeEmail('smtp');
                $Email->from(array($commonMethods->authorEmail() => 'MovesBook'))
                    ->to($to)
                    ->subject('Forgot password')
                    ->emailFormat('html')
                    ->template('resetpw')
                    ->viewVars(array('ms' => $data_stored));
                if ($Email->send()) {
                    echo "1";
                    exit;
                } else {
                    echo "0";
                    exit;
                }
                //============EndEmail=============//
            }
        } else {
            echo "0";
            exit;
        }
    }

    /* reset password */

    public function removephoto()
    {

        $this->layout = '';
        $this->autoRender = false;
        $this->loadmodel('Club');
        $userIDVAl = $this->Club->findByUserId($_SESSION['Auth']['User']['id']);
        $this->User->id = $_SESSION['Auth']['User']['id'];
        $this->request->data['User']['image'] = 'no_image.jpg';
        $this->User->save($this->request->data['User']);
        $this->Session->write('Auth.User.image', 'no_image.jpg');
        $this->redirect(array('action' => 'editclubinfo'));
    }

    public function club_subadmin_add()
    {

        $backurl = $this->referer();
        $this->layout = 'club_clubtab';

        /********if image is blank****** */
        $countries = $this->countries->find(
            'list', array(
            'fields' => array(
                'id',
                'name'
            )
        ));

        $this->set(compact('countries'));
        if ($this->request->is('post')) {

            $this->request->data['User']['username'] = $this->request->data['User']['username1'];
            $this->request->data['User']['password'] = $this->request->data['User']['password1'];
            $this->request->data['User']['retype_pass'] = $this->request->data['User']['retype_pass1'];
            $this->request->data['User']['image'] = '';

            if (empty($this->request->data['User']['image'])) {
                $this->request->data['User']['image'] = "no_image_found.jpg";
            } else {
                $file_name = $this->upload_image($this->request->data['User']['image'], "profile_images");
                $this->request->data['User']['image'] = $file_name;
            }

            $this->unbindUser();
            $usercnt = $this->User->find(
                'count', array(
                'conditions' => array(
                    array(
                        'or' => array(
                            array(
                                'username' => $this->request->data['User']['username']
                            ),
                            array(
                                'email' => $this->request->data['User']['email']
                            )
                        )
                    ),
                )
            ));

            if ($usercnt == 0) {

                $this->loadmodel('club_subadmins');
                $this->loadmodel('ClubPasswordMangment');
                $this->loadmodel('User');

                $this->User->create();
                $a = $this->User->save($this->request->data['User']);

                $this->request->data['club_subadmins']['user_id'] = $this->User->getLastInsertId();
                $this->request->data['ClubPasswordMangment']['user_id'] = $this->User->getLastInsertId();

                $this->club_subadmins->create();

                $b = $this->club_subadmins->save($this->request->data['club_subadmins']);

                $this->ClubPasswordMangment->create();

                $this->ClubPasswordMangment->save($this->request->data["ClubPasswordMangment"]);

                $this->Session->setFlash(__('Co-admin added successfully.'));
                return $this->redirect(array('action' => 'club_profile'));

            } else {

                $this->unbindUser();
                $usercnt2 = $this->User->find(
                    'count', array(
                    'conditions' => array(
                        'username' => $this->request->data['User']['username']
                    )
                ));

                $usercntans = $usercnt - $usercnt2;

                if ($usercnt2 > 0) {

                    if ($usercnt == $usercnt2) {
                        //only username is exist
                        $this->Session->setFlash(__('Username already exists, Please try again.'));
                    } else {
                        //both username and email
                        $this->Session->setFlash(__('Username or Email already exists, Please try again.'));
                    }

                } else {

                    //email is uniq
                    if ($usercntans > 0) {
                        //only email is exist
                        $this->Session->setFlash(__('Email already exists, Please try again.'));
                    }

                }
            }
        }
    }

    public function club_co_admin_delete($cid)
    {

        $this->unbindUser();
        $this->layout = 'club_clubtab';
        $this->loadmodel('User');
        $this->loadmodel('club_subadmins');
        $clopinfo = $this->club_subadmins->find('all', array('conditions' => array('club_subadmins.id' => $cid)));
        $this->club_subadmins->id = $cid;
        $this->club_subadmins->delete();
        $this->User->id = $clopinfo[0]['club_subadmins']['user_id'];
        $this->User->delete();
        return $this->redirect($_SERVER["HTTP_REFERER"]);
    }

    public function club_subadmin_edit($id)
    {

        $this->layout = 'club_clubtab';
        $this->loadmodel('User');
        $this->loadmodel('club_subadmins');
        $countries = $this->countries->find('list', array('fields' => array('id', 'name')));
        $this->set(compact('countries'));
        //if($this->request->is('post')){
        if ($this->request->is(array('post', 'put'))) {

            $this->unbindUser();
            $usercnt = $this->User->find(
                'count', array(
                'conditions' => array(
                    'user.id !=' => $this->request->data['club_subadmins']['user_id'],
                    array(
                        'or' => array(
                            array('username' => $this->request->data['User']['username']),
                            array('email' => $this->request->data['User']['email'])
                        )
                    ),
                )));

            if ($usercnt == 0) {

                $this->User->id = $this->request->data['club_subadmins']['user_id'];
                $a = $this->User->save($this->request->data['User']);
                $this->club_subadmins->id = $this->request->data['club_subadmins']['id'];
                $b = $this->club_subadmins->save($this->request->data['club_subadmins']);
                $this->Session->setFlash(__('Co-admin save successfully.'));
                $this->redirect(array('action' => 'club_profile'));
            } else {

                $this->unbindUser();
                $usercnt2 = $this->User->find('count', array('conditions' => array('user.id !=' => $this->request->data['club_subadmins']['user_id'], 'username' => $this->request->data['User']['username'])));
                $usercntans = $usercnt - $usercnt2;
                //print_r($usercnt2);exit;
                if ($usercnt2 > 0) {

                    if ($usercnt == $usercnt2) {
                        //only username is exist
                        $this->Session->setFlash(__('Username already exists, Please try again.'));
                    } else {
                        //both username and email
                        $this->Session->setFlash(__('Username or Email already exists, Please try again.'));
                    }
                } else {
                    //email is uniq
                    if ($usercntans > 0) {
                        //only email is exist
                        $this->Session->setFlash(__('Email already exists, Please try again.'));
                    }
                }
            }
        } else {
            $this->unbindUser();
            $Udata = $this->User->find('all', array('conditions' => array('user.id' => $id, 'role_id' => '11')));
            $this->request->data['User'] = $Udata[0]['User'];
            $Cdata = $this->club_subadmins->find('all', array('conditions' => array('user_id' => $id)));
            $this->request->data['club_subadmins'] = $Cdata[0]['club_subadmins'];
        }
    }

    public function club_subadmin_delete($id = null)
    {
        $this->layout = 'ajax';
        $this->render = false;
        // print_r($id);exit;
        $this->loadmodel('User');
        $this->loadmodel('club_subadmins');
        $Udata = $this->club_subadmins->find('all', array('conditions' => array('user_id' => $id), 'fields' => array('id')));
        $Cid = $Udata[0]['club_subadmins']['id'];
        $this->club_subadmins->id = $Cid;
        if ($this->club_subadmins->delete()) {
            $this->User->id = $id;
            if ($this->User->delete()) {
                echo '1';
                exit;
            } else {
                echo '0';
                exit;
            }
        } else {
            echo '0';
            exit;
        }
    }

    public function club_operator_add()
    {

        //pr($this->Session); exit;
        $this->layout = 'club_clubtab';
        $this->loadmodel('User');
        $this->loadmodel('club_operators');
        $this->loadmodel('ClubPasswordMangment');
        if ($this->request->is('post')) {

            if (empty($this->request->data['User']['image']['name'])) {
                $this->request->data['User']['image'] = "no_image_found.jpg";
            } else {
                $file_name = $this->upload_image($this->request->data['User']['image'], "profile_images");
                $this->request->data['User']['image'] = $file_name;
            }
            $this->unbindUser();
            $username = $this->User->find('count', array('conditions' => array('username' => $this->request->data['User']['username'])));
            $this->unbindUser();
            $emailVal = $this->User->find('count', array('conditions' => array('email' => $this->request->data['User']['email'])));

            if (($username == 0) && ($emailVal == 0)) {

                $this->request->data['User']['role_id'] = '12';
                if ($this->User->Save($this->request->data['User'])) {

                    $this->request->data['club_operators']['user_id'] = $this->User->getLastInsertId();
                    $this->request->data['ClubPasswordMangment']['user_id'] = $this->User->getLastInsertId();
                    $this->request->data['club_operators']['clubadmin_id'] = $this->Session->read('Auth.User.id');
                    $this->club_operators->Save($this->request->data['club_operators']);
                    $this->ClubPasswordMangment->create();
                    $this->ClubPasswordMangment->save($this->request->data["ClubPasswordMangment"]);

                }
                $this->Session->setFlash(__('Operator of club added successfully.'));
                $this->redirect(array('action' => 'club_operator_add'));
            } else {
                $this->Session->setFlash(__('Username or Email already exists, Please try again.'));
                //pr($this->Session->read('Auth.User'));exit;
                //$this->redirect(array('action'=>'club_operator_add','Y'));
            }
        }
    }

    public function club_operator_edit_old_page($cid)
    {

        $this->layout = 'club_clubtab';
        $this->loadmodel('User');
        $this->loadmodel('club_operators');
        $this->loadmodel('ClubPasswordMangment');
        $this->unbindUser();
        /*call function if image upload start*/
        if (empty($this->request->data['User']['image']['name'])) {
            unset($this->request->data['User']['image']);
        } else {
            $file_name = $this->upload_image($this->request->data['User']['image'], "profile_images"); // pass image path to upload file function define in app controller
            $this->request->data['User']['image'] = $file_name;
        }
        /*call function if image upload start */
        $clopinfo = $this->club_operators->find('all', array('conditions' => array('club_operators.id' => $cid)));

        $clopuserinfo = $this->User->find('all', array('conditions' => array('User.id' => $clopinfo[0]['club_operators']['user_id'])));
        $this->set('clopinfo', $clopinfo[0]);
        $this->set('clopuserinfo', $clopuserinfo[0]);
        $resultPassword = $this->ClubPasswordMangment->getRecordInClubPassmangments_for_co_admin($clopinfo[0]['club_operators']['user_id']);
        $password = !empty($resultPassword[0]["ClubPasswordMangment"]["club_manage_password"]) ? $resultPassword[0]["ClubPasswordMangment"]["club_manage_password"] : "";
        $request_of_password = !empty($resultPassword[0]["ClubPasswordMangment"]["request_of_password"]) ? $resultPassword[0]["ClubPasswordMangment"]["request_of_password"] : "";
        $this->set(compact('password', 'request_of_password'));

        if ($this->request->is('post')) {

            $username = $this->User->find('count', array('conditions' => array('User.username' => $this->request->data['User']['username'], 'User.id !=' => $this->request->data['User']['id'])));
            $emailVal = $this->User->find('count', array('conditions' => array('User.email' => $this->request->data['User']['email'], 'User.id !=' => $this->request->data['User']['id'])));
            if ($username == 0 && $emailVal == 0) {
                $this->User->id = $this->request->data['User']['id'];
                $this->User->save($this->request->data['User']);
                $this->club_operators->id = $this->request->data['club_operators']['id'];
                $this->request->data['club_operators']["user_id"] = $this->request->data['User']['id'];
                $this->club_operators->save($this->request->data['club_operators']);

                $ClubPasswordMangmentId = $this->ClubPasswordMangment->find('all', array('fields' => array('id'), 'conditions' => array('ClubPasswordMangment.user_id' => $this->request->data['User']['id'])));

                if (empty($this->request->data["ClubPasswordMangment"]["password"])) {
                    unset($this->request->data["ClubPasswordMangment"]["password"]);
                }
                $this->ClubPasswordMangment->id = $ClubPasswordMangmentId[0]["ClubPasswordMangment"]["id"];
                $this->ClubPasswordMangment->save($this->request->data["ClubPasswordMangment"]);
                $this->Session->setFlash('Operator of club updated successfully.');
                //$this->redirect(array('action' => 'club_co_admin', $this->request->data['club_operators']['id']));
                $this->redirect(array('action' => 'club_operator_edit', $this->request->data['club_operators']['id']));

            } else {

                $this->Session->setFlash(__('Username or Email already exists, Please try again.'));
            }
        } else {
            // $this->redirect(array('action' => 'club_co_admin', $cid));
        }
    }

    /***********************swap**********************************/

    public function club_operator_edit($cid)
    {

        $this->layout = 'club_clubtab';
        $this->loadmodel('User');
        $this->loadmodel('club_operators');
        $this->loadmodel('ClubPasswordMangment');
        $this->loadmodel('club_operator_assign_access_levels');
        $this->unbindUser();
        /* call function if image upload start */
        if (empty($this->request->data['User']['image']['name'])) {
            unset($this->request->data['User']['image']);
        } else {
            $file_name = $this->upload_image($this->request->data['User']['image'], "profile_images"); // pass image path to upload file function define in app controller
            $this->request->data['User']['image'] = $file_name;
        }
        /*call function if image upload start*/
        //$clopinfo = $this->club_operators->find('all', array('conditions' => array('club_operators.id' => $cid)));
        $clopinfo1 = $this->club_operator_assign_access_levels->find('all', array('conditions' => array('club_operator_assign_access_levels.id' => $cid)));
        $clopuserinfo = $this->User->find('all', array('conditions' => array('User.id' => $clopinfo1[0]['club_operator_assign_access_levels']['operator_id'])));
        $this->set('clopuserinfo', $clopuserinfo[0]);
        $clopinfo = $this->club_operators->find('all', array('conditions' => array('club_operators.user_id' => $clopinfo1[0]['club_operator_assign_access_levels']['operator_id'])));
        $this->set('clopinfo', $clopinfo[0]);
        $resultPassword = $this->ClubPasswordMangment->getRecordInClubPassmangments_for_co_admin($clopinfo1[0]['club_operator_assign_access_levels']['operator_id']);
        //pr($resultPassword);exit;
        $password = !empty($resultPassword[0]["ClubPasswordMangment"]["club_manage_password"]) ? $resultPassword[0]["ClubPasswordMangment"]["club_manage_password"] : "";
        $request_of_password = !empty($resultPassword[0]["ClubPasswordMangment"]["request_of_password"]) ? $resultPassword[0]["ClubPasswordMangment"]["request_of_password"] : "";
        $this->set(compact('password', 'request_of_password'));

        if ($this->request->is('post')) {

            $username = $this->User->find('count', array('conditions' => array('User.username' => $this->request->data['User']['username'], 'User.id !=' => $this->request->data['User']['id'])));
            $emailVal = $this->User->find('count', array('conditions' => array('User.email' => $this->request->data['User']['email'], 'User.id !=' => $this->request->data['User']['id'])));
            if ($username == 0 && $emailVal == 0) {

                $this->User->id = $this->request->data['User']['id'];
                $this->User->save($this->request->data['User']);
                $this->club_operators->id = $this->request->data['club_operators']['id'];
                $this->request->data['club_operators']["user_id"] = $this->request->data['User']['id'];


                $this->club_operators->save($this->request->data['club_operators']);
                $ClubPasswordMangmentId = $this->ClubPasswordMangment->find('all', array('fields' => array('id'), 'conditions' => array('ClubPasswordMangment.user_id' => $this->request->data['User']['id'])));
                // print_r("fghfg");exit;
                if (empty($this->request->data["ClubPasswordMangment"]["password"])) {
                    unset($this->request->data["ClubPasswordMangment"]["password"]);
                }
                $this->ClubPasswordMangment->id = $ClubPasswordMangmentId[0]["ClubPasswordMangment"]["id"];
                $this->ClubPasswordMangment->save($this->request->data["ClubPasswordMangment"]);
                $this->Session->setFlash('Operator of club updated successfully.');
                //$this->redirect(array('action' => 'club_co_admin', $this->request->data['club_operators']['id']));
                $this->redirect(array('action' => 'club_operator_edit', $this->request->data['club_operators']['id']));

            } else {

                $this->Session->setFlash(__('Username or Email already exists, Please try again.'));
            }
        } else {
            // $this->redirect(array('action' => 'club_co_admin', $cid));
        }

    }


    /***********************END***********************************/

    public function club_co_admin_old($cid)
    {

        $this->unbindUser();
        $this->layout = 'club_clubtab';
        $this->loadmodel('User');
        $this->loadmodel('club_operators');
        $this->loadModel("ClubSubadmin");
        $this->loadModel("ClubPasswordMangment");
        $clopinfo = $this->ClubSubadmin->getClubSubadmin(array('conditions' => array('ClubSubadmin.id' => $cid)));
        $cid_user = $clopinfo[0]['ClubSubadmin']['user_id'];
        $resultPassword = $this->ClubPasswordMangment->getRecordInClubPassmangments_for_co_admin($cid_user);
        $password = !empty($resultPassword[0]["ClubPasswordMangment"]["club_manage_password"]) ? $resultPassword[0]["ClubPasswordMangment"]["club_manage_password"] : "";
        $request_of_password = !empty($resultPassword[0]["ClubPasswordMangment"]["request_of_password"]) ? $resultPassword[0]["ClubPasswordMangment"]["request_of_password"] : "";
        $clopuserinfo = $this->User->getUserRecordByCondtions(array('conditions' => array('User.id' => $cid_user)));
        $this->set('clopinfo', $clopinfo[0]);
        $this->set('clopuserinfo', $clopuserinfo[0]);
        $this->set(compact('password', 'request_of_password'));
        if ($this->request->is('post')) {

            $username = $this->User->find('count', array('conditions' => array('User.username' => $this->request->data['User']['username'], 'User.id !=' => $this->request->data['User']['id'])));
            $emailVal = $this->User->find('count', array('conditions' => array('User.email' => $this->request->data['User']['email'], 'User.id !=' => $this->request->data['User']['id'])));
            if ($username == 0 && $emailVal == 0) {

                $this->User->id = $this->request->data['User']['id'];
                if (empty($this->request->data['User']['image']['name'])) {
                    unset($this->request->data['User']['image']);
                } else {
                    $file_name = $this->upload_image($this->request->data['User']['image'], "profile_images");
                    $this->request->data['User']['image'] = $file_name;
                }
                $this->User->save($this->request->data['User']);
                $this->club_operators->id = $this->request->data['club_operators']['id'];
                $this->club_operators->save($this->request->data['club_operators']);

                $this->ClubSubadmin->id = $clopinfo[0]["ClubSubadmin"]["id"];
                $this->ClubSubadmin->save($this->request->data);
                if (empty($this->request->data["ClubPasswordMangment"]["club_manage_password"])) {
                    unset($this->request->data["ClubPasswordMangment"]["club_manage_password"]);
                }

                $ClubPasswordMangmentId = $this->ClubPasswordMangment->find('all', array('fields' => array('id'), 'conditions' => array('ClubPasswordMangment.user_id' => $cid_user)));
                $this->ClubPasswordMangment->id = $ClubPasswordMangmentId[0]["ClubPasswordMangment"]["id"];
                $this->ClubPasswordMangment->save($this->request->data["ClubPasswordMangment"]);
                $this->Session->setFlash('Operator of club updated successfully.');
                $this->redirect(array('action' => 'club_co_admin', $cid));
            } else {

                $this->Session->setFlash(__('Username or Email already exists, Please try again.'));
            }
        }
    }

    public function club_co_admin($cid)
    {

        $this->unbindUser();
        $this->layout = 'club_clubtab';
        $this->loadmodel('User');
        $this->loadmodel('club_operators');
        $this->loadModel("ClubSubadmin");
        $this->loadModel("ClubPasswordMangment");
        $clopinfo = $this->ClubSubadmin->getClubSubadmin(array('conditions' => array('ClubSubadmin.id' => $cid)));
        //$clopinfo=$this->club_subadmins->find('all',array('conditions'=>array('club_subadmins.id'=>$cid)));
        $cid_user = $clopinfo[0]['ClubSubadmin']['user_id'];
        //pr($this->getLastQuery('club_subadmins'));exit;
        $resultPassword = $this->ClubPasswordMangment->getRecordInClubPassmangments_for_co_admin($cid_user);
        $password = !empty($resultPassword[0]["ClubPasswordMangment"]["club_manage_password"]) ? $resultPassword[0]["ClubPasswordMangment"]["club_manage_password"] : "";
        $request_of_password = !empty($resultPassword[0]["ClubPasswordMangment"]["request_of_password"]) ? $resultPassword[0]["ClubPasswordMangment"]["request_of_password"] : "";
        $clopuserinfo = $this->User->getUserRecordByCondtions(array('conditions' => array('User.id' => $cid_user)));
        $this->set('clopinfo', $clopinfo[0]);
        $this->set('clopuserinfo', $clopuserinfo[0]);
        $this->set(compact('password', 'request_of_password'));

        if ($this->request->is('post')) {

            $username = $this->User->find('count', array('conditions' => array('User.username' => $this->request->data['User']['username'], 'User.id !=' => $this->request->data['User']['id'])));
            $emailVal = $this->User->find('count', array('conditions' => array('User.email' => $this->request->data['User']['email'], 'User.id !=' => $this->request->data['User']['id'])));
            if ($username == 0 && $emailVal == 0) {

                $this->User->id = $this->request->data['User']['id'];
                if (empty($this->request->data['User']['image']['name'])) {
                    unset($this->request->data['User']['image']);
                } else {
                    $file_name = $this->upload_image($this->request->data['User']['image'], "profile_images");
                    $this->request->data['User']['image'] = $file_name;
                }
                $this->User->save($this->request->data['User']);
                $this->club_operators->id = $this->request->data['club_operators']['id'];
                $this->club_operators->save($this->request->data['club_operators']);

                $this->ClubSubadmin->id = $clopinfo[0]["ClubSubadmin"]["id"];
                $this->ClubSubadmin->save($this->request->data);
                if (empty($this->request->data["ClubPasswordMangment"]["club_manage_password"])) {
                    unset($this->request->data["ClubPasswordMangment"]["club_manage_password"]);
                }

                $ClubPasswordMangmentId = $this->ClubPasswordMangment->find('all', array('fields' => array('id'), 'conditions' => array('ClubPasswordMangment.user_id' => $cid_user)));
                $this->ClubPasswordMangment->id = $ClubPasswordMangmentId[0]["ClubPasswordMangment"]["id"];
                $this->ClubPasswordMangment->save($this->request->data["ClubPasswordMangment"]);
                $this->Session->setFlash('Operator of club updated successfully.');
                $this->redirect(array('action' => 'club_co_admin', $cid));
            } else {

                $this->Session->setFlash(__('Username or Email already exists, Please try again.'));
            }
        }
    }

    /*******This functiuon is used to delete assing club operator****/
    public function club_operator_delete($cid)
    {

        $this->unbindUser();
        $this->layout = 'club_clubtab';
        $this->loadmodel('User');
        $this->loadmodel('club_operator_assign_access_levels');
        $this->club_operator_assign_access_levels->id = $cid;
        $this->club_operator_assign_access_levels->delete();
        return $this->redirect($_SERVER["HTTP_REFERER"]);

    }

    public function club_operator_delete_comment($cid)
    {


        $this->unbindUser();
        $this->layout = 'club_clubtab';
        $this->loadmodel('User');
        $this->loadmodel('club_operators');

        $clopinfo = $this->club_operators->find('all', array('conditions' => array('club_operators.id' => $cid)));
        $this->club_operators->id = $cid;
        $this->club_operators->delete();
        $this->User->id = $clopinfo[0]['club_operators']['user_id'];
        $this->User->delete();
        return $this->redirect($_SERVER["HTTP_REFERER"]);

    }

    public function club_account_current($frstFilter = NULL, $secndFilter = NULL, $thrdFilter = NULL, $frthFilter = NULL, $adminStat = NULL)
    {

        $this->loadModel('club_purchase_account');
        $this->loadModel('club_settings');
        $this->loadModel('club_members');

        if ($this->Session->read('Auth.User.role_id') == '1') {

            //when admin see this page from admin login for perticular club
            $this->layout = 'admin';
            $this->loadmodel('Club');
            $clubSecuredData = $this->Club->find('all', array('conditions' => array('Club.user_id' => $adminStat)));
            // echo $this->getLastQuery('Club');exit;
            //pr($clubSecuredData);exit;
            $nm_alert_expiring_membership_settings = $clubSecuredData[0]['Club']['alert_expiring_membership_settings'];
            $nm_auth_club_id = $clubSecuredData[0]['Club']['id'];
            $nm_auth_user_id = $adminStat;

        } else {

            $this->layout = 'club_clubtab';
            //when perticular club see this page from his own login
            $nm_alert_expiring_membership_settings = $this->Session->read('Auth.Club.alert_expiring_membership_settings');
            $nm_auth_club_id = $this->Session->read('Auth.Club.id');
            $nm_auth_user_id = $this->Session->read('Auth.User.id');

        }

        if ($nm_alert_expiring_membership_settings != '') {

            $alertMsg = unserialize($nm_alert_expiring_membership_settings);
            $act = $alertMsg['activation'];
            $msg1 = $alertMsg['msgInNetwork'];
            $mil = $alertMsg['mail'];
            $tim = $alertMsg['times'];
            $dys = $alertMsg['daysinterval'];

        } else {

            $act = 'False';
            $msg1 = 'False';
            $mil = 'False';
            $tim = '';
            $dys = '';

        }

        $this->set('activation', $act);
        $this->set('msgInNetwork', $msg1);
        $this->set('mail', $mil);
        $this->set('times', $tim);
        $this->set('daysinterval', $dys);
        if (!isset($frstFilter)) {

            $frstFilter = '30';
        }

        if (!isset($secndFilter)) {

            $secndFilter = '15';
        }
        if (!isset($thrdFilter)) {

            $thrdFilter = '30';
        }

        if (!isset($frthFilter)) {

            $frthFilter = '30';
        }

        /*******************************************************************/
        $clubsettingll = $this->club_settings->find('all');
        $total = $this->club_purchase_account->find('all', array('fields' => array('club_setting_id', 'SUM(accounts) as Total_Accounts '), 'conditions' => array('club_purchase_account.club_setting_id IN (select id from club_settings where 1)', 'club_purchase_account.clubuser_id' => $nm_auth_user_id, 'club_purchase_account.payment_status' => 'payed'), 'group' => '`club_purchase_account`.`club_setting_id`'));
        $totalmemberCnt = $this->club_members->find('list', array('conditions' => array('club_members.club_id' => $nm_auth_club_id), 'fields' => array('id', 'user_id')));


        $exp1date = date('Y-m-d', strtotime(date('Y-m-d') . ' +' . $frstFilter . '  days'));
        $exp2date = date('Y-m-d', strtotime(date('Y-m-d') . ' +' . $secndFilter . '  days'));
        $todaydate = date('Y-m-d');
        $basefirstFltr = $this->users->find(
            'count', array(
            'conditions' => array(
                "users.id" => $totalmemberCnt, "subscription_setting_id" => '3',
                "subscription_end_date BETWEEN '" . date('Y-m-d') . "' AND '" . $exp1date . "'"
            )
        ));
        $premfirstFltr = $this->users->find(
            'count', array(
            'conditions' => array(
                "users.id" => $totalmemberCnt, "subscription_setting_id" => '4',
                "subscription_end_date BETWEEN '" . date('Y-m-d') . "' AND '" . $exp1date . "'"
            )
        ));
        $profirstFltr = $this->users->find(
            'count', array(
            'conditions' => array(
                "users.id" => $totalmemberCnt, "subscription_setting_id" => '5',
                "subscription_end_date BETWEEN '" . date('Y-m-d') . "' AND '" . $exp1date . "'"
            )
        ));
        /******************************/

        $baseSecndFltr = $this->users->find(
            'count', array(
            'conditions' => array(
                "users.id" => $totalmemberCnt, "subscription_setting_id" => '3',
                "subscription_end_date BETWEEN '" . date('Y-m-d') . "' AND '" . $exp2date . "'"
            )
        ));
        $premSecndFltr = $this->users->find(
            'count', array(
            'conditions' => array(
                "users.id" => $totalmemberCnt, "subscription_setting_id" => '4',
                "subscription_end_date BETWEEN '" . date('Y-m-d') . "' AND '" . $exp2date . "'"
            )
        ));
        $proSecndFltr = $this->users->find(
            'count', array(
            'conditions' => array(
                "users.id" => $totalmemberCnt, "subscription_setting_id" => '5',
                "subscription_end_date BETWEEN '" . date('Y-m-d') . "' AND '" . $exp2date . "'"
            )
        ));
        /******************************/
        /***Expired**/

        $expiredLastdate = date('Y-m-d', strtotime(date('Y-m-d') . ' -' . $thrdFilter . '  days'));
        $lastdaydate = date('Y-m-d', strtotime(date('Y-m-d') . ' -1  days'));
        // echo $expiredLastdate;exit;
        $baseThrdFltr = $this->users->find(
            'count', array(
            'conditions' => array(
                "users.id" => $totalmemberCnt, "subscription_setting_id" => '3',
                "subscription_end_date BETWEEN '" . $expiredLastdate . "' AND '" . $lastdaydate . "'"
            )
        ));
        $premThrdFltr = $this->users->find(
            'count', array(
            'conditions' => array(
                "users.id" => $totalmemberCnt, "subscription_setting_id" => '4',
                "subscription_end_date BETWEEN '" . $expiredLastdate . "' AND '" . $lastdaydate . "'"
            )
        ));
        $proThrdFltr = $this->users->find(
            'count', array(
            'conditions' => array(
                "users.id" => $totalmemberCnt, "subscription_setting_id" => '5',
                "subscription_end_date BETWEEN '" . $expiredLastdate . "' AND '" . $lastdaydate . "'"
            )
        ));

        /*         * *************************** */
        /*         * *Not Renewed * */
        $expiredbeforedate = date('Y-m-d', strtotime(date('Y-m-d') . ' -' . $frthFilter . '  days'));


        $baseForthFltr = $this->users->find(
            'count', array(
            'conditions' => array(
                "users.id" => $totalmemberCnt, "subscription_setting_id" => '3',
                "subscription_end_date" => $expiredbeforedate
            )
        ));
        $premForthFltr = $this->users->find(
            'count', array(
            'conditions' => array(
                "users.id" => $totalmemberCnt, "subscription_setting_id" => '4',
                "subscription_end_date" => $expiredbeforedate
            )
        ));
        $proForthFltr = $this->users->find(
            'count', array(
            'conditions' => array(
                "users.id" => $totalmemberCnt, "subscription_setting_id" => '5',
                "subscription_end_date" => $expiredbeforedate
            )
        ));
        /*         * *************************** */
        /*         * *Aailable * */
        /*****************This code is write to count number of account give to clubember **************************************/

        $this->loadModel('club_member_accounts');
        $baseAvail = $this->club_member_accounts->find(
            'count', array(
            'conditions' => array(
                "clubuser_id" => $_SESSION['Auth']['User']['id'], "version" => 'Base',
            )
        ));
        $premAvail = $this->club_member_accounts->find(
            'count', array(
            'conditions' => array(
                "clubuser_id" => $_SESSION['Auth']['User']['id'], "version" => 'Premium',
            )
        ));
        $proAvail = $this->club_member_accounts->find(
            'count', array(
            'conditions' => array(
                "clubuser_id" => $_SESSION['Auth']['User']['id'], "version" => 'Pro',
            )
        ));

        /*****************END**************************************************************************************************/

        $ac_for_version = array();
        for ($i = 1; $i <= 3; $i++) {
            $ac_for_version[$i] = '0';
            foreach ($total as $key => $value) {
                if ($value['club_purchase_account']['club_setting_id'] == $i) {
                    $ac_for_version[$i] = $value[0]['Total_Accounts'];
                }
            }
        }


        //$this->set(compact('ac_for_version','clubsettingll','frstFilter','secndFilter','thrdFilter','frthFilter'));
        $this->set(compact('ac_for_version', 'clubsettingll', 'frstFilter', 'secndFilter', 'thrdFilter', 'frthFilter', 'basefirstFltr', 'premfirstFltr', 'profirstFltr', 'baseSecndFltr', 'premSecndFltr', 'proSecndFltr', 'baseThrdFltr', 'premThrdFltr', 'proThrdFltr', 'baseForthFltr', 'premForthFltr', 'proForthFltr', 'baseAvail', 'premAvail', 'proAvail'));
        if ($this->request->is('post')) {

            $savedta = serialize($this->request->data);
            $this->request->data['clubs']['id'] = $nm_auth_club_id;
            $this->request->data['clubs']['alert_expiring_membership_settings'] = $savedta;
            $this->clubs->id = $nm_auth_club_id;
            if ($this->clubs->save($this->request->data['clubs'])) {
                if ($this->Session->read('Auth.User.role_id') != '1') {
                    $this->Session->write('Auth.Club.alert_expiring_membership_settings', $savedta);
                }
                echo '1';
                exit;
            } else {
                echo '0';
                exit;
            }
        }
    }

    public function club_purchase_license()
    {
        if ($this->request->is('post') && isset($this->request->data['request_lisence'])) {
            $expirationDate = $this->request->data['day_duration'];

            $finalDate = new DateTime($expirationDate);
            $now = new DateTime();
            $diff = $now->diff($finalDate);
            $noOfPendingDays = $diff->days;

            $this->loadModel('Club');
            $this->loadModel('SubscriptionSetting');

            $clubId = $this->Session->read('Auth.Club.id');

            $club_details = $this->Club->getFunctionById($clubId);
            $this->SubscriptionSetting->recursive = -1;
            $subscription_details = $this->SubscriptionSetting->getRecordById($club_details['User']['subscription_setting_id']);
            $country_info = $this->Session->read('Auth.User.Country');


            $authorizationNeed = $this->request->data['request_lisence'];
            $pricePerAuth = $subscription_details['SubscriptionSetting']['pm_price_euro'];


            $multiPrice = (($authorizationNeed * $pricePerAuth) * $country_info['exchange_EUR1']);
            $endPrice = (($multiPrice * $noOfPendingDays) / 365);

            $randm_key = $this->getUniquePatten('8');
            $invoice_no = $this->invoiceno_generate('purchase_device_lisence');
            $this->Session->write('SecuredTransactionDetails.amount', round($endPrice, 2));
            $this->Session->write('SecuredTransactionDetails.heading', 'Purchase Device License');
            $this->Session->write('SecuredTransactionDetails.user_id', $this->Session->read('Auth.User.id'));
            $this->Session->write('SecuredTransactionDetails.club_setting_id', $this->request->data['club_setting_id']);
            $this->Session->write('SecuredTransactionDetails.randm_key', $randm_key);
            $this->Session->write('SecuredTransactionDetails.invoice_no', $invoice_no);
            $this->Session->write('SecuredTransactionDetails.pay_for', 'purchase_device_license');
            $this->Session->write('SecuredTransactionDetails.currencty_type', $country_info['currency']);
            //$this->Session->write('SecuredTransactionDetails.accounts', $this->request->data['accounts']);


            $this->Session->write('SecuredTransactionDetails.day_duration', $noOfPendingDays);
            $_SESSION["Controler_name"] = "clubs";
            $_SESSION["EXIT_URL"] = "club_purchase_account";
            $_SESSION['Payment_Status'] = "not_done";
            return $this->redirect(array('controller' => 'users', 'action' => 'last_payment'));

        }
    }

    public function club_purchase_sponsors()
    {
        $this->layout = 'club_clubtab';
    }

    public function club_purchase_account()
    {

        $this->layout = 'club_clubtab';
        $this->loadmodel('club_settings');
        $this->loadmodel('club_purchase_account');
        $this->loadmodel('club_request_account');
        $this->loadModel('club_settings');
        $this->loadModel('club_purchase_accounts');
        $this->loadModel('club_member_accounts');
        $this->loadModel('club_free_purches_accounts');
        $this->loadModel('subscription_settings');
        $this->loadModel('ClubSetting');

        /* calculate account buyed and assige value */
        $buyed_account_base = $this->ClubSetting->getRecordClubSettingByQuery($_SESSION['Auth']['User']['id'], 1, 'Base');
        $buyed_account_primier = $this->ClubSetting->getRecordClubSettingByQuery($_SESSION['Auth']['User']['id'], 2, 'Premium');

        $buyed_account_pro = $this->ClubSetting->getRecordClubSettingByQuery($_SESSION['Auth']['User']['id'], 3, 'Pro');
        if (!empty($buyed_account_base[0][0]['id'])) {

            $base_account = $buyed_account_base[0][0]['id'];
        } else {
            $base_account = 0;
        }

        if (!empty($buyed_account_primier[0][0]['id'])) {

            $premieum_account = $buyed_account_primier[0][0]['id'];

        } else {

            $premieum_account = 0;
        }

        if (!empty($buyed_account_pro[0][0]['id'])) {

            $pro_account = $buyed_account_pro[0][0]['id'];
        } else {
            $pro_account = 0;
        }

        /*end calculate account buyed and assige value*/
        $this->loadModel("ClubFreePurchesAccount");
        $this->loadModel("ClubMemberAccount");
        $club_free_purches_accounts = $this->ClubFreePurchesAccount->getRecordClubFreePurchesAccount(array('conditions' => array('ClubFreePurchesAccount.user_id' => $_SESSION['Auth']['User']['id'])));
        $club_free_trialcount_accounts = $this->ClubMemberAccount->getRecordClubMemberAccount(array('fields' => array('count(*)'), 'conditions' => array('AND' => array(array('ClubMemberAccount.clubuser_id' => $_SESSION['Auth']['User']['id']), array('ClubMemberAccount.version' => "Trial Base")))));
        if (!empty($club_free_purches_accounts)) {
            $club_free_result = $club_free_purches_accounts[0];
        }
        if (!empty($club_free_result) && $club_free_result['ClubFreePurchesAccount']['clubs_trial_limit'] == "-1") {
            $club_trial_subcount = 0;
        } else {
            $club_trial_subcount = $club_free_trialcount_accounts[0][0]['count(*)'];
        }
        $club_free_purches_accounts = $this->ClubFreePurchesAccount->getRecordClubFreePurchesAccount(array('conditions' => array('ClubFreePurchesAccount.user_id' => $_SESSION['Auth']['User']['id'])));
        $club_free_trialcount_accounts = $this->ClubMemberAccount->getRecordClubMemberAccount(array('fields' => array('count(*)'), 'conditions' => array('AND' => array(array('ClubMemberAccount.clubuser_id' => $_SESSION['Auth']['User']['id']), array('ClubMemberAccount.version' => "Trial Base")))));
        if (!empty($club_free_purches_accounts)) {
            $club_free_result = $club_free_purches_accounts[0];
        }
        if (!empty($club_free_result) && $club_free_result['ClubFreePurchesAccount']['clubs_trial_limit'] == "-1") {
            $club_trial_subcount = 0;
        } else {
            $club_trial_subcount = $club_free_trialcount_accounts[0][0]['count(*)'];
        }

        $day_duration_for_base = $this->subscription_settings->find('all', array('fieds' => array('subscription_settings.id', 'subscription_settings.subscription_name', 'subscription_settings.days_duration'), 'conditions' => array('subscription_settings.subscription_name' => 'User- base version')));
        $day_duration_for_pre = $this->subscription_settings->find('all', array('fieds' => array('subscription_settings.id', 'subscription_settings.subscription_name', 'subscription_settings.days_duration'), 'conditions' => array('subscription_settings.subscription_name' => 'User- premium')));
        $day_duration_for_pro = $this->subscription_settings->find('all', array('fieds' => array('subscription_settings.id', 'subscription_settings.subscription_name', 'subscription_settings.days_duration'), 'conditions' => array('subscription_settings.subscription_name' => 'User- professional')));
        $this->set(compact('day_duration_for_base', 'day_duration_for_pre', 'day_duration_for_pro', 'base_account', 'premieum_account', 'pro_account', 'club_trial_subcount', 'club_free_result'));
        $club_settings_base = $this->club_settings->find('first', array('conditions' => array('club_settings.name' => 'Base')));
        // $this->request->data['club_settings_base'] = $club_settings_base['club_settings'];
        $club_settings_pre = $this->club_settings->find('first', array('conditions' => array('club_settings.name' => 'Premium')));
        //$this->request->data['club_settings_premium'] = $club_settings_base['club_settings'];
        $club_settings_pro = $this->club_settings->find('first', array('conditions' => array('club_settings.name' => 'Pro')));
        //$this->request->data['club_settings_professional'] = $club_settings_base['club_settings'];
        $this->set('club_settings_base', $club_settings_base);
        $this->set('club_settings_pre', $club_settings_pre);
        $this->set('club_settings_pro', $club_settings_pro);
        //print_r($club_settings_base);exit;
        if ($this->request->is('post')) {
            $randm_key = $this->getUniquePatten('8');
            //print_r($this->request->data);
            if ($this->request->data['Club']['submit_type'] == 'request') {

                $this->request->data['club_request_account']['randm_key'] = $randm_key;
                $this->request->data['club_request_account']['accounts'] = $this->request->data['accounts'];
                $this->request->data['club_request_account']['day_duration'] = $this->request->data['day_duration'];
                $this->request->data['club_request_account']['club_setting_id'] = $this->request->data['club_setting_id'];
                $this->request->data['club_request_account']['clubuser_id'] = $this->Session->read('Auth.User.id');
                $this->request->data['club_request_account']['club_id'] = $this->Session->read('Auth.Club.id');
                $this->request->data['club_request_account']['request_status'] = 'pending';
                if ($this->club_request_account->save($this->request->data['club_request_account'])) {
                    $this->Session->setFlash(__('Your Request for accounts is submitted successfuuly'));
                } else {
                    $this->Session->setFlash(__('Your Request for accounts is not submitted, Please try again.'));
                }
                $this->redirect(array('action' => 'club_purchase_account'));

            } else if ($this->request->data['Club']['submit_type'] == 'payment') {


                $invoice_no = $this->invoiceno_generate('purchase_account');
                $this->Session->write('SecuredTransactionDetails.amount', $this->request->data['rblcheck']);
                $this->Session->write('SecuredTransactionDetails.heading', 'Payment of Purchase Accounts');
                $this->Session->write('SecuredTransactionDetails.user_id', $this->Session->read('Auth.User.id'));
                $this->Session->write('SecuredTransactionDetails.club_setting_id', $this->request->data['club_setting_id']);
                $this->Session->write('SecuredTransactionDetails.randm_key', $randm_key);
                $this->Session->write('SecuredTransactionDetails.invoice_no', $invoice_no);
                $this->Session->write('SecuredTransactionDetails.pay_for', 'purchase_account');
                $this->Session->write('SecuredTransactionDetails.accounts', $this->request->data['accounts']);
                $this->Session->write('SecuredTransactionDetails.day_duration', $this->request->data['day_duration']);
                $_SESSION["Controler_name"] = "clubs";
                $_SESSION["EXIT_URL"] = "club_purchase_account";
                $_SESSION['Payment_Status'] = "not_done";
                return $this->redirect(array('controller' => 'users', 'action' => 'last_payment'));

            } else {

                // Payment done after Receivment of accounts
                /** ********************First check if any already due of cards with rest start ****************************** */
                /*
                 * `clubuser_id`
                `card_type_id`
                `mode_of_purchase`=='rest'
                `payment_status`=='not_payed
                 *
                 * ======
                 *   `clubuser_id`
                `mode_of_purchase`=='rest'
                `payment_status`=='not payed'
                 */

                $chkBeforeSaveacnt = $this->club_purchase_account->find(
                    'all', array(
                    'conditions' => array(
                        'club_purchase_account.clubuser_id' => $this->Session->read('Auth.User.id'),
                        'club_purchase_account.mode_of_purchase' => 'rest',
                        'club_purchase_account.payment_status' => 'not payed'
                    ), 'fields' => array('club_purchase_account.id'), 'order' => 'id DESC', "limit" => 1));
                //pr($chkBeforeSaveacnt);
                if (empty($chkBeforeSaveacnt)) {

                    //echo'22222222222222222222222222';exit;
                    /**********************First check if any already due of cards with rest end ****************************** */

                    $invoice_no = $this->invoiceno_generate('purchase_account'); //generate Invoice number
                    $this->request->data['club_purchase_account']['randm_key'] = $randm_key;
                    $this->request->data['club_purchase_account']['invoice_no'] = $invoice_no;
                    $this->request->data['club_purchase_account']['accounts'] = $this->request->data['accounts'];
                    $this->request->data['club_purchase_account']['day_duration'] = $this->request->data['day_duration'];
                    $this->request->data['club_purchase_account']['club_setting_id'] = $this->request->data['club_setting_id'];
                    $this->request->data['club_purchase_account']['clubuser_id'] = $this->Session->read('Auth.User.id');
                    $this->request->data['club_purchase_account']['payment_status'] = 'not payed';
                    $this->request->data['club_purchase_account']['total_amount'] = $this->request->data['rblcheck'];
                    $this->request->data['club_purchase_account']['total_balance'] = $this->request->data['rblcheck'];
                    $this->request->data['club_purchase_account']['mode_of_purchase'] = 'rest';

                    if ($this->club_purchase_account->save($this->request->data['club_purchase_account'])) {

                        $this->invoiceno_save($invoice_no); //save Invoice number in Invoice number pool
                        $this->loadmodel('users_subscriptionsettings_types');
                        $club_blockAcntDays = $this->users_subscriptionsettings_types->find('all', array('conditions' => array('users_subscriptionsettings_types.user_id' => $_SESSION['Auth']['User']['id']), 'fields' => array('users_subscriptionsettings_types.club_accounts_pay_terms'), 'order' => 'id DESC', "limit" => 1));
                        $unserz = unserialize($club_blockAcntDays[0]['users_subscriptionsettings_types']['club_accounts_pay_terms']);
                        $blockDateAcnt_days = $unserz['send_before_days'];
                        $blockDateAcnt = date('Y-m-d ', strtotime(date('Y-m-d') . ' + ' . $blockDateAcnt_days . ' day'));
                        //echo $blockDateAcnt;exit;
                        $this->loadmodel('admin_setting_for_users');
                        $admin_fetchID = $this->admin_setting_for_users->find('all', array('conditions' => array('admin_setting_for_users.user_id' => $_SESSION['Auth']['User']['id']), 'fields' => array('admin_setting_for_users.id'), 'order' => 'id DESC', "limit" => 1));
                        $admin_setting_for_users_id = $admin_fetchID[0]['admin_setting_for_users']['id'];
                        $this->request->data['admin_setting_for_users']['block_purchase_account_id'] = $this->club_purchase_account->getLastInsertID();
                        $this->request->data['admin_setting_for_users']['block_account_date'] = $blockDateAcnt;
                        $this->request->data['admin_setting_for_users']['block_account_status'] = 'Y';
                        $this->admin_setting_for_users->id = $admin_setting_for_users_id;
                        $this->admin_setting_for_users->save($this->request->data['admin_setting_for_users']);
                        /*******************************************************************************************
                         * Mail send to club owner
                         */
                        //============Email================//
                        /* SMTP Options */
                        $userPayData['username'] = ucwords($this->Session->read('Auth.User.firstname') . ' ' . $this->Session->read('Auth.User.lastname'));
                        $userPayData['amount'] = $this->request->data['rblcheck'];
                        $userPayData['today_date'] = date("jS M Y", strtotime(date('Y-m-d')));
                        $userPayData['last_date'] = date("jS M Y", strtotime($blockDateAcnt));
                        $userPayData['accounts'] = $this->request->data['accounts'];
                        $this->Session->write('SecuredSucessPg', $userPayData);
                        $to = $this->Session->read('Auth.User.email');
                        $Email = new CakeEmail('default');
                        $Email->config('default');
                        $Email->from(array('sheetal@datalogysoftware.com' => 'MovesBook'))
                            ->to($to)
                            //->to('sheetal@datalogysoftware.com')
                            ->subject('Purchased accounts alloted')
                            ->emailFormat('html')
                            ->template('after_receivement_payment_done')
                            ->viewVars(array('userPayData' => $userPayData));
                        $Email->send();
                        return $this->redirect(array('action' => 'success_purchase_received'));
                        /********************************************************************************************* */

                    }

                }//end if of previous rest amount is not cleared yet
                else {
                    $this->Session->setFlash(__('Sorry, but you have already purchased a pack of card thats has not yet been paid in full,please complete the payment process before making a new order.'));
                    //  return $this->redirect(array('action' => 'club_purchase_account'));
                }

            }

        }
    }

    public function purchase_account_history($idClub21 = NULL)
    {


        $this->loadModel('club_purchase_accounts');
        if ($this->Session->read('Auth.User.role_id') == '1') {
            $this->layout = "admin";
            $nameClbID = $idClub21;
        } else {
            $this->layout = "club_clubtab";
            $nameClbID = $this->Session->read('Auth.User.id');
        }
        $options['conditions'] = array(
            'club_purchase_accounts.clubuser_id' => $nameClbID,
            'club_purchase_accounts.payment_status' => 'payed',
            'user_payments.pay_for' => 'purchase_account'
        );

        $options['joins'] = array(
            array(
                'table' => 'club_settings',
                'alias' => 'club_settings',
                'type' => 'INNER',
                'conditions' => array(
                    'club_purchase_accounts.club_setting_id = club_settings.id'
                )
            ),
            array(
                'table' => 'user_payments',
                'alias' => 'user_payments',
                'type' => 'INNER',
                'conditions' => array(
                    'club_purchase_accounts.randm_key = user_payments.randm_key',
                    'club_purchase_accounts.clubuser_id = user_payments.user_id'
                )
            ),
        );

        $options['fields'] = array(
            'club_purchase_accounts.id', 'club_purchase_accounts.randm_key', 'club_purchase_accounts.clubuser_id',
            'club_purchase_accounts.club_setting_id', 'club_purchase_accounts.accounts',
            'club_purchase_accounts.payment_status', 'club_settings.id', 'club_settings.name', 'club_settings.200_price',
            'club_settings.300_price', 'club_settings.500_price', 'club_settings.1000_price', 'user_payments.id', 'user_payments.amount',
            'user_payments.date', 'user_payments.payment_type');

        $fetchAns = $this->club_purchase_accounts->find('all', $options);
        $this->set(compact('fetchAns'));
    }

    public function purchase_account_history_print($idClub21 = NULL)
    {

        $this->layout = "";
        $this->loadModel('club_purchase_accounts');

        if ($this->Session->read('Auth.User.role_id') == '1') {

            $nameClbID = $idClub21;
        } else {

            $nameClbID = $this->Session->read('Auth.User.id');
        }

        $options['conditions'] = array(
            'club_purchase_accounts.clubuser_id' => $nameClbID,
            'club_purchase_accounts.payment_status' => 'payed',
            'user_payments.pay_for' => 'purchase_account'
        );
        $options['joins'] = array(
            array(
                'table' => 'club_settings',
                'alias' => 'club_settings',
                'type' => 'INNER',
                'conditions' => array(
                    'club_purchase_accounts.club_setting_id = club_settings.id'
                )
            ),
            array(
                'table' => 'user_payments',
                'alias' => 'user_payments',
                'type' => 'INNER',
                'conditions' => array(
                    'club_purchase_accounts.randm_key = user_payments.randm_key',
                    'club_purchase_accounts.clubuser_id = user_payments.user_id'
                )
            ),
        );
        $options['fields'] = array(
            'club_purchase_accounts.id', 'club_purchase_accounts.randm_key', 'club_purchase_accounts.clubuser_id',
            'club_purchase_accounts.club_setting_id', 'club_purchase_accounts.accounts',
            'club_purchase_accounts.payment_status', 'club_settings.id', 'club_settings.name', 'club_settings.200_price',
            'club_settings.300_price', 'club_settings.500_price', 'club_settings.1000_price', 'user_payments.id', 'user_payments.amount',
            'user_payments.date', 'user_payments.payment_type');
        $fetchAns = $this->club_purchase_accounts->find('all', $options);
        $this->set(compact('fetchAns'));
    }

    public function account_subscription()
    {

        $this->layout = 'club_clubtab';
        $this->loadmodel('users');
        $this->loadmodel('club_subscription_histories');
        $this->loadmodel('countries');
        $user_details_temp = array();

        if ($this->request->is('post')) {

            $cond = array();
            if (isset($this->request->data['search'])) {

                if ($this->request->data['search']['start_from_date'] != ''
                    && $this->request->data['search']['start_to_date'] == ''
                ) {

                    $value1 = "club_subscription_histories.subscription_start_date='" . $this->request->data['search']['start_from_date'] . "'";
                    array_push($cond, $value1);

                } else if ($this->request->data['search']['start_from_date'] == ''
                    && $this->request->data['search']['start_to_date'] != ''
                ) {

                    $value1 = "club_subscription_histories.subscription_start_date='" . $this->request->data['search']['start_to_date'] . "'";
                    array_push($cond, $value1);

                } else if ($this->request->data['search']['start_from_date'] != ''
                    && $this->request->data['search']['start_to_date'] != ''
                ) {

                    $value1 = "club_subscription_histories.subscription_start_date between '" . $this->request->data['search']['start_from_date'] . "' and '" . $this->request->data['search']['start_to_date'] . "'";
                    array_push($cond, $value1);
                }

                if ($this->request->data['search']['end_from_date'] != ''
                    && $this->request->data['search']['end_to_date'] == ''
                ) {

                    $value1 = "club_subscription_histories.subscription_end_date='" . $this->request->data['search']['end_from_date'] . "'";
                    array_push($cond, $value1);

                } else if ($this->request->data['search']['end_from_date'] == ''
                    && $this->request->data['search']['end_to_date'] != ''
                ) {

                    $value1 = "club_subscription_histories.subscription_end_date='" . $this->request->data['search']['end_to_date'] . "'";
                    array_push($cond, $value1);

                } else if ($this->request->data['search']['end_from_date'] != ''
                    && $this->request->data['search']['end_to_date'] != ''
                ) {

                    $value1 = "club_subscription_histories.subscription_end_date between '" . $this->request->data['search']['end_from_date'] . "' and '" . $this->request->data['search']['end_to_date'] . "'";
                    array_push($cond, $value1);
                }

                $sub_id = '';
                if ($this->request->data['search']['version'] != '') {

                    if ($this->request->data['search']['version'] == "Club Base") {

                        $sub_id = '19';
                    } else if ($this->request->data['search']['version'] == "Club Premium") {

                        $sub_id = '20';

                    } else if ($this->request->data['search']['version'] == "Club Professional") {

                        $sub_id = '21';
                    }

                    $value2 = "subscription_settings.id=" . $sub_id;
                    array_push($cond, $value2);
                }

                $value5 = "user_id='" . $_SESSION['Auth']['User']['id'] . "' and club_subscription_histories.user_id = '" . $_SESSION['Auth']['User']['id'] . "'";
                array_push($cond, $value5);

                $user_details_temp = $this->User->query('select * from users inner join club_subscription_histories on users.id= club_subscription_histories.user_id  inner join countries on countries.id=users.country_id inner join subscription_settings on  subscription_settings.id=club_subscription_histories.subscription_setting_id  where ' . implode(" and ", $cond));
            }

            if (isset($this->request->data['search_order'])) {

                if ($this->request->data['search_order']['orderby_search'] == "role_id") {

                    $user_details_temp = $this->users->find(
                        'all', array(
                        "joins" => array(
                            array(
                                'table' => 'countries',
                                'type' => 'INNER',
                                'conditions' => array('users.country_id=countries.id')
                            ),
                            array(
                                'table' => 'roles',
                                'type' => 'INNER',
                                'conditions' => array('roles.id=users.role_id')
                            ),
                            array(
                                'table' => 'club_subscription_histories',
                                'type' => 'INNER',
                                'conditions' => array(
                                    'club_subscription_histories.user_id=users.id'
                                )
                            ),
                            array(
                                'table' => 'subscription_settings',
                                'type' => 'INNER',
                                'conditions' => array(
                                    'subscription_settings.id=club_subscription_histories.subscription_setting_id'
                                )
                            )
                        ),
                        'fields' => array(
                            'users.id',
                            'users.role_id',
                            'users.username',
                            'users.email',
                            'club_subscription_histories.subscription_start_date',
                            'club_subscription_histories.currencty_type',
                            'club_subscription_histories.subscription_start_date',
                            'club_subscription_histories.amount',
                            'club_subscription_histories.subscription_end_date',
                            'subscription_settings.selected_type'
                        ),
                        'conditions' => array(
                            'users.id' => $_SESSION['Auth']['User']['id'],
                            'club_subscription_histories.user_id' => $_SESSION['Auth']['User']['id']
                        ),
                        "order" => array('roles.id  ASC')
                    ));

                } else if ($this->request->data['search_order']['orderby_search'] == "subscription_start_date") {

                    $user_details_temp = $this->users->find(
                        'all', array(
                        "joins" => array(
                            array(
                                'table' => 'countries',
                                'type' => 'INNER',
                                'conditions' => array('users.country_id=countries.id')
                            ),
                            array(
                                'table' => 'club_subscription_histories',
                                'type' => 'INNER',
                                'conditions' => array(
                                    'club_subscription_histories.user_id=users.id'
                                )
                            ),
                            array(
                                'table' => 'subscription_settings',
                                'type' => 'INNER',
                                'conditions' => array(
                                    'subscription_settings.id=club_subscription_histories.subscription_setting_id'
                                )
                            )
                        )
                        , 'fields' => array(
                            'users.id', 'users.role_id', 'users.username', 'users.email', 'club_subscription_histories.subscription_start_date', 'club_subscription_histories.currencty_type', 'club_subscription_histories.subscription_start_date', 'club_subscription_histories.amount', 'club_subscription_histories.subscription_end_date', 'subscription_settings.selected_type'
                        ),
                        'conditions' => array(
                            'users.id' => $_SESSION['Auth']['User']['id'],
                            'club_subscription_histories.user_id' => $_SESSION['Auth']['User']['id']
                        ),
                        "order" => array('club_subscription_histories.subscription_start_date  DESC')
                    ));

                } else if ($this->request->data['search_order']['orderby_search'] == "subscription_end_date") {

                    $user_details_temp = $this->users->find(
                        'all', array(
                        "joins" => array(
                            array('table' => 'countries', 'type' => 'INNER', 'conditions' => array('users.country_id=countries.id')),
                            array('table' => 'club_subscription_histories', 'type' => 'INNER', 'conditions' => array('club_subscription_histories.user_id=users.id')), array('table' => 'subscription_settings', 'type' => 'INNER', 'conditions' => array('subscription_settings.id=club_subscription_histories.subscription_setting_id')))
                        , 'fields' => array('users.id', 'users.role_id', 'users.username', 'users.email', 'club_subscription_histories.subscription_start_date', 'club_subscription_histories.currencty_type', 'club_subscription_histories.subscription_start_date', 'club_subscription_histories.amount', 'club_subscription_histories.subscription_end_date', 'subscription_settings.selected_type'),
                        'conditions' => array('users.id' => $_SESSION['Auth']['User']['id'], 'club_subscription_histories.user_id' => $_SESSION['Auth']['User']['id']), "order" => array('club_subscription_histories.subscription_end_date  DESC')));

                } else if ($this->request->data['search_order']['orderby_search'] == "subscription_setting_id") {

                    $user_details_temp = $this->users->find(
                        'all', array(
                        "joins" => array(
                            array('table' => 'countries', 'type' => 'INNER', 'conditions' => array('users.country_id=countries.id')),
                            array('table' => 'club_subscription_histories', 'type' => 'INNER', 'conditions' => array('club_subscription_histories.user_id=users.id')), array('table' => 'subscription_settings', 'type' => 'INNER', 'conditions' => array('subscription_settings.id=club_subscription_histories.subscription_setting_id')))
                        , 'fields' => array('users.id', 'users.role_id', 'users.username', 'users.email', 'club_subscription_histories.subscription_start_date', 'club_subscription_histories.currencty_type', 'club_subscription_histories.subscription_start_date', 'club_subscription_histories.amount', 'club_subscription_histories.subscription_end_date', 'subscription_settings.selected_type'),
                        'conditions' => array('users.id' => $_SESSION['Auth']['User']['id'], 'club_subscription_histories.user_id' => $_SESSION['Auth']['User']['id']), "order" => array('subscription_settings.selected_type  DESC')));
                }
            }
        } else {

            $user_details_temp = $this->users->find(
                'all', array(
                "joins" => array(
                    array(
                        'table' => 'countries',
                        'type' => 'INNER',
                        'conditions' => array(
                            'users.country_id=countries.id'
                        )
                    ),
                    array(
                        'table' => 'club_subscription_histories',
                        'type' => 'INNER',
                        'conditions' => array(
                            'club_subscription_histories.user_id=users.id'
                        )
                    ),
                    array(
                        'table' => 'subscription_settings',
                        'type' => 'INNER',
                        'conditions' => array(
                            'subscription_settings.id=club_subscription_histories.subscription_setting_id'
                        )
                    )
                ),
                'fields' => array(
                    'users.id',
                    'users.role_id',
                    'users.username',
                    'users.email',
                    'club_subscription_histories.subscription_start_date',
                    'club_subscription_histories.currencty_type',
                    'club_subscription_histories.amount',
                    'club_subscription_histories.subscription_start_date',
                    'club_subscription_histories.subscription_end_date',
                    'subscription_settings.selected_type'
                ),
                'conditions' => array(
                    'users.id' => $_SESSION['Auth']['User']['id'],
                    'club_subscription_histories.user_id' => $_SESSION['Auth']['User']['id']
                ),
                "order" => array(
                    'club_subscription_histories.subscription_start_date DESC'
                )
            ));

        }

        $count = count($user_details_temp);
        if ($count > 0) {
            $user_details = $user_details_temp[$count - 1];
        } else {
            $user_details = '';
        }
        $this->set(compact("user_details", "user_details_temp"));

    }


    public function print_user_details()
    {

        $this->layout = 'ajax';
        $this->autoRender = false;
        $this->loadModel('temp_historical_records');
        $user_detail = $this->request->data['users'];
        $this->temp_historical_records->deleteAll(array('1 = 1'));
        foreach ($user_detail as $value) {
            $saveData = array();
            $this->request->data['username'] = $value['username'];
            $this->request->data['end_sub'] = $value['end_sub'];
            $this->request->data['start_sub'] = $value['start_sub'];
            $this->request->data['status'] = $value['status'];
            $this->request->data['type'] = $value['type'];
            $this->request->data['amount'] = $value['amount'];
            $this->request->data['version'] = $value['version'];
            $this->temp_historical_records->create();
            $this->temp_historical_records->save($this->request->data);
        }
        // print_r('1');
        // exit;
    }

    public function print_account_subscription()
    {
        $this->layout = '';
        $this->loadModel('temp_historical_records');
        $result = $this->temp_historical_records->find('all');
        $this->set(compact('result'));
    }

    function current_subscription($tab = null)
    {

        if ($tab == 'stb') {
            $selecTab = 'Social';
        } elseif ($tab == 'ttb') {
            $selecTab = 'Training';
        } elseif ($tab == 'mtb') {
            $selecTab = 'Management';
        } else {
            $selecTab = 'Social';
        }

        $this->layout = 'club_clubtab';
        $this->loadModel('countries');
        $this->unbindUser();
        $userData = $this->User->find(
            'all', array(
                'conditions' => array('User.id' => $_SESSION['Auth']['User']['id']),
                'fields' => array(
                    'id', 'role_id', 'username', 'firstname', 'lastname',
                    'email', 'country_id', 'subscription_setting_id',
                    'subscription_start_date', 'subscription_end_date', 'image'
                )
            )
        );
        $this->loadModel('users_subscriptionsettings_types');
        $country = $this->countries->find('list', array('fields' => array('id', 'name')));
        $functionData = $this->users_subscriptionsettings_types->find('all', array('conditions' => array('users_subscriptionsettings_types.user_id' => $_SESSION['Auth']['User']['id'])));
        $this->request->data['functionData'] = isset($functionData[0]['users_subscriptionsettings_types']) ? $functionData[0]['users_subscriptionsettings_types'] : '';
        $this->set(compact('userData', 'country', 'selecTab'));
        //$res = $this->User->find('all', array('conditions' => array('User.id =' => $_SESSION['Auth']['User']['id'])));
        //$this->set('newRes', $res);
        $_SESSION["Controler_name"] = "clubs";
        $params = !empty($this->params->pass[0]) ? $this->params->pass[0] : '';
        $_SESSION["EXIT_URL"] = "current_subscription/" . $params;
        $_SESSION['Payment_Status'] = "not_done";
    }


    function send_paypayl_session()
    {

        $mangment_id = implode(',', $this->request->data['lang_id']);
        $buyed_id = implode(',', $this->request->data['buyed_id']);
        $this->layout = 'ajax';
        $this->autoRender = true;
        $randm_key = $this->getUniquePatten('8');
        $invoice_no = $this->invoiceno_generate('upgrade_management_function'); //generate Invoice number
        $this->invoiceno_save($invoice_no); //save Invoice number in Invoicen number pool
        if ($this->request->data['currencty_type'] == 'USD') {
            $this->Session->write('SecuredTransactionDetails.amount', $this->request->data['total_value']);
        } else {
            $this->Session->write('SecuredTransactionDetails.amount', $this->request->data['total_value']);
        }
        $this->Session->write('SecuredTransactionDetails.USD', $this->request->data['total_value']);
        $this->Session->write('SecuredTransactionDetails.EUR', $this->request->data['total_value']);
        $this->Session->write('SecuredTransactionDetails.currencty_type', $this->request->data['currencty_type']);
        $this->Session->write('SecuredTransactionDetails.heading', 'Payment of Upgrade Function');
        $this->Session->write('SecuredTransactionDetails.user_id', $this->Session->read('Auth.User.id'));
        $this->Session->write('SecuredTransactionDetails.club_setting_id', 0);
        $this->Session->write('SecuredTransactionDetails.randm_key', $randm_key);
        $this->Session->write('SecuredTransactionDetails.invoice_no', $invoice_no);
        $this->Session->write('SecuredTransactionDetails.management_id', $mangment_id);
        $this->Session->write('SecuredTransactionDetails.buyed_id', $buyed_id);
        $this->Session->write('SecuredTransactionDetails.module_plane', $this->request->data["module_plane"]);
        $this->Session->write('SecuredTransactionDetails.pay_for', 'upgrade_management_function');
        // print_r("1");
        // exit;
    }

    public function change_email_address()
    {

        $this->layout = 'ajax';
        $this->autoRender = false;
        $this->loadmodel('users');
        $user_email = $this->request->data['email'];
        $id = $this->users->find('all', array('fields' => array('id'), 'conditions' => array('users.id !=' => $_SESSION['Auth']['User']['id'], 'users.email' => $user_email, "users.verification_status" => "T")));
        if (!empty($id)) {
            echo "This email already exists. Please try another one";
            exit;
            // print_r("This email already exists please try another one");
            // exit;
        } else {


            $this->users->id = $_SESSION['Auth']['User']['id'];
            $this->users->save($this->request->data);
            $data_stored = array();
            $data_stored['user_name'] = $_SESSION['Auth']['User']['username'];
            $data_stored['email'] = $user_email;
            $to = $user_email;
            $Email = new CakeEmail('default');
            $Email->config('default');
            $Email->from(array('swapnilb@datalogysoftware.com' => 'MovesBook'))
                ->to($to)
                ->subject('Change Email Address')
                ->emailFormat('html')
                ->template('change_email_address')
                ->viewVars(array('ms' => $data_stored));
            if ($Email->send()) {
                $this->Session->write('Auth.User.email', $user_email);
                echo "1";
                exit;
            } else {
                echo "Email does not send";
                exit;
            }
        }
    }

    public function summary_renewal($tab = null)
    {

        $backurl = $this->referer();
        if ($tab == 'stb') {
            $selecTab = 'Social';
        } elseif ($tab == 'ttb') {
            $selecTab = 'Training';
        } elseif ($tab == 'mtb') {
            $selecTab = 'Management';
        } else {
            $selecTab = 'Social';
        }

        $this->layout = 'club_clubtab';
        $this->loadModel('subscription_setting');

        $allSubsData = $this->subscription_setting->find('all', array('conditions' => array('subscription_setting.role_id' => 8)));
        $result = $this->User->find('all', array('fields' => array('subscription_end_date', 'subscription_setting_id'), 'conditions' => array('User.id' => $_SESSION['Auth']['User']['id'])));
        $last_sub = $this->subscription_setting->find('all', array('fields' => array('subscription_name'), 'conditions' => array('subscription_setting.id' => $result[0]['User']['subscription_setting_id'])));
        $subscription_name = $last_sub[0]['subscription_setting']['subscription_name'];
        $user_subend_data = $result[0]['User']['subscription_end_date'];
        $this->loadModel('users_subscriptionsettings_types');
        $functionData = $this->users_subscriptionsettings_types->find('all', array('conditions' => array('users_subscriptionsettings_types.user_id' => $_SESSION['Auth']['User']['id'])));
        $this->request->data['functionData'] = isset($functionData[0]['users_subscriptionsettings_types']) ? $functionData[0]['users_subscriptionsettings_types'] : '';
        $this->set(compact('allSubsData', 'user_subend_data', 'functionData', 'selecTab', 'backurl', 'subscription_name', 'user_subend_data'));
    }

    public function detail_about_version($tab = null)
    {

        $backurl = $this->referer();
        if ($tab == 'stb') {
            $selecTab = 'Social';
        } elseif ($tab == 'ttb') {
            $selecTab = 'Training';
        } elseif ($tab == 'mtb') {
            $selecTab = 'Management';
        } else {
            $selecTab = 'Social';
        }

        $this->layout = 'club_clubtab';
        $this->loadModel('subscription_setting');
        $allSubsData = $this->subscription_setting->find('all', array('conditions' => array('subscription_setting.role_id' => 8)));
        $result = $this->User->find('all', array('fields' => array('subscription_end_date', 'subscription_setting_id'), 'conditions' => array('User.id' => $_SESSION['Auth']['User']['id'])));
        $last_sub = $this->subscription_setting->find('all', array('fields' => array('subscription_name'), 'conditions' => array('subscription_setting.id' => $result[0]['User']['subscription_setting_id'])));
        $subscription_name = $last_sub[0]['subscription_setting']['subscription_name'];
        $user_subend_data = $result[0]['User']['subscription_end_date'];
        $this->loadModel('users_subscriptionsettings_types');
        $functionData = $this->users_subscriptionsettings_types->find('all', array('conditions' => array('users_subscriptionsettings_types.user_id' => $_SESSION['Auth']['User']['id'])));
        $this->request->data['functionData'] = isset($functionData[0]['users_subscriptionsettings_types']) ? $functionData[0]['users_subscriptionsettings_types'] : '';
        $this->set(compact('allSubsData', 'user_subend_data', 'functionData', 'selecTab', 'backurl', 'subscription_name', 'user_subend_data'));
    }

    public function club_summary_detail()
    {

        $this->autoRender = true;
        $this->loadModel('subscription_setting');
        $this->loadModel('users_subscriptionsettings_types');
        $id = $this->request->data['id'];
        $singleSubsData = $this->subscription_setting->find('first', array('conditions' => array('subscription_setting.id' => $id)));
        //pr($singleSubsData);exit;
        $this->set(compact('singleSubsData'));
        $this->request->data = $singleSubsData;
        $functionData = $this->users_subscriptionsettings_types->find('all', array('conditions' => array('users_subscriptionsettings_types.user_id' => $_SESSION['Auth']['User']['id'])));
        $this->request->data['functionData'] = isset($functionData[0]['users_subscriptionsettings_types']) ? $functionData[0]['users_subscriptionsettings_types'] : '';


    }

    public function load_function_available()
    {

        $this->layout = 'ajax';
        $this->autoRender = true;
        $urlid = $_SESSION['Auth']['User']['id'];
        $userID = $this->request->data['uid'];
        $typeDisplay = $this->request->data['typ'];
        $this->loadModel('user_activated_functions');

        $idData = $this->user_activated_functions->find(
            'all', array(
            'conditions' => array(
                'user_activated_functions.user_id' => $userID,
                'user_activated_functions.users_subscriptionsettings_type_id' => $this->request->data['usIDtyp']
            )
        ));

        $this->loadModel('users_subscriptionsettings_types');
        $subid1Data = $this->users_subscriptionsettings_types->find('all', array('conditions' => array('users_subscriptionsettings_types.id' => $this->request->data['usIDtyp'])));
        $subscription_setting_type_id = isset($subid1Data[0]['users_subscriptionsettings_types']['subs_settings_id']) ? $subid1Data[0]['users_subscriptionsettings_types']['subs_settings_id'] : '';
        //$subscription_setting_type_id=$this->request->data['usIDtyp'];

        if ($typeDisplay == 'Social') {

            $this->loadModel('functions');
            $this->loadModel('function_permissions');
            $functionData = $this->functions->find('all');
            $selectedSocialId221 = !empty($idData[0]['user_activated_functions']['function_permission_id']) && isset($idData[0]['user_activated_functions']['function_permission_id']) ? $idData[0]['user_activated_functions']['function_permission_id'] : '';
            $selectedSocialId123 = explode(',', $selectedSocialId221);
            //$idData123 = $this->function_permissions->find('all', array('conditions' => array('function_permissions.id' => $selectedSocialId123)));
            $idData123 = $this->function_permissions->find('all', array('conditions' => array('function_permissions.subscription_setting_id' => $this->request->data['subscription_setting_id'], 'function_permissions.display' => 'Y')));
            //print_r($this->getLastQuery('function_permissions'));exit;
            foreach ($idData123 as $key1 => $value1) {
                $selectedSocialId[] = $value1['function_permissions']['function_id'];
            }
            $this->set(compact('selectedSocialId'));

        }

        if ($typeDisplay == 'Training') {

            $this->loadModel('function_training_features');
            $functionData = $this->function_training_features->find('all');
            $selectedFndTrainingId = isset($idData[0]['user_activated_functions']['function_training_permission_id']) ? $idData[0]['user_activated_functions']['function_training_permission_id'] : '';
            // $epTraining = explode(',', $selectedFndTrainingId);
            $this->loadModel('function_training_permissions');
            $fndData = $this->function_training_permissions->find('all', array('conditions' => array('function_training_permissions.subscription_setting_id' => $this->request->data['subscription_setting_id'], 'function_training_permissions.display' => 'Y')));
            //print_r($fndData);exit;
            foreach ($fndData as $key1 => $value1) {
                $selectedTrainingId[] = $value1['function_training_permissions']['function_id'];
            }

            //$selectedTrainingId= $idData[0]['user_activated_functions']['function_training_permission_id'];
            $this->set(compact('selectedTrainingId'));

        }
        if ($typeDisplay == 'Management') {

            $this->loadmodel('management_languages');
            $this->loadmodel('management_infos');
            $langcode = 'en';
            $mangInfo = $this->management_infos->find('all');
            $functionData = array();

            for ($z = 0; $z < count($mangInfo); $z++) {

                $functionData[$z]['id'] = $mangInfo[$z]['management_infos']['id'];
                $functionData[$z]['include_in_version'] = $mangInfo[$z]['management_infos']['include_in_version'];
                $functionData[$z]['USD'] = $mangInfo[$z]['management_infos']['no_limit_plan'];
                $functionData[$z]['EUR'] = $mangInfo[$z]['management_infos']['year_plan'];
                $functionData[$z]['publish'] = $mangInfo[$z]['management_infos']['publish'];
                $langId = $mangInfo[$z]['management_infos']['lang_id'];
                $functionData[$z]['langId'] = $mangInfo[$z]['management_infos']['id'];
                $langInfo = $this->management_languages->find('all', array('conditions' => array('id' => $langId), 'fields' => $langcode, 'recursive' => 0));
                if ($langInfo[0]['management_languages'][$langcode] != '') {
                    $functionData[$z]['feature_value'] = $langInfo[0]['management_languages'][$langcode];
                } else {

                    $functionData[$z]['feature_value'] = '';
                }

            }

            foreach ($functionData as $functionDataRow) {

                if ($functionDataRow['publish'] == 'Y') {
                    $selectedManagementId1[] = $functionDataRow['id'];
                }
            }

            //print_r($idData[0]['user_activated_functions']['management_info_id']);exit;
            $selectedManagementId = '';

            if (isset($idData[0]['user_activated_functions']['management_info_id'])) {
                $selectedManagementId = $idData[0]['user_activated_functions']['management_info_id'];
            }

            $this->set(compact('selectedManagementId', 'selectedManagementId1'));

            //print_r($functionData);exit;
            //$this->set(compact('$functionData'));

        }

        $this->set(compact('functionData', 'urlid', 'typeDisplay', 'subscription_setting_type_id', 'urlid', 'selectedSocialId'));


    }

    public function send_to_paypal()
    {

        $this->layout = 'ajax';
        $this->autoRender = true;
        $randm_key = $this->getUniquePatten('8');
        $invoice_no = $this->invoiceno_generate('Clubs subscription'); //generate Invoice number
        $this->invoiceno_save($invoice_no); //save Invoice number in Invoicen number pool
        $this->Session->write('SecuredTransactionDetails.amount', $this->request->data['price']);
        $this->Session->write('SecuredTransactionDetails.sub_days', $this->request->data['sub_days']);
        $this->Session->write('SecuredTransactionDetails.USD', "USD");
        $this->Session->write('SecuredTransactionDetails.heading', "Club's subscription Upgration");
        $this->Session->write('SecuredTransactionDetails.currencty_type', "USD");
        $this->Session->write('SecuredTransactionDetails.user_id', $this->Session->read('Auth.User.id'));
        $this->Session->write('SecuredTransactionDetails.subscription_setting_id', $this->request->data['subscription_setting_id']);
        $this->Session->write('SecuredTransactionDetails.randm_key', $randm_key);
        $this->Session->write('SecuredTransactionDetails.invoice_no', $invoice_no);
        $this->Session->write('SecuredTransactionDetails.subscription_start_date', $this->request->data['subscription_start_date']);
        $this->Session->write('SecuredTransactionDetails.subscription_end_date', $this->request->data['subscription_end_date']);
        $this->Session->write('SecuredTransactionDetails.pay_for', "Clubs subscription");
        $_SESSION["Controler_name"] = "clubs";
        $_SESSION["EXIT_URL"] = "summary_renewal";
        // print_r("1");
        // exit;
    }

    public function history_subscription()
    {
        $this->layout = "club_clubtab";
        $this->loadmodel('users');
        $this->loadmodel('club_subscription_histories');
        $this->loadmodel('countries');
        //         $user_details_temp = $this->users->find('all', array("joins" => array(array('table' => 'countries', 'type' => 'INNER', 'conditions' => array('users.country_id=countries.id')),
        //                    array('table' => 'club_subscription_histories', 'type' => 'INNER', 'conditions' => array('club_subscription_histories.user_id=users.id')), array('table' => 'subscription_settings', 'type' => 'INNER', 'conditions' => array('subscription_settings.id=club_subscription_histories.subscription_setting_id')))
        //                , 'fields' => array('users.id', 'users.role_id', 'users.username', 'users.email', 'club_subscription_histories.subscription_start_date', 'club_subscription_histories.subscription_start_date', 'club_subscription_histories.subscription_end_date', 'subscription_settings.selected_type'),
        //                'conditions' => array('users.id' => $_SESSION['Auth']['User']['id'], 'club_subscription_histories.user_id' => $_SESSION['Auth']['User']['id']), "order" => array('users.username DESC')));
        //
        $user_details_temp = $this->users->query(
            "SELECT * from users inner  join club_subscription_histories on users.id=club_subscription_histories.user_id inner join subscription_settings on subscription_settings.id=club_subscription_histories.subscription_setting_id inner join user_payments on user_payments.randm_key=club_subscription_histories.randm_key  WHERE CURDATE()  > club_subscription_histories.subscription_end_date  and club_subscription_histories.user_id=" . $_SESSION['Auth']['User']['id'] . "
            union
            SELECT * from users inner  join club_subscription_histories on users.id=club_subscription_histories.user_id  inner join subscription_settings on subscription_settings.id=club_subscription_histories.subscription_setting_id inner join user_payments on user_payments.randm_key=club_subscription_histories.randm_key WHERE CURDATE() <=DATE_SUB(club_subscription_histories.subscription_end_date ,INTERVAL 30 DAY)  and club_subscription_histories.user_id=" . $_SESSION['Auth']['User']['id'] . "
            union
            SELECT * from users inner  join club_subscription_histories on users.id=club_subscription_histories.user_id inner join subscription_settings on subscription_settings.id=club_subscription_histories.subscription_setting_id inner join user_payments on user_payments.randm_key=club_subscription_histories.randm_key WHERE CURDATE() >=DATE_SUB(club_subscription_histories.subscription_end_date ,INTERVAL 30 DAY)  and club_subscription_histories.user_id=" . $_SESSION['Auth']['User']['id'] . "");
        // print_r($user_details_temp);exit;
        $this->set(compact('user_details_temp'));
    }

    public function create_member_old()
    {

        $this->layout = 'club_clubtab';
        $memeber = '';
        $this->loadModel('countries');
        $this->loadModel('Usertype');
        $this->loadModel('User');
        $this->loadModel('measures');
        $this->loadModel('zones');
        $this->loadModel('weeks');
        $this->loadModel('themes');
        $this->loadModel('countries');
        $this->loadModel('Country');
        $this->loadModel('club_free_purches_accounts');
        $this->loadModel('club_purchase_accounts');
        $this->loadModel('club_settings');
        $this->loadModel('ClubSettingMembertype');
        $this->loadModel('ClubSettingProfession');
        $club_purchaseresult = array();
        $club_free_result = array();
        $club_purchase_base_accounts = array();
        $club_purchase_Premium_accounts = array();
        $club_purchase_Pro_accounts = array();
        $result = array();
        $user_result = array();
        //$this->User->unbindModel(array('hasAndBelongsToMany' => array('social_profiles')), true);
        //$this->unbindSocialProfile();
        $member_type = $this->ClubSettingMembertype->getRecordClubSettingMembertypeBylist();
        $this->set(compact('member_type'));
        //pr($member_type);exit;
        $profession = $this->ClubSettingProfession->getClubSettingProfessionBylist();
        $this->set(compact('profession'));
        $country_option = $this->Country->getCountryIdName();
        //$country_option = $this->countries->find('list', array('fields' => array('id', 'name')));
        //getRecordByCondtion
        $countryCondition = array('fields' => array('currency'), 'conditions' => array('id' => $_SESSION['Auth']['User']['country_id']));
        $country_currency1 = $this->Country->getRecordByCondtion($countryCondition);
        $country_currency = $country_currency1[0]['Country']['currency'];
        $this->set(compact("country_currency", $country_currency));
        $zonesList = $this->zones->find('list', array('fields' => array('id', 'zone_name'), 'order' => 'zone_name ASC'));
        $measureList = $this->measures->find('list', array('fields' => array('id', 'measure_unit')));
        $weekList = $this->weeks->find('list', array('fields' => array('id', 'week_name')));
        $themesList = $this->themes->find('list', array('fields' => array('id', 'theme_name')));
        $Usertypeconditions = array('conditions' => array('Usertype.role_id' => 5));
        $singleUserTypes = $this->Usertype->getUsertypeListBycondition($Usertypeconditions);

        if ($this->request->is('post') || !empty($_SESSION['search_created_user'])) {

            $name = isset($this->request->data["member_search"]['name']) ? $this->request->data["member_search"]['name'] : "";
            $full_name = isset($this->request->data["member_search"]['name']) ? $this->request->data["member_search"]['name'] : '';
            $email = isset($this->request->data["member_search"]['name']) ? $this->request->data["member_search"]['name'] : '';
            $cell = isset($this->request->data["member_search"]['name']) ? $this->request->data["member_search"]['name'] : '';
            $account_precount = '';
            $account_pretotal = '';
            $account_basecount = '';
            $account_basetotal = '';
            $account_Procount = '';
            $account_Prototal = '';
            $Provalue = array();
            $club_pre_id = '';
            $club_base_id = '';
            $club_pro_id = '';
            $display_msg = '';
            $bgcolor = '';
            $color = '';
            $color_current = '';
            $club_purchase_Pro_accounts = array();
            $club_purchase_Premium_accounts = array();
            $this->loadModel('subscription_settings');
            $this->loadModel('club_member_accounts');
            $this->loadModel('club_membership_requests');
            $price = "0";
            $price_p = "0";
            $price_pro = "0";
            $club_id = "";
            $day_duration_for_trial = $this->subscription_settings->find('all', array('fieds' => array('subscription_settings.id', 'subscription_settings.subscription_name', 'subscription_settings.days_duration'), 'conditions' => array('subscription_settings.subscription_name' => 'Trial Base')));
            $day_duration_for_base = $this->subscription_settings->find('all', array('fieds' => array('subscription_settings.id', 'subscription_settings.subscription_name', 'subscription_settings.days_duration'), 'conditions' => array('subscription_settings.subscription_name' => 'User- base version')));
            $day_duration_for_pre = $this->subscription_settings->find('all', array('fieds' => array('subscription_settings.id', 'subscription_settings.subscription_name', 'subscription_settings.days_duration'), 'conditions' => array('subscription_settings.subscription_name' => 'User- premium')));
            $day_duration_for_pro = $this->subscription_settings->find('all', array('fieds' => array('subscription_settings.id', 'subscription_settings.subscription_name', 'subscription_settings.days_duration'), 'conditions' => array('subscription_settings.subscription_name' => 'User- professional')));
            $club_id1 = $this->clubs->find('all', array('conditions' => array('clubs.user_id' => $_SESSION['Auth']['User']['id'])));

            if (!empty($club_id1)) {
                $club_id = $club_id1[0]['clubs']['id'];
            }
            $role_type = '';
            //$this->User->unBindModel(array(hasMany => array('SocialProfile', 'Banner','Club_subscription_histories','Team','Coach','Athlete','Club','Operator','Post')));

            if (!empty($_SESSION['search_created_user'])) {

                $user_conditons = array('conditions' => array('OR' => array(array('User.username' => $_SESSION['search_created_user']))));
                $result = $this->User->getUserRecordByCondtions($user_conditons);
                //$result = $this->User->find('all', array('conditions' => array('OR' => array(array('User.username' =>$_SESSION['search_created_user'])))));
                unset($_SESSION['search_created_user']);
            } else {

                $user_conditonsName = array('conditions' => array('OR' => array(array('User.username' => $name))));
                $result = $this->User->getUserRecordByCondtions($user_conditonsName);

                //$result = $this->User->find('all', array('conditions' => array('OR' => array(array('User.username' => $name)))));
            }
            if (empty($result)) {
                $resultConditions = array('conditions' => array('OR' => array(array('User.username' => $name), array('User.firstname' => $name), array('User.lastname' => $name), array('User.email' => $email), array('User.mobile_number' => $cell))));
                $user_resultConditions = array('joins' => array(array('table' => 'club_members', 'type' => 'INNER', 'conditions' => array('User.id=club_members.user_id'))), 'conditions' => array('OR' => array(array('User.username' => $name), array('User.firstname' => $name), array('User.lastname' => $name), array('User.email' => $email), array('User.mobile_number' => $cell))));
                $result = $this->User->getUserRecordByCondtions($resultConditions);
                $user_result = $this->User->getUserRecordByCondtions($user_resultConditions);
                //$result = $this->User->find('all', array('conditions' => array('OR' => array(array('User.username' => $name), array('User.firstname' => $name), array('User.lastname' => $name), array('User.email' => $email), array('User.mobile_number' => $cell)))));
                //$user_result = $this->User->find('all', array('joins' => array(array('table' => 'club_members', 'type' => 'INNER', 'conditions' => array('User.id=club_members.user_id'))), 'conditions' => array('OR' => array(array('User.username' => $name), array('User.firstname' => $name), array('User.lastname' => $name), array('User.email' => $email), array('User.mobile_number' => $cell)))));
            } else {
                $user_result = $this->User->getUserRecordByCondtionsWithJoin($name);
                //$user_result = $this->User->find('all', array('joins' => array(array('table' => 'club_members', 'type' => 'INNER', 'conditions' => array('User.id=club_members.user_id'))), 'conditions' => array('OR' => array(array('User.username' => $name)))));
            }

            if (!empty($result)) {

                //get role type//
                if ($result[0]['User']['role_id'] == 5) {
                    $role_type = "Single user";
                } else if ($result[0]['User']['role_id'] == 6) {
                    $role_type = "Coach";
                } else if ($result[0]['User']['role_id'] == 7) {
                    $role_type = "Team";
                } else if ($result[0]['User']['role_id'] == 8) {
                    $role_type = "Club";
                } else if ($result[0]['User']['role_id'] == 9) {
                    $role_type = "Group";
                }
                $this->set(compact('role_type', $role_type));
                //-------------//
                $current_date = (date("Y-m-d"));
                $current_date1 = strtotime(date("Y-m-d"));
                $expire_end_date = strtotime($result[0]['User']['subscription_end_date']);
                $expire_end_date1 = strtotime($result[0]['User']['subscription_end_date']);
                $expiring_date = (date("Y-m-d", strtotime("-30 day", $expire_end_date)));

                if ($current_date1 > $expire_end_date1) {

                    $display_msg = "Expired";
                    $bgcolor = "#ED1C24";
                    $color = "#fff";
                    $color_current = "#ED1C24";

                } else if ($expiring_date <= $current_date) {

                    $display_msg = "Expiring";
                    $bgcolor = "#FFF200";
                    $color = "#000";

                } else {

                    $display_msg = "current";
                    $bgcolor = "#B5E61D";
                    $color = "#000";

                }

                $user_subscriptionConditions = array('fields' => array('subscription_end_date'), 'conditions' => array('User.id' => $_SESSION['Auth']['User']['id']));
                $login_user_subscription = $this->User->getFunctionByUserIdWithFieldsCondtions($user_subscriptionConditions);
                $expire_end_date_login_user = strtotime($login_user_subscription[0]['User']['subscription_end_date']);
                $current_date_login_user = strtotime(date("Y-m-d"));
                $expire_end_date_login_user = strtotime($expire_end_date_login_user);

                if ($expire_end_date_login_user > $expire_end_date_login_user) {
                    $display_msg_login_user = "Expired";
                    $bgcolor_login_user = "#ED1C24";
                    $color_login_user = "#fff";
                    $color_current_login_user = "#ED1C24";
                } else if ($expire_end_date_login_user <= $expire_end_date_login_user) {
                    $display_msg_login_user = "Expiring";
                    $bgcolor_login_user = "#FFF200";
                    $color_login_user = "#000";
                } else {
                    $display_msg_login_user = "current";
                    $bgcolor_login_user = "#B5E61D";
                    $color_login_user = "#000";
                }
                $this->set(compact('color_login_user', 'bgcolor_login_user', 'display_msg_login_user'));

                /*                 * *check club reuest send or not** */

                $club_id2 = $this->clubs->find('all', array('conditions' => array('clubs.user_id' => $result[0]['User']['id'])));
                $request_status = $this->tempdta($club_id, $result[0]['User']['id']);

                /*                 * *end check club reuest send or not** */
                $subscription_settings = $this->subscription_settings->find('all', array('fields' => array('subscription_settings.subscription_name'), 'conditions' => array("subscription_settings.id" => $result[0]['User']['subscription_setting_id'])));

                $user_subscription_name = isset($subscription_settings[0]['subscription_settings']['subscription_name']) ? $subscription_settings[0]['subscription_settings']['subscription_name'] : '';
                $club_free_purches_accounts = $this->club_free_purches_accounts->find('all', array('conditions' => array('club_free_purches_accounts.user_id' => $_SESSION['Auth']['User']['id'])));
                $club_free_trialcount_accounts = $this->club_member_accounts->find('all', array('fields' => array('count(*)'), 'conditions' => array('AND' => array(array('club_member_accounts.clubuser_id' => $_SESSION['Auth']['User']['id']), array('club_member_accounts.version' => "Trial Base")))));
                if (!empty($club_free_purches_accounts)) {

                    $club_free_result = $club_free_purches_accounts[0];
                }
                if (!empty($club_free_result) && $club_free_result['club_free_purches_accounts']['clubs_trial_limit'] == "-1") {

                    $club_trial_subcount = 0;
                } else {

                    $club_trial_subcount = $club_free_trialcount_accounts[0][0]['count(*)'];
                }
                $club_free_basecount_accounts = $this->club_member_accounts->find('all', array('fields' => array('count(*)'), 'conditions' => array('AND' => array(array('club_member_accounts.clubuser_id' => $_SESSION['Auth']['User']['id']), array('club_member_accounts.version' => "User- base version")))));
                $club_base_subcount = $club_free_basecount_accounts[0][0]['count(*)'];
                $club_free_premcount_accounts = $this->club_member_accounts->find('all', array('fields' => array('count(*)'), 'conditions' => array('AND' => array(array('club_member_accounts.clubuser_id' => $_SESSION['Auth']['User']['id']), array('club_member_accounts.version' => "User- premium")))));
                $club_prem_subcount = $club_free_premcount_accounts[0][0]['count(*)'];
                $club_free_procount_accounts = $this->club_member_accounts->find('all', array('fields' => array('count(*)'), 'conditions' => array('AND' => array(array('club_member_accounts.clubuser_id' => $_SESSION['Auth']['User']['id']), array('club_member_accounts.version' => "User- professional")))));
                $club_pro_subcount = $club_free_procount_accounts[0][0]['count(*)'];
                $club_free_result = isset($club_free_purches_accounts[0]) ? $club_free_purches_accounts[0] : '';
                //  $club_purchase_accounts = $this->club_settings->find('all', array('joins' => array(array('table' => 'club_purchase_accounts', 'type' => 'INNER', 'conditions' => array('club_purchase_accounts.club_setting_id=club_settings.id'))), 'conditions' => array('club_purchase_accounts.clubuser_id' => $_SESSION['Auth']['User']['id'])));
                //  $club_purchaseresult = $club_purchase_accounts[0];
                //  $club_purchase_Premium_accounts = $this->club_settings->find('all', array('joins' => array(array('table' => 'club_purchase_accounts', 'type' => 'INNER', 'conditions' => array('club_purchase_accounts.club_setting_id=club_settings.id'))), 'conditions' =>array('AND'=>array( array('club_purchase_accounts.clubuser_id'=>$_SESSION['Auth']['User']['id']),array('club_settings.name'=>'Premium')))));
                //  $club_purchase_Pro_accounts = $this->club_settings->find('all', array('joins' => array(array('table' => 'club_purchase_accounts', 'type' => 'INNER', 'conditions' => array('club_purchase_accounts.club_setting_id=club_settings.id'))), 'conditions' =>array('AND'=>array( array('club_purchase_accounts.clubuser_id'=>$_SESSION['Auth']['User']['id']),array('club_settings.name'=>'Pro')))));
                //
                //$club_purchase_Premium_accounts = $this->club_settings->find('all', array('joins' => array(array('table' => 'club_purchase_accounts', 'type' => 'INNER', 'conditions' => array('club_purchase_accounts.club_setting_id=club_settings.id'))),'fields'=>array('200_price','200_total','count(*) as preminum','sum(club_purchase_accounts.accounts) as account'), 'conditions' =>array('AND'=>array( array('club_purchase_accounts.clubuser_id'=>$_SESSION['Auth']['User']['id']),array('club_settings.name'=>'Premium'),array('club_purchase_accounts.payment_status'=>'payed')))));
                $club_purchase_base_accounts = $this->club_settings->find('all', array('joins' => array(array('table' => 'club_purchase_accounts', 'type' => 'INNER', 'conditions' => array('club_purchase_accounts.club_setting_id=club_settings.id'))), 'fields' => array('club_settings.id', 'club_settings.name', 'club_settings.200_price', 'club_settings.300_price', 'club_settings.500_price', 'club_settings.1000_price', 'club_settings.200_total', 'club_settings.300_total', 'club_settings.500_total', 'club_settings.1000_total', 'club_purchase_accounts.accounts'), 'conditions' => array('AND' => array(array('club_purchase_accounts.clubuser_id' => $_SESSION['Auth']['User']['id']), array('club_settings.name' => 'Base')))));
                $club_member_baseaccounts = $this->club_member_accounts->find('all', array('joins' => array(array('table' => 'club_purchase_accounts', 'type' => 'INNER', 'conditions' => array('club_member_accounts.club_purches_id=club_purchase_accounts.id'))), 'fields' => array('count(*)'), 'conditions' => array('AND' => array(array('club_member_accounts.clubuser_id' => $_SESSION['Auth']['User']['id']), array('club_member_accounts.version' => 'Base'), array('club_member_accounts.status' => 'paid')))));
                foreach ($club_purchase_base_accounts as $key => $value) {

                    $club_base_id = $value['club_settings']['id'];
                    if (!empty($value['club_purchase_accounts']['accounts'])) {
                        if ($value['club_purchase_accounts']['accounts'] == '200') {
                            $account_basecount += $value['club_purchase_accounts']['accounts'];
                            $account_basetotal += $value['club_settings']['200_total'];
                            $price = $value['club_settings']["200_price"];
                        } else if ($value['club_purchase_accounts']['accounts'] == '300') {
                            $account_basecount += $value['club_purchase_accounts']['accounts'];
                            $account_basetotal += $value['club_settings']['300_total'];
                            $price = $value['club_settings']["300_price"];
                        } else if ($value['club_purchase_accounts']['accounts'] == '500') {
                            $account_basecount += $value['club_purchase_accounts']['accounts'];
                            $account_basetotal += $value['club_settings']['500_total'];
                            $price = $value['club_settings']["500_price"];
                        } else if ($value['club_purchase_accounts']['accounts'] == '1000') {
                            $account_basecount += $value['club_purchase_accounts']['accounts'];
                            $account_basetotal += $value['club_settings']['1000_total'];
                            $price = $value['club_settings']["1000_price"];
                        }
                    }
                }


                $account_basetotal = $account_basetotal - ($price * $club_member_baseaccounts[0][0]['count(*)']);
                $account_basecount = $account_basecount - $club_member_baseaccounts[0][0]['count(*)'];
                $club_purchase_Premium_accounts = $this->club_settings->find('all', array('joins' => array(array('table' => 'club_purchase_accounts', 'type' => 'INNER', 'conditions' => array('club_purchase_accounts.club_setting_id=club_settings.id'))), 'fields' => array('club_settings.id', 'club_settings.name', 'club_settings.200_price', 'club_settings.300_price', 'club_settings.500_price', 'club_settings.1000_price', 'club_settings.200_total', 'club_settings.300_total', 'club_settings.500_total', 'club_settings.1000_total', 'club_purchase_accounts.accounts'), 'conditions' => array('AND' => array(array('club_purchase_accounts.clubuser_id' => $_SESSION['Auth']['User']['id']), array('club_settings.name' => 'Premium')))));
                $club_member_Premiumaccounts = $this->club_member_accounts->find('all', array('joins' => array(array('table' => 'club_purchase_accounts', 'type' => 'INNER', 'conditions' => array('club_member_accounts.club_purches_id=club_purchase_accounts.id'))), 'fields' => array('count(*)'), 'conditions' => array('AND' => array(array('club_member_accounts.clubuser_id' => $_SESSION['Auth']['User']['id']), array('club_member_accounts.version' => 'Premium'), array('club_member_accounts.status' => 'paid')))));
                foreach ($club_purchase_Premium_accounts as $prekey => $prevalue) {

                    $club_pre_id = $prevalue['club_settings']['id'];
                    if (!empty($prevalue['club_purchase_accounts']['accounts'])) {
                        //   print_r($prevalue);exit;
                        if ($prevalue['club_purchase_accounts']['accounts'] == '200') {
                            $account_precount += $prevalue['club_purchase_accounts']['accounts'];
                            $account_pretotal += $prevalue['club_settings']['200_total'];
                            $price_p = $prevalue['club_settings']["200_price"];
                        } else if ($prevalue['club_purchase_accounts']['accounts'] == '300') {
                            $account_precount += $prevalue['club_purchase_accounts']['accounts'];
                            $account_pretotal += $prevalue['club_settings']['300_total'];
                            $price_p = $prevalue['club_settings']["300_price"];
                        } else if ($prevalue['club_purchase_accounts']['accounts'] == '500') {
                            $account_precount += $prevalue['club_purchase_accounts']['accounts'];
                            $account_pretotal += $prevalue['club_settings']['500_total'];
                            $price_p = $prevalue['club_settings']["500_price"];
                        } else if ($prevalue['club_purchase_accounts']['accounts'] == '1000') {
                            $account_precount += $prevalue['club_purchase_accounts']['accounts'];
                            $account_pretotal += $prevalue['club_settings']['1000_total'];
                            $price_p = $prevalue['club_settings']["1000_price"];
                        }
                    }
                }

                $account_precount = $account_precount - $club_member_Premiumaccounts[0][0]['count(*)'];
                $account_pretotal = $account_pretotal - ($price_p * $club_member_Premiumaccounts[0][0]['count(*)']);
                //print_r($_SESSION['Auth']['User']['id']);exit;
                $club_purchase_Pro_accounts = $this->club_settings->find('all', array('joins' => array(array('table' => 'club_purchase_accounts', 'type' => 'INNER', 'conditions' => array('club_purchase_accounts.club_setting_id=club_settings.id'))), 'fields' => array('club_settings.id', 'club_settings.name', 'club_settings.200_price', 'club_settings.300_price', 'club_settings.500_price', 'club_settings.1000_price', 'club_settings.200_total', 'club_settings.300_total', 'club_settings.500_total', 'club_settings.1000_total', 'club_purchase_accounts.accounts'), 'conditions' => array('AND' => array(array('club_purchase_accounts.clubuser_id' => $_SESSION['Auth']['User']['id']), array('club_settings.name' => 'Pro')))));
                $club_member_Proaccounts = $this->club_member_accounts->find('all', array('joins' => array(array('table' => 'club_purchase_accounts', 'type' => 'INNER', 'conditions' => array('club_member_accounts.club_purches_id=club_purchase_accounts.id'))), 'fields' => array('count(*)'), 'conditions' => array('AND' => array(array('club_member_accounts.clubuser_id' => $_SESSION['Auth']['User']['id']), array('club_member_accounts.version' => 'Pro'), array('club_member_accounts.status' => 'paid')))));
                /* calculate basic,primium,pro subscription price and account total */
                foreach ($club_purchase_Pro_accounts as $Prokey => $valuePro) {

                    if (!empty($valuePro['club_purchase_accounts'])) {
                        if ($valuePro['club_purchase_accounts']['accounts'] == '200') {
                            $account_Procount += $valuePro['club_purchase_accounts']['accounts'];
                            $account_Prototal += $valuePro['club_settings']['200_total'];
                            $club_pro_id = $valuePro['club_settings']['id'];
                            $price_pro = $valuePro['club_settings']["200_price"];
                        } else if ($valuePro['club_purchase_accounts']['accounts'] == '300') {
                            $account_Procount += $valuePro['club_purchase_accounts']['accounts'];
                            $account_Prototal += $valuePro['club_settings']['300_total'];
                            $price_pro = $valuePro['club_settings']["300_price"];
                            $club_pro_id = $valuePro['club_settings']['id'];
                        } else if ($valuePro['club_purchase_accounts']['accounts'] == '500') {
                            $account_Procount += $valuePro['club_purchase_accounts']['accounts'];
                            $account_Prototal += $valuePro['club_settings']['500_total'];
                            $price_pro = $valuePro['club_settings']["500_price"];
                            $club_pro_id = $valuePro['club_settings']['id'];
                        } else if ($valuePro['club_purchase_accounts']['accounts'] == '1000') {
                            $account_Procount += $valuePro['club_purchase_accounts']['accounts'];
                            $account_Prototal += $valuePro['club_settings']['1000_total'];
                            $club_pro_id = $valuePro['club_settings']['id'];
                            $price_pro = $valuePro['club_settings']["1000_price"];
                        }
                    }
                }
                /* end calculate basic,primium,pro subscription price and account total */
                $account_Prototal = $account_Prototal - ($price_pro * $club_member_Proaccounts[0][0]['count(*)']);
                $account_Procount = $account_Procount - $club_member_Proaccounts[0][0]['count(*)'];
                $country_name = $country_option[$result[0]['User']['country_id']];
            }
            //print_r($country_name);exit;
            // $payed_status=$this->club_settings->query("SELECT club_settings.`200_price` as 200_cost,club_settings.`300_price` as 300_cost,club_settings.`500_price` as 500_cost,club_settings.`1000_price` as 1000_cost,club_purchase_accounts.`accounts` as account,`status` as status,`payment_status` as `payment_status` FROM `club_settings` inner join club_purchase_accounts on  club_purchase_accounts.`club_setting_id`=club_settings.id  WHERE club_purchase_accounts.`clubuser_id`=".$_SESSION['Auth']['User']['id']." and `status`='not_end' and `club_setting_id`=1 and `disable_accounts`='N' and `payment_status` ='payed' order by club_purchase_accounts.id ASC limit 0,1");
            $memeber = count($result);
            if (!empty($result[0]["User"]["subscription_start_date"]) && $result[0]["User"]["subscription_start_date"] == "0000-00-00") {
                $user_created_status = "created_by_club";
            } else {
                $user_created_status = "created_by_self";
            }

            //if($result[0]["User"]['start)_subscription_date'])
            $this->set(compact('name', 'user_created_status', 'color_current', 'request_status', 'club_membership_requests', 'color', 'bgcolor', 'display_msg', 'user_result', 'user_subscription_name', 'club_trial_subcount', 'club_base_subcount', 'club_prem_subcount', 'club_pro_subcount', 'day_duration_for_trial', 'result', 'club_purchase_base_accounts', 'club_purchase_Premium_accounts', 'club_purchase_Pro_accounts', 'day_duration_for_base', 'day_duration_for_pre', 'day_duration_for_pro', 'country_name', 'club_free_result', 'account_precount', 'account_pretotal', 'account_basecount', 'account_basetotal', 'account_Procount', 'account_Prototal', 'club_base_id', 'club_pre_id', 'club_pro_id'));
        }
        $this->set(compact('club_id', 'color', 'display_msg', 'memeber', 'country_option', 'singleUserTypes', 'themesList', 'weekList', 'zonesList', 'measureList', 'club_purchaseresult', 'club_purchase_base_accounts', 'club_purchase_Premium_accounts', 'club_purchase_Pro_accounts'));

    }

    public function tempdta($clubparam1 = NULL, $userparam2 = NULL)
    {

        $this->loadmodel('club_membership_requests');
        $this->loadmodel('club_members');
        $memberChk = $this->club_members->find(
            'all', array(
            'conditions' => array(
                'club_members.club_id' => $clubparam1,
                'club_members.user_id' => $userparam2,
                'club_members.membership_status' => 'accepted'
            )
        ));

        if (!empty($memberChk)) {
            $res = 'already_member';
        } else {

            $reqChk = $this->club_membership_requests->find('all', array('conditions' => array('club_membership_requests.club_id' => $clubparam1, 'club_membership_requests.user_id' => $userparam2), 'fields' => array('id', 'request_from', 'status')));
            $reqChk1 = $this->club_membership_requests->find('all', array('conditions' => array('club_membership_requests.club_id' => $userparam2, 'club_membership_requests.user_id' => $clubparam1), 'fields' => array('id', 'request_from', 'status')));

            if (!empty($reqChk) || !empty($reqChk1)) {

                if ($reqChk[0]['club_membership_requests']['status'] == 'accepted') {
                    $res = 'already_member'; //exit;
                } else if ($reqChk[0]['club_membership_requests']['status'] == 'rejected') {

                    if ($reqChk[0]['club_membership_requests']['request_from'] == 'user') {
                        $res = 'rejected_by_club'; //exit;
                    } else {
                        $res = 'rejected_by_user'; //exit;
                    }

                } else {

                    //pending
                    if ($reqChk[0]['club_membership_requests']['request_from'] == 'user') {

                        $res = 'pending_request_from_club'; //exit;
                    } else {

                        $res = 'pending_request_from_user'; //exit;
                    }
                }
            } else {

                $res = 'non_member'; //exit;
            }
        }
        return $res;
    }

    public function create_member()
    {

        $this->layout = 'club_clubtab';

        $this->loadModel('countries');
        $this->loadModel('Usertype');
        $this->loadModel('User');
        $this->loadModel('measures');
        $this->loadModel('zones');
        $this->loadModel('weeks');
        $this->loadModel('themes');
        $this->loadModel('countries');
        $this->loadModel('Country');
        $this->loadModel('club_free_purches_accounts');
        $this->loadModel('club_purchase_accounts');
        $this->loadModel('club_settings');
        $this->loadModel('ClubSettingMembertype');
        $this->loadModel('ClubSettingProfession');

        $memeber = '';
        $club_purchaseresult = array();
        $club_free_result = array();
        $club_purchase_base_accounts = array();
        $club_purchase_Premium_accounts = array();
        $club_purchase_Pro_accounts = array();
        $user_created_status = "";
        $result = array();
        $user_result = array();

        $country_currency = $_SESSION["Auth"]["User"]["Country"]["currency"];
        $this->set(compact("country_currency", $country_currency));
        $Usertypeconditions = array('conditions' => array('Usertype.role_id' => 5));

        if ($this->request->is('post') || !empty($_SESSION['search_created_user'])) {

            //print_r($this->request->data); exit;
            $this->loadModel("club_member_accounts");
            $name = isset($this->request->data["member_search"]['name']) ? $this->request->data["member_search"]['name'] : "";
            $full_name = isset($this->request->data["member_search"]['name']) ? $this->request->data["member_search"]['name'] : '';
            $email = isset($this->request->data["member_search"]['name']) ? $this->request->data["member_search"]['name'] : '';
            $cell = isset($this->request->data["member_search"]['name']) ? $this->request->data["member_search"]['name'] : '';

            $account_precount = '';
            $account_pretotal = '';
            $account_basecount = '';
            $account_basetotal = '';
            $account_Procount = '';
            $account_Prototal = '';

            $Provalue = array();
            $club_pre_id = '';
            $club_base_id = '';
            $club_pro_id = '';
            $display_msg = '';
            $bgcolor = '';
            $color = '';
            $color_current = '';

            $club_purchase_Pro_accounts = array();
            $club_purchase_Premium_accounts = array();

            $this->loadModel('subscription_settings');
            $this->loadModel('club_member_accounts');
            $this->loadModel('club_membership_requests');

            $price = "0";
            $price_p = "0";
            $price_pro = "0";
            $club_id = "";

            /***********Fetch subscription for trial base pre pro setting accout**************** */
            $subscription_settings = $this->subscription_settings->find('all', array('fields' => array('subscription_settings.id', 'subscription_settings.subscription_name', 'subscription_settings.days_duration'), 'conditions' => array('OR' => array(array('subscription_settings.subscription_name' => 'Trial Base'), array('subscription_settings.subscription_name' => 'User- base version'), array('subscription_settings.subscription_name' => 'User- premium'), array('subscription_settings.subscription_name' => 'User- professional')))));
            $day_duration_for_trial[0] = $subscription_settings[0];
            $day_duration_for_base [0] = $subscription_settings[1];
            $day_duration_for_pre [0] = $subscription_settings[2];
            $day_duration_for_pro [0] = $subscription_settings[3];

            /*             * *****************end************************************************************ */
            /* comment on 13/10/2016
            //$day_duration_for_trial = $this->subscription_settings->find('all', array('fieds' => array('subscription_settings.id', 'subscription_settings.subscription_name', 'subscription_settings.days_duration'), 'conditions' => array('subscription_settings.subscription_name' => 'Trial Base')));
            //$day_duration_for_base = $this->subscription_settings->find('all', array('fieds' => array('subscription_settings.id', 'subscription_settings.subscription_name', 'subscription_settings.days_duration'), 'conditions' => array('subscription_settings.subscription_name' => 'User- base version')));
            //$day_duration_for_pre = $this->subscription_settings->find('all', array('fieds' => array('subscription_settings.id', 'subscription_settings.subscription_name', 'subscription_settings.days_duration'), 'conditions' => array('subscription_settings.subscription_name' => 'User- premium')));
            //$day_duration_for_pro = $this->subscription_settings->find('all', array('fieds' => array('subscription_settings.id', 'subscription_settings.subscription_name', 'subscription_settings.days_duration'), 'conditions' => array('subscription_settings.subscription_name' => 'User- professional')));
             */
            //$club_id1 = $this->clubs->find('all', array('fields'=>array('id'),'conditions' => array('clubs.user_id' => $_SESSION['Auth']['User']['id'])));

            if (!empty($_SESSION['Auth']["Club"]["id"])) {
                // $club_id = $club_id1[0]['clubs']['id'];
                $club_id = $_SESSION['Auth']["Club"]["id"];
            }

            $role_type = '';

            //$this->User->unBindModel(array(hasMany => array('SocialProfile', 'Banner','Club_subscription_histories','Team','Coach','Athlete','Club','Operator','Post')));

            if (!empty($_SESSION['search_created_user'])) {

                $user_conditons = array(
                    'fields' => array(
                        'Country.currency',
                        'SubscriptionSetting.subscription_name',
                        'Country.name',
                        'User.firstname',
                        'User.firstname',
                        'User.lastname',
                        'User.country_id',
                        'User.subscription_setting_id',
                        'User.id',
                        'User.role_id',
                        'User.subscription_end_date',
                        'User.subscription_start_date',
                        'User.username',
                        'Role.name'
                    ),
                    'conditions' => array(
                        'AND' => array(
                            array(
                                'User.id !=' => $_SESSION['Auth']['User']['id']
                            ),
                            array(
                                'User.role_id' => 5
                            ),
                            'OR' => array(
                                array(
                                    'User.username LIKE' => "%" . $_SESSION['search_created_user'] . "%",
                                    'User.firstname LIKE' => "%" . $_SESSION['search_created_user'] . "%",
                                    'User.lastname LIKE' => "%" . $_SESSION['search_created_user'] . "%"
                                )
                            )
                        )
                    ));

                $result = $this->User->getUserRecordByCondtions($user_conditons);

                //$result = $this->User->find('all', array('conditions' => array('OR' => array(array('User.username' =>$_SESSION['search_created_user'])))));
                unset($_SESSION['search_created_user']);
            } else {

                $user_conditonsName = array('fields' => array('Country.currency', 'SubscriptionSetting.subscription_name', 'Country.name', 'User.firstname', 'User.lastname', 'User.country_id', 'User.subscription_setting_id', 'User.id', 'User.role_id', 'User.subscription_end_date', 'User.subscription_start_date', 'User.username', 'Role.name'), 'conditions' => array('AND' => array(array('User.id !=' => $_SESSION['Auth']['User']['id']), array('User.role_id' => 5), array('User.username' => $name))));
                $result = $this->User->getUserRecordByCondtions($user_conditonsName);
                //$result = $this->User->find('all', array('conditions' => array('OR' => array(array('User.username' => $name)))));
            }

            if (empty($result)) {

                $explode_name = explode(' ', $name);
                if (count($explode_name) == 2) {
                    $name = $explode_name[1];
                }
                $resultConditions = array('fields' => array('Country.currency', 'SubscriptionSetting.subscription_name', 'User.firstname', 'User.lastname', 'Country.name', 'User.country_id', 'User.subscription_setting_id', 'User.id', 'User.role_id', 'User.subscription_end_date', 'User.subscription_start_date', 'User.username', 'Role.name'), 'conditions' => array('AND' => array(array('User.id !=' => $_SESSION['Auth']['User']['id']), array('User.role_id' => 5)), 'OR' => array(array('User.username' => $name), array('User.firstname' => $name), array('User.lastname' => $name), array('User.email' => $email), array('User.mobile_number' => $cell))));
                $user_resultConditions = array('joins' => array(array('table' => 'club_members', 'type' => 'INNER', 'conditions' => array('User.id=club_members.user_id'))), 'conditions' => array("AND" => array(array('User.role_id' => 5)), 'OR' => array(array('User.username' => $name), array('User.firstname' => $name), array('User.lastname' => $name), array('User.email' => $email), array('User.mobile_number' => $cell))));
                $result = $this->User->getUserRecordByCondtions($resultConditions);
                $user_result = $this->User->getUserRecordByCondtions($user_resultConditions);
                //$result = $this->User->find('all', array('conditions' => array('OR' => array(array('User.username' => $name), array('User.firstname' => $name), array('User.lastname' => $name), array('User.email' => $email), array('User.mobile_number' => $cell)))));
                //$user_result = $this->User->find('all', array('joins' => array(array('table' => 'club_members', 'type' => 'INNER', 'conditions' => array('User.id=club_members.user_id'))), 'conditions' => array('OR' => array(array('User.username' => $name), array('User.firstname' => $name), array('User.lastname' => $name), array('User.email' => $email), array('User.mobile_number' => $cell)))));

            } else {

                $user_result = $this->User->getUserRecordByCondtionsWithJoin($name, $_SESSION['Auth']['User']['id']);
                //$user_result = $this->User->find('all', array('joins' => array(array('table' => 'club_members', 'type' => 'INNER', 'conditions' => array('User.id=club_members.user_id'))), 'conditions' => array('OR' => array(array('User.username' => $name)))));
            }

            if (!empty($result)) {

                //get role type//
                if ($result[0]['User']['role_id'] == 5) {
                    $role_type = "Single user";
                } else if ($result[0]['User']['role_id'] == 6) {
                    $role_type = "Coach";
                } else if ($result[0]['User']['role_id'] == 7) {
                    $role_type = "Team";
                } else if ($result[0]['User']['role_id'] == 8) {
                    $role_type = "Club";
                } else if ($result[0]['User']['role_id'] == 9) {
                    $role_type = "Group";
                }

                $this->set(compact('role_type', $role_type));
                //-------------//
                $current_date = (date("Y-m-d"));
                $current_date1 = strtotime(date("Y-m-d"));
                $expire_end_date = strtotime($result[0]['User']['subscription_end_date']);
                $expire_end_date1 = strtotime($result[0]['User']['subscription_end_date']);
                $expiring_date = (date("Y-m-d", strtotime("-30 day", $expire_end_date)));

                if ($current_date1 > $expire_end_date1) {

                    $display_msg = "Expired";
                    $bgcolor = "#ED1C24";
                    $color = "#fff";
                    $color_current = "#ED1C24";

                } else if ($expiring_date <= $current_date) {

                    $display_msg = "Expiring";
                    $bgcolor = "#FFF200";
                    $color = "#000";

                } else {

                    $display_msg = "current";
                    $bgcolor = "#B5E61D";
                    $color = "#000";
                }

                // pr($display_msg);exit;
                $user_subscriptionConditions = array('fields' => array('subscription_end_date'), 'conditions' => array('User.id' => $_SESSION['Auth']['User']['id']));
                $login_user_subscription = $this->User->getFunctionByUserIdWithFieldsCondtions($user_subscriptionConditions);
                $expire_end_date_login_user = strtotime($login_user_subscription[0]['User']['subscription_end_date']);
                $current_date_login_user = strtotime(date("Y-m-d"));
                $expire_end_date_login_user = strtotime($expire_end_date_login_user);

                if ($expire_end_date_login_user > $expire_end_date_login_user) {

                    $display_msg_login_user = "Expired";
                    $bgcolor_login_user = "#ED1C24";
                    $color_login_user = "#fff";
                    $color_current_login_user = "#ED1C24";

                } else if ($expire_end_date_login_user <= $expire_end_date_login_user) {

                    $display_msg_login_user = "Expiring";
                    $bgcolor_login_user = "#FFF200";
                    $color_login_user = "#000";

                } else {
                    $display_msg_login_user = "current";
                    $bgcolor_login_user = "#B5E61D";
                    $color_login_user = "#000";
                }

                $this->set(compact('color_login_user', 'bgcolor_login_user', 'display_msg_login_user'));
                /***check club reuest send or not***/
                //$club_id2 = $this->clubs->find('all', array('conditions' => array('clubs.user_id' => $result[0]['User']['id'])));
                $request_status = $this->tempdta($club_id, $result[0]['User']['id']);
                //pr($request_status);exit;
                /***end check club reuest send or not***/
                //$subscription_settings = $this->subscription_settings->find('all', array('fields' => array('subscription_settings.subscription_name'), 'conditions' => array("subscription_settings.id" => $result[0]['User']['subscription_setting_id'])));
                $subscription_cond_one = array('fields' => array('SubscriptionSetting.subscription_name'), 'conditions' => array("SubscriptionSetting.id" => $result[0]['User']['subscription_setting_id']));
                $this->loadModel("SubscriptionSetting");
                //$subscription_settings = $this->SubscriptionSetting->getUserRecordByCondtions($subscription_cond_one);
                $user_subscription_name = isset($result[0]['SubscriptionSetting']['subscription_name']) ? $result[0]['SubscriptionSetting']['subscription_name'] : '';
                /******************this use to fetch user purches free account*************** */
                $club_free_purches_accounts = $this->club_free_purches_accounts->find('all', array('conditions' => array('club_free_purches_accounts.user_id' => $_SESSION['Auth']['User']['id'])));
                /** ****************this use to fetch user purches free account************** */
                $club_free_trialcount_accounts = $this->club_member_accounts->find('all', array('fields' => array('count(*)'), 'conditions' => array('AND' => array(array('club_member_accounts.clubuser_id' => $_SESSION['Auth']['User']['id']), array('club_member_accounts.version' => "Trial Base")))));
                if (!empty($club_free_purches_accounts)) {
                    $club_free_result = $club_free_purches_accounts[0];
                }
                if (!empty($club_free_result) && $club_free_result['club_free_purches_accounts']['clubs_trial_limit'] == "-1") {
                    $club_trial_subcount = 0;
                } else {
                    $club_trial_subcount = $club_free_trialcount_accounts[0][0]['count(*)'];
                }
                $club_member_account = $this->club_member_accounts->query("SELECT count(*) FROM `club_member_accounts`  WHERE ((`club_member_accounts`.`clubuser_id` = 550) AND (`club_member_accounts`.`version` = 'User- base version')) union SELECT count(*) FROM `club_member_accounts`  WHERE ((`club_member_accounts`.`clubuser_id` = 550) AND (`club_member_accounts`.`version` = 'User- premium')) union SELECT count(*) FROM `club_member_accounts`  WHERE ((`club_member_accounts`.`clubuser_id` = 550) AND (`club_member_accounts`.`version` = 'User- professional'))");
                $club_base_subcount = $club_member_account[0][0]['count(*)'];
                $club_prem_subcount = $club_member_account[0][0]['count(*)'];
                $club_pro_subcount = $club_member_account[0][0]['count(*)'];
                //$club_free_basecount_accounts = $this->club_member_accounts->find('all',array('fields' => array('count(*)'),'conditions' => array('AND' => array(array('club_member_accounts.clubuser_id' => $_SESSION['Auth']['User']['id']), array('club_member_accounts.version' => "User- base version")))));
                //$club_base_subcount = $club_free_basecount_accounts[0][0]['count(*)'];
                //$club_free_premcount_accounts = $this->club_member_accounts->find('all', array('fields' => array('count(*)'), 'conditions' => array('AND' => array(array('club_member_accounts.clubuser_id' => $_SESSION['Auth']['User']['id']), array('club_member_accounts.version' => "User- premium")))));
                //$club_prem_subcount = $club_free_premcount_accounts[0][0]['count(*)'];
                //$club_free_procount_accounts = $this->club_member_accounts->find('all', array('fields' => array('count(*)'), 'conditions' => array('AND' => array(array('club_member_accounts.clubuser_id' => $_SESSION['Auth']['User']['id']), array('club_member_accounts.version' => "User- professional")))));
                //$club_pro_subcount = $club_free_procount_accounts[0][0]['count(*)'];
                //$club_free_result = isset($club_free_purches_accounts[0])?$club_free_purches_accounts[0]:'';
                //$club_purchase_accounts = $this->club_settings->find('all', array('joins' => array(array('table' => 'club_purchase_accounts', 'type' => 'INNER', 'conditions' => array('club_purchase_accounts.club_setting_id=club_settings.id'))), 'conditions' => array('club_purchase_accounts.clubuser_id' => $_SESSION['Auth']['User']['id'])));
                //$club_purchaseresult = $club_purchase_accounts[0];
                //$club_purchase_Premium_accounts = $this->club_settings->find('all', array('joins' => array(array('table' => 'club_purchase_accounts', 'type' => 'INNER', 'conditions' => array('club_purchase_accounts.club_setting_id=club_settings.id'))), 'conditions' =>array('AND'=>array( array('club_purchase_accounts.clubuser_id'=>$_SESSION['Auth']['User']['id']),array('club_settings.name'=>'Premium')))));
                //$club_purchase_Pro_accounts = $this->club_settings->find('all', array('joins' => array(array('table' => 'club_purchase_accounts', 'type' => 'INNER', 'conditions' => array('club_purchase_accounts.club_setting_id=club_settings.id'))), 'conditions' =>array('AND'=>array( array('club_purchase_accounts.clubuser_id'=>$_SESSION['Auth']['User']['id']),array('club_settings.name'=>'Pro')))));
                //$club_purchase_Premium_accounts = $this->club_settings->find('all', array('joins' => array(array('table' => 'club_purchase_accounts', 'type' => 'INNER', 'conditions' => array('club_purchase_accounts.club_setting_id=club_settings.id'))),'fields'=>array('200_price','200_total','count(*) as preminum','sum(club_purchase_accounts.accounts) as account'), 'conditions' =>array('AND'=>array( array('club_purchase_accounts.clubuser_id'=>$_SESSION['Auth']['User']['id']),array('club_settings.name'=>'Premium'),array('club_purchase_accounts.payment_status'=>'payed')))));
                $club_purchase_base_accounts = $this->club_settings->find('all', array('joins' => array(array('table' => 'club_purchase_accounts', 'type' => 'INNER', 'conditions' => array('club_purchase_accounts.club_setting_id=club_settings.id'))), 'fields' => array('club_settings.id', 'club_settings.name', 'club_settings.200_price', 'club_settings.300_price', 'club_settings.500_price', 'club_settings.1000_price', 'club_settings.200_total', 'club_settings.300_total', 'club_settings.500_total', 'club_settings.1000_total', 'club_purchase_accounts.accounts'), 'conditions' => array('AND' => array(array('club_purchase_accounts.clubuser_id' => $_SESSION['Auth']['User']['id']), array('club_settings.name' => 'Base')))));
                // $club_member_baseaccounts = $this->club_member_accounts->find('all', array('joins' => array(array('table' => 'club_purchase_accounts', 'type' => 'INNER', 'conditions' => array('club_member_accounts.club_purches_id=club_purchase_accounts.id'))), 'fields' => array('count(*)'), 'conditions' => array('AND' => array(array('club_member_accounts.clubuser_id' => $_SESSION['Auth']['User']['id']), array('club_member_accounts.version' => 'Base'), array('club_member_accounts.status' => 'paid')))));
                $club_member_baseaccounts = $this->club_member_accounts->find('all', array('joins' => array(array('table' => 'club_purchase_accounts', 'type' => 'INNER', 'conditions' => array('club_member_accounts.club_purches_id=club_purchase_accounts.id'))), 'fields' => array('count(*)'), 'conditions' => array('AND' => array(array('club_member_accounts.clubuser_id' => $_SESSION['Auth']['User']['id']), array('club_member_accounts.version' => 'Base')))));
                // print_r($this->getLastQuery('club_member_accounts'));exit;
                // print_r($this->getLastQuery('club_member_accounts'));exit;
                foreach ($club_purchase_base_accounts as $key => $value) {
                    $club_base_id = $value['club_settings']['id'];
                    if (!empty($value['club_purchase_accounts']['accounts'])) {
                        if ($value['club_purchase_accounts']['accounts'] == '200') {
                            $account_basecount += $value['club_purchase_accounts']['accounts'];
                            $account_basetotal += $value['club_settings']['200_total'];
                            $price = $value['club_settings']["200_price"];
                        } else if ($value['club_purchase_accounts']['accounts'] == '300') {
                            $account_basecount += $value['club_purchase_accounts']['accounts'];
                            $account_basetotal += $value['club_settings']['300_total'];
                            $price = $value['club_settings']["300_price"];
                        } else if ($value['club_purchase_accounts']['accounts'] == '500') {
                            $account_basecount += $value['club_purchase_accounts']['accounts'];
                            $account_basetotal += $value['club_settings']['500_total'];
                            $price = $value['club_settings']["500_price"];
                        } else if ($value['club_purchase_accounts']['accounts'] == '1000') {
                            $account_basecount += $value['club_purchase_accounts']['accounts'];
                            $account_basetotal += $value['club_settings']['1000_total'];
                            $price = $value['club_settings']["1000_price"];
                        }
                    }

                }

                // print_r($club_member_baseaccounts);exit;
                $account_basetotal = $account_basetotal - ($price * $club_member_baseaccounts[0][0]['count(*)']);
                $account_basecount = $account_basecount - $club_member_baseaccounts[0][0]['count(*)'];
                $club_purchase_Premium_accounts = $this->club_settings->find('all', array('joins' => array(array('table' => 'club_purchase_accounts', 'type' => 'INNER', 'conditions' => array('club_purchase_accounts.club_setting_id=club_settings.id'))), 'fields' => array('club_settings.id', 'club_settings.name', 'club_settings.200_price', 'club_settings.300_price', 'club_settings.500_price', 'club_settings.1000_price', 'club_settings.200_total', 'club_settings.300_total', 'club_settings.500_total', 'club_settings.1000_total', 'club_purchase_accounts.accounts'), 'conditions' => array('AND' => array(array('club_purchase_accounts.clubuser_id' => $_SESSION['Auth']['User']['id']), array('club_settings.name' => 'Premium')))));
                //$club_member_Premiumaccounts = $this->club_member_accounts->find('all', array('joins' => array(array('table' => 'club_purchase_accounts', 'type' => 'INNER', 'conditions' => array('club_member_accounts.club_purches_id=club_purchase_accounts.id'))), 'fields' => array('count(*)'), 'conditions' => array('AND' => array(array('club_member_accounts.clubuser_id' => $_SESSION['Auth']['User']['id']), array('club_member_accounts.version' => 'Premium'), array('club_member_accounts.status' => 'paid')))));
                $club_member_Premiumaccounts = $this->club_member_accounts->find('all', array('joins' => array(array('table' => 'club_purchase_accounts', 'type' => 'INNER', 'conditions' => array('club_member_accounts.club_purches_id=club_purchase_accounts.id'))), 'fields' => array('count(*)'), 'conditions' => array('AND' => array(array('club_member_accounts.clubuser_id' => $_SESSION['Auth']['User']['id']), array('club_member_accounts.version' => 'Premium')))));
                foreach ($club_purchase_Premium_accounts as $prekey => $prevalue) {

                    $club_pre_id = $prevalue['club_settings']['id'];
                    if (!empty($prevalue['club_purchase_accounts']['accounts'])) {
                        //print_r($prevalue);exit;
                        if ($prevalue['club_purchase_accounts']['accounts'] == '200') {
                            $account_precount += $prevalue['club_purchase_accounts']['accounts'];
                            $account_pretotal += $prevalue['club_settings']['200_total'];
                            $price_p = $prevalue['club_settings']["200_price"];
                        } else if ($prevalue['club_purchase_accounts']['accounts'] == '300') {

                            $account_precount += $prevalue['club_purchase_accounts']['accounts'];
                            $account_pretotal += $prevalue['club_settings']['300_total'];
                            $price_p = $prevalue['club_settings']["300_price"];
                        } else if ($prevalue['club_purchase_accounts']['accounts'] == '500') {
                            $account_precount += $prevalue['club_purchase_accounts']['accounts'];
                            $account_pretotal += $prevalue['club_settings']['500_total'];
                            $price_p = $prevalue['club_settings']["500_price"];
                        } else if ($prevalue['club_purchase_accounts']['accounts'] == '1000') {
                            $account_precount += $prevalue['club_purchase_accounts']['accounts'];
                            $account_pretotal += $prevalue['club_settings']['1000_total'];
                            $price_p = $prevalue['club_settings']["1000_price"];
                        }
                    }
                }
                $account_precount = $account_precount - $club_member_Premiumaccounts[0][0]['count(*)'];
                $account_pretotal = $account_pretotal - ($price_p * $club_member_Premiumaccounts[0][0]['count(*)']);
                //print_r($_SESSION['Auth']['User']['id']);exit;
                $club_purchase_Pro_accounts = $this->club_settings->find('all', array('joins' => array(array('table' => 'club_purchase_accounts', 'type' => 'INNER', 'conditions' => array('club_purchase_accounts.club_setting_id=club_settings.id'))), 'fields' => array('club_settings.id', 'club_settings.name', 'club_settings.200_price', 'club_settings.300_price', 'club_settings.500_price', 'club_settings.1000_price', 'club_settings.200_total', 'club_settings.300_total', 'club_settings.500_total', 'club_settings.1000_total', 'club_purchase_accounts.accounts'), 'conditions' => array('AND' => array(array('club_purchase_accounts.clubuser_id' => $_SESSION['Auth']['User']['id']), array('club_settings.name' => 'Pro')))));
                //$club_member_Proaccounts = $this->club_member_accounts->find('all', array('joins' => array(array('table' => 'club_purchase_accounts', 'type' => 'INNER', 'conditions' => array('club_member_accounts.club_purches_id=club_purchase_accounts.id'))), 'fields' => array('count(*)'), 'conditions' => array('AND' => array(array('club_member_accounts.clubuser_id' => $_SESSION['Auth']['User']['id']), array('club_member_accounts.version' => 'Pro'), array('club_member_accounts.status' => 'paid')))));
                $club_member_Proaccounts = $this->club_member_accounts->find('all', array('joins' => array(array('table' => 'club_purchase_accounts', 'type' => 'INNER', 'conditions' => array('club_member_accounts.club_purches_id=club_purchase_accounts.id'))), 'fields' => array('count(*)'), 'conditions' => array('AND' => array(array('club_member_accounts.clubuser_id' => $_SESSION['Auth']['User']['id']), array('club_member_accounts.version' => 'Pro')))));
                /* calculate basic,primium,pro subscription price and account total */
                foreach ($club_purchase_Pro_accounts as $Prokey => $valuePro) {

                    if (!empty($valuePro['club_purchase_accounts'])) {
                        if ($valuePro['club_purchase_accounts']['accounts'] == '200') {
                            $account_Procount += $valuePro['club_purchase_accounts']['accounts'];
                            $account_Prototal += $valuePro['club_settings']['200_total'];
                            $club_pro_id = $valuePro['club_settings']['id'];
                            $price_pro = $valuePro['club_settings']["200_price"];
                        } else if ($valuePro['club_purchase_accounts']['accounts'] == '300') {
                            $account_Procount += $valuePro['club_purchase_accounts']['accounts'];
                            $account_Prototal += $valuePro['club_settings']['300_total'];
                            $price_pro = $valuePro['club_settings']["300_price"];
                            $club_pro_id = $valuePro['club_settings']['id'];
                        } else if ($valuePro['club_purchase_accounts']['accounts'] == '500') {
                            $account_Procount += $valuePro['club_purchase_accounts']['accounts'];
                            $account_Prototal += $valuePro['club_settings']['500_total'];
                            $price_pro = $valuePro['club_settings']["500_price"];
                            $club_pro_id = $valuePro['club_settings']['id'];
                        } else if ($valuePro['club_purchase_accounts']['accounts'] == '1000') {
                            $account_Procount += $valuePro['club_purchase_accounts']['accounts'];
                            $account_Prototal += $valuePro['club_settings']['1000_total'];
                            $club_pro_id = $valuePro['club_settings']['id'];
                            $price_pro = $valuePro['club_settings']["1000_price"];
                        }
                    }
                }
                /* end calculate basic,primium,pro subscription price and account total */
                $account_Prototal = $account_Prototal - ($price_pro * $club_member_Proaccounts[0][0]['count(*)']);
                $account_Procount = $account_Procount - $club_member_Proaccounts[0][0]['count(*)'];
                // $country_name = $country_option[$result[0]['User']['country_id']];
                $country_name = $result[0]['Country']['name'];

            }
            //print_r($country_name);exit;
            // $payed_status=$this->club_settings->query("SELECT club_settings.`200_price` as 200_cost,club_settings.`300_price` as 300_cost,club_settings.`500_price` as 500_cost,club_settings.`1000_price` as 1000_cost,club_purchase_accounts.`accounts` as account,`status` as status,`payment_status` as `payment_status` FROM `club_settings` inner join club_purchase_accounts on  club_purchase_accounts.`club_setting_id`=club_settings.id  WHERE club_purchase_accounts.`clubuser_id`=".$_SESSION['Auth']['User']['id']." and `status`='not_end' and `club_setting_id`=1 and `disable_accounts`='N' and `payment_status` ='payed' order by club_purchase_accounts.id ASC limit 0,1");
            $memeber = count($result);
            if (!empty($result[0]["User"]["subscription_start_date"]) && $result[0]["User"]["subscription_start_date"] == "0000-00-00") {
                $user_created_status = "created_by_club";
            } else {
                $user_created_status = "created_by_self";
            }
            //if($result[0]["User"]['start)_subscription_date'])
            $this->set(compact('name', 'user_created_status', 'color_current', 'request_status', 'club_membership_requests', 'color', 'bgcolor', 'display_msg', 'user_result', 'user_subscription_name', 'club_trial_subcount', 'club_base_subcount', 'club_prem_subcount', 'club_pro_subcount', 'day_duration_for_trial', 'result', 'club_purchase_base_accounts', 'club_purchase_Premium_accounts', 'club_purchase_Pro_accounts', 'day_duration_for_base', 'day_duration_for_pre', 'day_duration_for_pro', 'country_name', 'club_free_result', 'account_precount', 'account_pretotal', 'account_basecount', 'account_basetotal', 'account_Procount', 'account_Prototal', 'club_base_id', 'club_pre_id', 'club_pro_id'));
        }

        $singleUserTypes = $this->Usertype->getUsertypeListBycondition($Usertypeconditions);
        $this->set(compact('club_id', 'color', 'user_created_status', 'display_msg', 'memeber', 'country_option', 'singleUserTypes', 'themesList', 'weekList', 'zonesList', 'measureList', 'club_purchaseresult', 'club_purchase_base_accounts', 'club_purchase_Premium_accounts', 'club_purchase_Pro_accounts'));
    }


    function check_price()
    {

        $this->layout = 'ajax';
        $this->autoRender = false;
        $this->loadModel('club_settings');
        $this->loadModel('club_purchase_accounts');
        $result_payed = $payed_status = $this->club_settings->query("SELECT club_settings.`200_price` as 200_price,club_settings.`300_price` as 300_price,club_settings.`500_price` as 500_price,club_settings.`1000_price` as 1000_price,club_purchase_accounts.`accounts` as account,`status` as status,`payment_status` as `payment_status` FROM `club_settings` inner join club_purchase_accounts on  club_purchase_accounts.`club_setting_id`=club_settings.id  WHERE club_purchase_accounts.`clubuser_id`=" . $_SESSION['Auth']['User']['id'] . " and `status`='not_end' and `club_setting_id`=" . $this->request->data['club_base_id'] . " and `disable_accounts`='N' and `payment_status` ='payed' order by club_purchase_accounts.id ASC limit 0,1");
        if (!empty($result_payed)) {

            $account = $result_payed[0]['club_purchase_accounts']['account'];
            // print_r($result_payed[0]['club_settings'][$account . '_price'] . ".00");
            // exit;
        } else {

            $result_payed = $payed_status = $this->club_settings->query("SELECT club_settings.`200_price` as 200_price,club_settings.`300_price` as 300_price,club_settings.`500_price` as 500_price,club_settings.`1000_price` as 1000_price,club_purchase_accounts.`accounts` as account,`status` as status,`payment_status` as `payment_status` FROM `club_settings` inner join club_purchase_accounts on  club_purchase_accounts.`club_setting_id`=club_settings.id  WHERE club_purchase_accounts.`clubuser_id`=" . $_SESSION['Auth']['User']['id'] . " and `status`='not_end' and `club_setting_id`=" . $this->request->data['club_base_id'] . " and `disable_accounts`='N' and `payment_status` ='not payed' order by club_purchase_accounts.id ASC limit 0,1");
            $account = $result_payed[0]['club_purchase_accounts']['account'];
            // print_r($result_payed[0]['club_settings'][$account . '_price'] . ".00");
            // exit;
        }

    }

    public function club_member_accounts()
    {

        $this->layout = '';

        $this->loadModel('TempClubMember');
        $this->loadModel('ClubMemberAccount');
        //print_r($this->request->data["account_cost"]);exit;
        $this->loadModel('club_member_accounts');
        $this->loadModel('club_givenaccount_histories');
        $this->loadModel('clubs');
        $this->loadModel('athlete_subscription_histories');
        //$user_info=$this->User->find('all',array('conditions'=>array('User.id'=>$this->request->data['member_user_id'])));
        //comment get club id directly from user session data  $club_id = $this->clubs->find('all', array('conditions' => array('clubs.user_id' => $_SESSION['Auth']['User']['id'])));
        $club_id[0]['clubs']['id'] = $_SESSION['Auth']['Club']['id'];
        $this->request->data['club_id'] = $club_id[0]['clubs']['id'];


        if (empty($this->request->data['randm_key'])) {
            unset($this->request->data['randm_key']);
        }


        /***************add users in club member table if not present in club member table other wise update club meber table*//*check user is memeber of club or not if not then add in create_member table to become member of his club start*/
        $this->loadModel('club_members');
        $this->loadModel('subscription_settings');
        //$club_id = $this->clubs->find('all', array('conditions' => array('clubs.user_id' => $_SESSION['Auth']['User']['id'])));
        $check_club_member = $this->club_members->find('all', array('conditions' => array('club_members.user_id' => $this->request->data['member_user_id'], 'club_members.club_id' => $club_id[0]['clubs']['id'])));
        //print_r($check_club_member);exit;
        $this->request->data['club_id'] = $club_id[0]['clubs']['id'];
        $this->request->data['user_id'] = $this->request->data['member_user_id'];
        $user_info = $this->User->find('all', array('fields' => array('email', 'username', 'password', 'official_clubname'), 'conditions' => array('User.id' => $this->request->data['member_user_id'])));
        $subscription_name = $this->subscription_settings->find('all', array('fields' => array('subscription_name'), 'conditions' => array('subscription_settings.id' => $this->request->data['subscription_setting_id'])));
        $title = "";

        if (!empty($_SESSION['Auth']['Club']['clubtype_id'])) {
            $clubtype_title = $this->clubtypes->find('all', array('fields' => array('title'), 'conditions' => array('clubtypes.id' => $_SESSION['Auth']['Club']['clubtype_id'])));
            $title = $clubtype_title[0]['clubtypes']['title'];
        }

        $this->loadModel('temp_club_member_types');
        $temp_club_member_types = $this->temp_club_member_types->find('all', array('conditions' => array('temp_club_member_types.member_user_id' => $this->request->data['member_user_id'], 'temp_club_member_types.club_id' => $club_id[0]['clubs']['id'])));
        /************************* add function give by s-admin when member is created in table users_subscriptionsettings_types and User_activated_function***************** */

        $this->loadmodel('users_subscriptionsettings_types');
        $this->loadmodel('User_activated_function');
        $check_users_subscriptionsettings_types = $this->users_subscriptionsettings_types->find('all', array("user_id" => $this->request->data['member_user_id']));
        $check_User_activated_function = $this->User_activated_function->find('all', array("user_id" => $this->request->data['member_user_id']));
        $sub_id = $this->request->data["subscription_setting_id"];
        $this->loadmodel('function_permissions');
        $Socialdetails = $this->function_permissions->find('list', array('conditions' => array('function_permissions.subscription_setting_id' => $sub_id, 'function_permissions.display' => 'Y'), 'fields' => array('id')));
        $socialIds = implode(',', $Socialdetails);
        $this->loadmodel('function_training_permissions');
        $Trainingdetails = $this->function_training_permissions->find('list', array('conditions' => array('function_training_permissions.subscription_setting_id' => $sub_id, 'function_training_permissions.display' => 'Y'), 'fields' => array('id')));
        $trainingIds = implode(',', $Trainingdetails);
        $this->loadmodel('subscription_settings');
        $Subdetails = $this->subscription_settings->find('all', array('conditions' => array('subscription_settings.id' => $sub_id), 'fields' => array('selected_type', 'days_duration')));


        //print_r($Subdetails[0]['subscription_settings']);exit;
        $subdays = $Subdetails[0]['subscription_settings']['days_duration'];

        if ($this->request->data["role_id"] == '8') {

            $subType = $Subdetails[0]['subscription_settings']['selected_type'];
            $this->loadmodel('management_infos');

            //$mangInfo = $this->management_infos->find('list', array('conditions' => array($subType => 'Y','include_in_version'=>'Y')), array('fields' => array('id')));
            $add_uro_usd = $this->management_infos->find('all', array('fields' => array('id', 'year_plan', 'no_limit_plan'), 'conditions' => array($subType => 'Y', 'include_in_version' => 'Y')), array('fields' => array('id')));
            // $mangInfo=array();
            //print_r($mangInfo); echo "<br>";
            foreach ($add_uro_usd as $key => $value) {
                if ($value['management_infos']['no_limit_plan'] == 0 || $value['management_infos']['no_limit_plan'] == '') {
                    $USD = 0;
                } else {
                    $USD = $value['management_infos']['no_limit_plan'];
                }
                if ($value['management_infos']['year_plan'] == 0 || $value['management_infos']['year_plan'] == '') {
                    $EUR = 0;
                } else {
                    $EUR = $value['management_infos']['year_plan'];
                }
                $mangInfo[$value['management_infos']['id']] = $value['management_infos']['id'] . "#no_limit_plan-" . $USD . "#year_plan-" . $EUR;
            }
            $managementIds = implode(',', $mangInfo);
            if (!empty($_SESSION['manegment_info']) && !empty($managementIds)) {
                $managementIds .= "," . $_SESSION['manegment_info'];
            } else if (!empty($_SESSION['manegment_info'])) {
                $managementIds = $_SESSION['manegment_info'];
            }
            //add free accounts in table here
            /////////
        } else {

            $managementIds = '';
        }


        $this->loadmodel('subscription_settings_types');
        $SubTypedetails = $this->subscription_settings_types->find('all', array('conditions' => array('subscription_settings_types.subs_settings_id' => $sub_id)));
        $clubs_trial_duration = $SubTypedetails[0]['subscription_settings_types']['clubs_trial_duration'];
        $clubs_base_duration = $SubTypedetails[0]['subscription_settings_types']['clubs_base_duration'];
        $clubs_premium_duration = $SubTypedetails[0]['subscription_settings_types']['clubs_premium_duration'];
        $clubs_pro_duration = $SubTypedetails[0]['subscription_settings_types']['clubs_pro_duration'];
        unset($SubTypedetails[0]['subscription_settings_types']['id']);
        unset($SubTypedetails[0]['subscription_settings_types']['display']);
        $subTypeDetailAll = $SubTypedetails[0]['subscription_settings_types'];
        $subTypeDetailAll['user_id'] = $this->request->data['member_user_id'];
        //print_r($subdays);exit;
        $subTypeDetailAll['trial_duration'] = $subdays;
        $subTypeDetailAll['base_duration'] = $subdays;
        $subTypeDetailAll['premium_duration'] = $subdays;
        $subTypeDetailAll['pro_duration'] = $subdays;
        $subTypeDetailAll['clubs_trial_duration'] = $clubs_trial_duration;
        $subTypeDetailAll['clubs_base_duration'] = $clubs_base_duration;
        $subTypeDetailAll['clubs_premium_duration'] = $clubs_premium_duration;
        $subTypeDetailAll['clubs_pro_duration'] = $clubs_pro_duration;
        if (empty($check_users_subscriptionsettings_types)) {
            $this->users_subscriptionsettings_types->create();
            $this->users_subscriptionsettings_types->save($subTypeDetailAll);
            $sbType_id = $this->users_subscriptionsettings_types->getLastInsertId();
        } else {

            $this->users_subscriptionsettings_types->id = $check_users_subscriptionsettings_types[0]["users_subscriptionsettings_types"]["id"];
            $this->users_subscriptionsettings_types->save($subTypeDetailAll);
            $sbType_id = $check_users_subscriptionsettings_types[0]["users_subscriptionsettings_types"]["id"];
        }
        $savedt['user_id'] = $this->request->data['member_user_id'];
        $savedt['users_subscriptionsettings_type_id'] = $sbType_id;
        $savedt['function_permission_id'] = $socialIds;
        $savedt['function_training_permission_id'] = $trainingIds;
        $savedt['management_info_id'] = $managementIds;
        $this->loadmodel('buyed_optional_modules');


        if (empty($check_User_activated_function)) {

            $this->User_activated_function->create();
            $this->User_activated_function->save($savedt);

        } else {

            $this->User_activated_function->id = $check_User_activated_function[0]["User_activated_function"]["id"];
            $this->User_activated_function->save($savedt);

        }
        /*************************end add function give by s-admin when member is created ******************/

        if (!empty($check_club_member)) {

            $this->request->data['membership_status'] = "Accept";
            $this->club_members->id = $check_club_member[0]['club_members']['id'];
            $this->club_members->save($this->request->data);
            $this->loadModel("club_membership_requests");
            $ClubMembershipRequestsID = $this->club_membership_requests->find('all', array('fields' => array('id'), 'conditions' => array('club_membership_requests.user_id' => $this->request->data['member_user_id'], 'club_membership_requests.club_id' => $club_id[0]['clubs']['id'])));
            $this->request->data['status'] = "accepted";
            $this->club_membership_requests->id = $ClubMembershipRequestsID[0]['club_membership_requests']['id'];
            $this->club_membership_requests->save($this->request->data);
            $this->request->data['club_member_id'] = $check_club_member[0]['club_members']['id'];//add member id

            /****************send email to club member**********************************************************/

            $to = trim($user_info[0]['User']['email']);
            $data_stored['user_name'] = $user_info[0]['User']['username'];
            $data_stored['version_name'] = $subscription_name[0]['subscription_settings']['subscription_name'];
            $data_stored['subscription_start_date'] = $this->request->data['subscription_start_date'];
            $data_stored['subscription_end_date'] = $this->request->data['subscription_end_date'];
            $data_stored['account_cost'] = $this->request->data['account_cost'];
            $data_stored['currency_code'] = $this->request->data['currency_code'];
            $data_stored['account_cost'] = $this->request->data['account_cost'];
            $data_stored['clubtype_name'] = $title;
            $data_stored['email'] = $user_info[0]['User']['email'];
            $data_stored['club_name'] = $_SESSION['Auth']['User']['username'];
            $data_stored['country_name'] = $_SESSION["Auth"]["User"]["Country"]["name"];
            $Email = new CakeEmail('default');
            $Email->config('default');
            $Email->from(array('sheetal@datalogysoftware.com' => 'MovesBook'))
                ->to($to)
                ->subject('create account')
                ->emailFormat('html')
                ->template('assing_account_email')
                ->viewVars(array('ms' => $data_stored));
            $Email->send();

            /****************send email to club member*************************************************/
        } else {


            $this->loadModel('temp_club_member_types');
            $temp_club_member_types = $this->temp_club_member_types->find(
                'all', array(
                'conditions' => array(
                    'temp_club_member_types.member_user_id' => $this->request->data['member_user_id'],
                    'temp_club_member_types.club_id' => $club_id[0]['clubs']['id']
                )
            ));

            if (!empty($temp_club_member_types)) {

                $this->request->data['member_type_id'] = $temp_club_member_types[0]['temp_club_member_types']['member_type_id'];
                $this->temp_club_member_types->id = $temp_club_member_types[0]['temp_club_member_types']['id'];
                $this->temp_club_member_types->delete();

            } else {

                $this->club_members->data['club_members']['member_type_id'] = 0;
            }

            $datasave['club_membership_requests']['request_from'] = "club";
            $datasave['club_membership_requests']['club_id'] = $this->Session->read('Auth.Club.id');
            $datasave['club_membership_requests']['user_id'] = $this->request->data['member_user_id'];
            $this->loadModel('club_membership_requests');
            $club_membership_requests = $this->club_membership_requests->find('all', array('fields' => array('id'), 'conditions' => array('club_id' => $_SESSION["Auth"]["Club"]["id"], 'user_id' => $this->request->data['member_user_id'])));
            if (empty($club_membership_requests)) {

                $this->club_membership_requests->save($datasave);
                //$this->club_members->create();
                $this->TempClubMember->save($this->request->data);
            }
            //$this->club_members->save($this->request->data);
            //$this->request->data['club_member_id'] = $this->temp_club_members->getLastInsertID();
            $this->request->data['club_member_id'] = $user_info[0]['User']['id'];
            /***********send this email when assing account by member***********/
            $this->loadModel("subscription_settings");
            $this->loadModel("clubtypes");
            $passwrod_auto = $this->getUniquePatten('8');
            // $update_password['password']=$passwrod_auto;
            if (empty($user_info[0]['User']['password'])) {
                $this->request->data['password'] = $passwrod_auto; // auto generate password if club admin select auto generation password.
            } else {
                $this->request->data['password'] = $user_info[0]['User']['password']; //user  generate password  generation password.//
            }

            $this->request->data['verification_status'] = "T";
            // $update_password['subscription_setting_id']=$this->request->data['subscription_setting_id'];
            //$update_password['subscription_start_date']=$this->request->data['subscription_start_date'];
            //$update_password['subscription_end_date']=$this->request->data['subscription_end_date'];
            //==========UniqueReferenceID Generate Start=========================//
            $alphabets = range('A', 'Z');
            $numbers = range('0', '9');
            $additional_characters = array('_', '.');
            $final_array = array_merge($alphabets, $numbers, $additional_characters);
            $uniqueReferenceID = '';
            $length = 20;
            while ($length--) {
                $key = array_rand($final_array);
                $uniqueReferenceID .= $final_array[$key];
            }

            // echo $uniqueReferenceID;echo'<br/>';
            $senduniqueID = $uniqueReferenceID;
            $unique_verification = Security::hash($uniqueReferenceID, 'md5', true);
            //==========UniqueReferenceID Generate Stop=========================//
            $this->request->data['unique_verification'] = $unique_verification;
            $user_email = $user_info[0]['User']['email'];
            $data_stored['user_name'] = $user_info[0]['User']['username'];
            $session_id = $this->Session->read('Auth.User.id');
            //$encoded = urlencode(base64_encode($this->TempClubMember->getLastInsertId()));
            //$encode = "";


            $encoded1 = $this->TempClubMember->query("SELECT * FROM temp_club_members ORDER BY id DESC LIMIT 1");

            $encoded = urlencode(base64_encode($encoded1['TempClubMember']['id']));
            $data_stored['verification_link'] = SITE_BASE_URL . $this->webroot . 'users/verify/' . $senduniqueID . "/" . $encoded;
            $data_stored['version_name'] = $subscription_name[0]['subscription_settings']['subscription_name'];
            //$data_stored['subscription_start_date'] = $this->request->data['subscription_start_date'];
            $data_stored['subscription_end_date'] = $this->request->data['subscription_end_date'];
            //if($this->request->data['account_cost']=="paid"){
            $data_stored['account_cost'] = $this->request->data['account_cost'];
            $data_stored['currency_code'] = $this->request->data['currency_code'];
            $data_stored['account_cost'] = $this->request->data['account_cost'];
            $data_stored['country_name'] = $_SESSION["Auth"]["User"]["Country"]["name"];
            $data_stored['clubtype_name'] = $title;
            $data_stored['username'] = $user_info[0]['User']['username'];
            $data_stored['email'] = $user_info[0]['User']['email'];
            $data_stored['password'] = $passwrod_auto;
            $data_stored['club_name'] = $_SESSION['Auth']['User']['username'];
            $data_stored['club_first_name'] = $_SESSION['Auth']['User']['firstname'];
            $data_stored['country_name'] = $_SESSION['Auth']['User']['Country']['name'];
            $data_stored['official_clubname'] = $user_info[0]['User']['official_clubname'];
            $data_stored['locality'] = $_SESSION["Auth"]["User"]['State']['name'];
            $to = $user_email;
            $Email = new CakeEmail('smtp');
            $commonMethods = new CommonfunctionComponent();

            $Email->from(array($commonMethods->authorEmail() => 'MovesBook'))
                ->viewVars(array('ms' => $data_stored))
                ->template('club_create_memberaccount')
                ->to($to)
                ->subject('create account')
                ->emailFormat('html');
            $Email->send();


            /***********send this email when assing account by member***********/
        }


        /* end  check user is memeber of club or not if not then add in create_member table to become member of his club start */
        /* add account to club_member_accout to give account to create member */
        $this->request->data['clubuser_id'] = $_SESSION['Auth']['User']['id'];

        if (empty($this->request->data["club_purches_id"])) {
            $this->request->data["club_purches_id"] = '0';
        }


        if ($this->ClubMemberAccount->save($this->request->data)) {

            $lat_clubMember_accounts_id = $this->ClubMemberAccount->getLastInsertID();

            $this->User->id = $this->request->data['member_user_id'];
            if ($this->request->data["user_created_status"] == "created_by_self") {
                unset($this->request->data["password"]);
            }
            unset($this->request->data['subscription_start_date']);

            $this->User->save($this->request->data);
            //$this->User->id=$this->request->data['member_user_id'];
            //$this->User->save($this->request->data);
            //-----check user type---------//
            $this->request->data['user_role_id'] = $this->request->data['role_id'];
            $this->request->data['club_member_account_id'] = $lat_clubMember_accounts_id;
            if ($this->request->data['role_id'] == 5) {

                $this->athlete_subscription_histories->create();
                $this->athlete_subscription_histories->save($this->request->data);
                $this->request->data['club_subscription_history_id'] = $this->athlete_subscription_histories->getLastInsertID();

            } else if ($this->request->data['role_id'] == 8) {

                $this->loadModel('club_subscription_histories');
                $this->club_subscription_histories->create();
                $this->club_subscription_histories->save($this->request->data);
                $last_id = $this->club_subscription_histories->getLastInsertID();
                $this->request->data['club_subscription_history_id'] = $last_id;

            } else if ($this->request->data['role_id'] == 6) {

                $this->loadModel('coach_subscription_histories');
                $this->coach_subscription_histories->create();
                $this->coach_subscription_histories->save($this->request->data);
                $last_id = $this->coach_subscription_histories->getLastInsertID();
                $this->request->data['club_subscription_history_id'] = $last_id;

            } else if ($this->request->data['role_id'] == 7) {

                $this->loadModel('team_subscription_histories');
                $this->team_subscription_histories->create();
                $this->team_subscription_histories->save($this->request->data);
                $last_id = $this->team_subscription_histories->getLastInsertID();
                $this->request->data['club_subscription_history_id'] = $last_id;

            }


            $this->request->data['user_id'] = $this->request->data['member_user_id'];
            $this->request->data['club_subscription_id'] = $club_id;
            //$this->club_givenaccount_histories->create();
            $this->club_givenaccount_histories->save($this->request->data);
            /******************end add data to user subscription type table********/
            echo "1";
            exit;


        } else {

            echo "0";
            exit;
        }
        /* end add account to club_member_accout to give account to create member */
    }

    public function create_club_member()
    {

        $this->layout = 'club_clubtab';
        $this->loadModel('countries');
        $this->loadModel('Usertype');
        $this->loadModel('measures');
        $this->loadModel('zones');
        $this->loadModel('weeks');
        $this->loadModel('themes');
        $this->loadModel('countries');
        $this->loadModel('club_free_purches_accounts');
        $this->loadModel('club_purchase_accounts');
        $this->loadModel('club_settings');
        $this->loadModel('ClubSettingMembertype');
        $this->loadModel('ClubSettingProfession');
        $country_option = $this->countries->find('list', array('fields' => array('id', 'name')));
        $country_currency1 = $this->countries->find('all', array('fields' => array('currency'), 'conditions' => array('id' => $_SESSION['Auth']['User']['country_id'])));
        $country_currency = $country_currency1[0]['countries']['currency'];
        $this->set(compact("country_currency", $country_currency));
        $zonesList = $this->zones->find('list', array('fields' => array('id', 'zone_name'), 'order' => 'zone_name ASC'));
        $measureList = $this->measures->find('list', array('fields' => array('id', 'measure_unit')));
        $weekList = $this->weeks->find('list', array('fields' => array('id', 'week_name')));
        //$themesList = $this->themes->find('list', array('fields' => array('id', 'theme_name')));
        $themesList = $this->themes->find('all', array('fields' => array('id', 'theme_name', 'theme_type', 'theme_img')));
        $singleUserTypes = $this->Usertype->find('list', array('conditions' => array('Usertype.role_id' => 5)));
        $this->set(compact('club_id', 'color', 'display_msg', 'memeber', 'country_option', 'singleUserTypes', 'themesList', 'weekList', 'zonesList', 'measureList', 'club_purchaseresult', 'club_purchase_base_accounts', 'club_purchase_Premium_accounts', 'club_purchase_Pro_accounts'));
        //$profession = $this->ClubSettingProfession->find('list', array('fields' => array('id', 'profession')));
        $profession = $this->ClubSettingProfession->getProfessionFunctionList($this->Session->read('Auth.User.id'));
        $this->set(compact('profession'));
        $member_type = $this->ClubSettingMembertype->find('list', array('fields' => array('id', 'member_type_name')));
        $this->set(compact('member_type'));


    }

    public function register($clubMember = null, $clubMemberExpiredStatus = null)
    {

        if (!empty($this->request->data['Athlete']['dob'])) {

            $date = explode("-", $this->request->data['Athlete']['dob']);
            $new_date = $date[2] . "-" . $date['1'] . "-" . $date[0];
            $this->request->data['Athlete']['dob'] = $new_date;
        }
        $this->User->unbindModel(
            array('hasMany' => array('Operator'))
        );
        $this->User->unbindModel(
            array('hasMany' => array('Post'))
        );

        if ($this->request->is('post')) {


            $this->unbindUserSocialBanner();
            $this->loadModel('Album');
            $this->loadModel('Music_playlist');
            $this->loadModel('Athlete');
            $emailVal = $this->User->find('count', array('conditions' => array('email' => $this->request->data['User']['email'])));
            $this->unbindUserSocialBanner();
            $username = $this->User->find('count', array('conditions' => array('username' => $this->request->data['User']['username'])));
            if ($emailVal == 0 && $username == 0) {

                $_SESSION['search_created_user'] = $this->request->data['User']['username'];
                $this->User->create();
                $this->request->data['User']['step_status'] = 1;
                $this->request->data['User']['payment_status'] = 'T';
                if ($this->request->data['User']['image']['name'] != '') {

                    $FileName = $this->request->data['User']['image']['name'];
                    $NewFileName = time();
                    $pos = strrpos($FileName, '.');
                    $extension = substr($FileName, $pos);
                    $NewFileName = $NewFileName . $extension;
                    $path = WWW_ROOT . 'img\profile_images\\';
                    $destination = WWW_ROOT . 'img\profile_images\\' . $NewFileName;
                    if (move_uploaded_file($this->request->data['User']['image']['tmp_name'], $destination)) {
                        // print_r($destination);exit;
                        $this->request->data['User']['image'] = $NewFileName;
                    }

                    //print_r($NewFileName);exit;
                } else {

                    $this->request->data['User']['image'] = '';
                }
                if (empty($this->request->data['User']['password'])) {
                    $this->request->data['User']['password']=$this->getUniquePatten('8');
                    // unset($this->request->data['User']['password']);
                }

                if ($this->User->save($this->request->data)) {
                    $last_inset_id = $this->User->getLastInsertId();
                    $this->request->data['temp_club_member_types']['club_id'] = $_SESSION['Auth']['Club']['id'];
                    $this->request->data['temp_club_member_types']['member_user_id'] = $last_inset_id;
                    $this->request->data['temp_club_member_types']['member_type_id'] = $this->request->data['User']['clubSetting_memberType_id'];
                    $this->loadModel('temp_club_member_types');
                    $this->temp_club_member_types->save($this->request->data);
                    $this->loadModel('clubs');
                    unset($this->request->data['club_id']);
                    unset($this->request->data['user_id']);
                    unset($this->request->data['member_type']);
                    $userid = $this->User->id;
                    $foldername = 'User_' . $userid;
                    //Photo album folder start
                    new Folder(WWW_ROOT . 'files/albums' . DS . $foldername, true);
                    new Folder(WWW_ROOT . 'files/albums/' . $foldername . DS . single_photos, true); //For save single photo
                    //$this->loadmodel('Album');
                    $this->request->data['single_photo_album_add']['user_id'] = $userid;
                    $this->request->data['single_photo_album_add']['album_name'] = 'single_photos';
                    $this->request->data['single_photo_album_add']['single_photo_album'] = 'Y';
                    $this->Album->save($this->request->data['single_photo_album_add']);
                    //Photo Album folder end
                    //music Playlist Folder start
                    new Folder(WWW_ROOT . 'files/playlist' . DS . $foldername, true);
                    new Folder(WWW_ROOT . 'files/playlist/' . $foldername . DS . single_music, true); //For save single song
                    $this->loadmodel('Music_playlist');
                    $this->request->data['single_music_add']['user_id'] = $userid;
                    $this->request->data['single_music_add']['playlist_name'] = 'single_music';
                    $this->request->data['single_music_add']['single_music_playlist'] = 'Y';
                    $this->Music_playlist->save($this->request->data['single_music_add']);
                    //music Playlist Folder End
                    if ($this->request->data['User']['role_id'] == 5) {

                        if (empty($this->request->data['Athlete']['dob'])) {
                            unset($this->request->data['Athlete']['dob']);
                        }

                        $this->request->data['Athlete']['user_id'] = $userid;
                        $this->request->data['Athlete']['country_id'] = $this->request->data['User']['country_id'];
                        $this->Athlete->save($this->request->data['Athlete']);
                        $encrypt_userid = $this->cryptUrl($userid);
                        $encrypt_roleid = $this->cryptUrl($this->request->data['User']['role_id']);
                        // return $this->redirect(array('action' => 'single_user_profile'));
                        /*
                         * *******************************
                         * Edited for adding or renew
                         * member of club
                         * date 30/8/2014
                         * ******************************
                         */
                        if ($clubMember != null && $clubMemberExpiredStatus == 'new') {
                            return $this->redirect(array('controller' => 'users', 'action' => 'add_member_in_club', $encrypt_userid, $clubMemberExpiredStatus));
                        }
                        /*
                         * *****************************
                         * End
                         * *****************************
                         */
                        //echo'NOOOOOOOOOOOOOO';exit;
                        $data_stored = array();
                        $user_email = $this->request->data['User']['email'];
                        $data_stored['user_name'] = $this->request->data['User']['username'];
                        $data_stored['email'] = $this->request->data['User']['email'];
                        $data_stored['password'] = $this->request->data['User']['password'];
                        $data_stored['club_name'] = $_SESSION['Auth']['User']['username'];
                        $to = $user_email;
                        /*                         * *********send this email when assing account by member********** */
                        //                        $Email = new CakeEmail('default');
                        //                        $Email->config('default');
                        //                        $Email->from(array('swapnilb@datalogysoftware.com' => 'MovesBook'))
                        //                                ->to($to)
                        //                                ->subject('create account')
                        //                                ->emailFormat('html')
                        //                                ->template('club_create_memberaccount')
                        //                                ->viewVars(array('ms' => $data_stored));
                        //                        $Email->send();
                        /*                         * *********send this email when assing account by member********** */
                        $this->Session->setFlash(__('Record inserted successfully'));
                        return $this->redirect(array('controller' => 'clubs', 'action' => 'new_member_otherdetails', $last_inset_id));
                        //return $this->redirect(array('action' => 'create_member'));
                        //
                        //return $this->redirect(array('action' => 'single_user_package', $encrypt_roleid, $encrypt_userid, '0'));
                    } elseif ($this->request->data['User']['role_id'] == 6) {
                        $this->request->data['Coach']['user_id'] = $userid;
                        $this->request->data['Coach']['country_id'] = $this->request->data['User']['country_id'];
                        $this->Coach->save($this->request->data['Coach']);
                    } elseif ($this->request->data['User']['role_id'] == 7) {
                        $this->request->data['Team']['user_id'] = $userid;
                        $this->request->data['Team']['country_id'] = $this->request->data['User']['country_id'];
                        $this->Team->save($this->request->data['Team']);
                    } elseif ($this->request->data['User']['role_id'] == 8) {
                        $this->request->data['Club']['user_id'] = $userid;
                        $this->request->data['Club']['country_id'] = $this->request->data['User']['country_id'];
                        $this->Club->save($this->request->data['Club']);
                    }
                    $encrypt_userid = $this->cryptUrl($userid);
                    $encrypt_roleid = $this->cryptUrl($this->request->data['User']['role_id']);
                    //$this->Session->setFlash(__('The user has been saved.'));
                    //echo'999999999999999';exit;
                    $data_stored = array();
                    $user_email = $this->request->data['User']['email'];
                    $data_stored['user_name'] = $this->request->data['User']['username'];
                    $data_stored['email'] = $this->request->data['User']['email'];
                    $data_stored['password'] = $this->request->data['User']['password'];
                    $data_stored['club_name'] = $_SESSION['Auth']['User']['username'];
                    $data_stored['club_first_name'] = $_SESSION['Auth']['User']['firstname'] . ' ' . $_SESSION['Auth']['User']['lastname'];
                    $data_stored['country_name'] = $_SESSION['Auth']['User']['Country']["name"];
                    $to = $user_email;

                    $Email = new CakeEmail('smtp');
                    $Email->from(array('swapnilb@datalogysoftware.com' => 'MovesBook'))
                        ->viewVars(array('ms' => $data_stored))
                        ->template('club_create_memberaccount')
                        ->to($to)
                        ->subject('create account')
                        ->emailFormat('html');
                    if ($Email->send($data_stored)) {

                    }
                    $this->Session->setFlash(__('Record inserted successfully'));
                    //Before user redirect on this page  return $this->redirect(array('action' => 'create_member', $encrypt_roleid, $encrypt_userid, '0'));
                    return $this->redirect(array('controller' => 'clubs', 'action' => 'new_member_otherdetails', $encrypt_roleid, $encrypt_userid, '0'));
                    //return $this->redirect(array('action' => 'user_after_registration'));
                } /* else {
                $this->request->data['User']="";
                return $this->redirect(array('action' =>'index'));
                $this->Session->setFlash(__('The user could not be saved. Please, try again.'));
                } */
            } else {

                $this->request->data['User'] = "";
                $this->Session->setFlash(__('Username or Email already exists, Please try again.'));
                return $this->redirect(array('action' => 'create_member'));
            }
        }

        //$countries = $this->Country->find('list');
        $countries = $this->countries->find('list');
        $zonesList = $this->zones->find('list', array('fields' => array('id', 'zone_name'), 'order' => 'zone_name ASC'));
        $singleUserTypes = $this->Usertype->find('list', array('conditions' => array('Usertype.role_id' => 5)));
        $coachUserTypes = $this->Usertype->find('list', array('conditions' => array('Usertype.role_id' => 6)));
        $teamUserTypes = $this->Teamtype->find('list');
        $clubUserTypes = $this->Clubtype->find('list');
        $this->loadModel('vip_types');
        $vipList = $this->vip_types->find('list');
        $this->set(compact('countries', 'singleUserTypes', 'coachUserTypes', 'teamUserTypes', 'clubUserTypes', 'vipList', 'zonesList'));
    }

    public function get_state()
    {

        $this->layout = '';
        $this->autoRender = true;
        $this->loadModel('states');
        $result_state = $this->states->find('list', array('conditions' => array('states.country_id' => $this->request->data['id'])));
        $this->set(compact('result_state'));
    }

    public function assign_new_account()
    {
        $this->layout = 'club_clubtab';
    }

    public function summary_overview()
    {


        $this->layout = 'club_clubtab';
        $this->loadModel('club_free_purches_accounts');
        $this->loadModel('club_purchase_accounts');
        $this->loadModel('club_settings');
        $this->loadModel('subscription_setting');
        $club_purchaseresult = array();
        $club_free_result = array();
        $club_purchase_base_accounts = array();
        $club_purchase_Premium_accounts = array();
        $club_purchase_Pro_accounts = array();
        $account_precount = '';
        $account_pretotal = '';
        $account_basecount = '';
        $account_basetotal = '';
        $account_Procount = '';
        $account_Prototal = '';
        $Provalue = array();
        $club_pre_id = '';
        $club_base_id = '';
        $club_pro_id = '';
        $club_purchase_Pro_accounts = array();
        $club_purchase_Premium_accounts = array();
        $this->loadModel('subscription_settings');
        $this->loadModel('club_member_accounts');
        $price = "0";
        $price_p = "0";
        $price_pro = "0";
        $day_duration_for_trial = $this->subscription_settings->find('all', array('fieds' => array('subscription_settings.id', 'subscription_settings.subscription_name', 'subscription_settings.days_duration'), 'conditions' => array('subscription_settings.subscription_name' => 'Trial Base')));
        $day_duration_for_base = $this->subscription_settings->find('all', array('fieds' => array('subscription_settings.id', 'subscription_settings.subscription_name', 'subscription_settings.days_duration'), 'conditions' => array('subscription_settings.subscription_name' => 'User- base version')));
        $day_duration_for_pre = $this->subscription_settings->find('all', array('fieds' => array('subscription_settings.id', 'subscription_settings.subscription_name', 'subscription_settings.days_duration'), 'conditions' => array('subscription_settings.subscription_name' => 'User- premium')));
        $day_duration_for_pro = $this->subscription_settings->find('all', array('fieds' => array('subscription_settings.id', 'subscription_settings.subscription_name', 'subscription_settings.days_duration'), 'conditions' => array('subscription_settings.subscription_name' => 'User- professional')));
        $club_free_purches_accounts = $this->club_free_purches_accounts->find('all', array('conditions' => array('club_free_purches_accounts.user_id' => $_SESSION['Auth']['User']['id'])));


        $club_free_trialcount_accounts = $this->club_member_accounts->find('all', array('fields' => array('count(*)'), 'conditions' => array('AND' => array(array('club_member_accounts.clubuser_id' => $_SESSION['Auth']['User']['id']), array('club_member_accounts.version' => "Trial Base")))));
        $club_trial_subcount = $club_free_trialcount_accounts[0][0]['count(*)'];
        $club_free_basecount_accounts = $this->club_member_accounts->find('all', array('fields' => array('count(*)'), 'conditions' => array('AND' => array(array('club_member_accounts.clubuser_id' => $_SESSION['Auth']['User']['id']), array('club_member_accounts.version' => "User- base version")))));
        $club_base_subcount = $club_free_basecount_accounts[0][0]['count(*)'];
        $club_free_premcount_accounts = $this->club_member_accounts->find('all', array('fields' => array('count(*)'), 'conditions' => array('AND' => array(array('club_member_accounts.clubuser_id' => $_SESSION['Auth']['User']['id']), array('club_member_accounts.version' => "User- premium")))));
        $club_prem_subcount = $club_free_premcount_accounts[0][0]['count(*)'];
        $club_free_procount_accounts = $this->club_member_accounts->find('all', array('fields' => array('count(*)'), 'conditions' => array('AND' => array(array('club_member_accounts.clubuser_id' => $_SESSION['Auth']['User']['id']), array('club_member_accounts.version' => "User- professional")))));
        $club_pro_subcount = $club_free_procount_accounts[0][0]['count(*)'];
        $club_free_result = isset($club_free_purches_accounts[0]) ? $club_free_purches_accounts[0] : '';
        $club_purchase_base_accounts = $this->club_settings->find('all', array('joins' => array(array('table' => 'club_purchase_accounts', 'type' => 'INNER', 'conditions' => array('club_purchase_accounts.club_setting_id=club_settings.id'))), 'fields' => array('club_settings.id', 'club_settings.name', 'club_settings.200_price', 'club_settings.300_price', 'club_settings.500_price', 'club_settings.1000_price', 'club_settings.200_total', 'club_settings.300_total', 'club_settings.500_total', 'club_settings.1000_total', 'club_purchase_accounts.accounts'), 'conditions' => array('AND' => array(array('club_purchase_accounts.clubuser_id' => $_SESSION['Auth']['User']['id']), array('club_settings.name' => 'Base')))));
        $club_member_baseaccounts = $this->club_member_accounts->find('all', array('joins' => array(array('table' => 'club_purchase_accounts', 'type' => 'INNER', 'conditions' => array('club_member_accounts.club_purches_id=club_purchase_accounts.id'))), 'fields' => array('count(*)'), 'conditions' => array('AND' => array(array('club_member_accounts.clubuser_id' => $_SESSION['Auth']['User']['id']), array('club_member_accounts.version' => 'Base'), array('club_member_accounts.status' => 'paid')))));

        foreach ($club_purchase_base_accounts as $key => $value) {


            $club_base_id = $value['club_settings']['id'];

            if (!empty($value['club_purchase_accounts']['accounts'])) {
                if ($value['club_purchase_accounts']['accounts'] == '200') {
                    $account_basecount += $value['club_purchase_accounts']['accounts'];
                    $account_basetotal += $value['club_settings']['200_total'];
                    $price = $value['club_settings']["200_price"];
                } else if ($value['club_purchase_accounts']['accounts'] == '300') {
                    $account_basecount += $value['club_purchase_accounts']['accounts'];
                    $account_basetotal += $value['club_settings']['300_total'];
                    $price = $value['club_settings']["300_price"];
                } else if ($value['club_purchase_accounts']['accounts'] == '500') {
                    $account_basecount += $value['club_purchase_accounts']['accounts'];
                    $account_basetotal += $value['club_settings']['500_total'];
                    $price = $value['club_settings']["500_price"];
                } else if ($value['club_purchase_accounts']['accounts'] == '1000') {
                    $account_basecount += $value['club_purchase_accounts']['accounts'];
                    $account_basetotal += $value['club_settings']['1000_total'];
                    $price = $value['club_settings']["1000_price"];
                }
            }
        }

        $account_basetotal = $account_basetotal - ($price * $club_member_baseaccounts[0][0]['count(*)']);
        $account_basecount = $account_basecount - $club_member_baseaccounts[0][0]['count(*)'];
        $club_purchase_Premium_accounts = $this->club_settings->find('all', array('joins' => array(array('table' => 'club_purchase_accounts', 'type' => 'INNER', 'conditions' => array('club_purchase_accounts.club_setting_id=club_settings.id'))), 'fields' => array('club_settings.id', 'club_settings.name', 'club_settings.200_price', 'club_settings.300_price', 'club_settings.500_price', 'club_settings.1000_price', 'club_settings.200_total', 'club_settings.300_total', 'club_settings.500_total', 'club_settings.1000_total', 'club_purchase_accounts.accounts'), 'conditions' => array('AND' => array(array('club_purchase_accounts.clubuser_id' => $_SESSION['Auth']['User']['id']), array('club_settings.name' => 'Premium')))));
        $club_member_Premiumaccounts = $this->club_member_accounts->find('all', array('joins' => array(array('table' => 'club_purchase_accounts', 'type' => 'INNER', 'conditions' => array('club_member_accounts.club_purches_id=club_purchase_accounts.id'))), 'fields' => array('count(*)'), 'conditions' => array('AND' => array(array('club_member_accounts.clubuser_id' => $_SESSION['Auth']['User']['id']), array('club_member_accounts.version' => 'Premium'), array('club_member_accounts.status' => 'paid')))));

        foreach ($club_purchase_Premium_accounts as $prekey => $prevalue) {

            $club_pre_id = $prevalue['club_settings']['id'];

            if (!empty($prevalue['club_purchase_accounts']['accounts'])) {
                //   print_r($prevalue);exit;
                if ($prevalue['club_purchase_accounts']['accounts'] == '200') {
                    $account_precount += $prevalue['club_purchase_accounts']['accounts'];
                    $account_pretotal += $prevalue['club_settings']['200_total'];
                    $price_p = $prevalue['club_settings']["200_price"];
                } else if ($prevalue['club_purchase_accounts']['accounts'] == '300') {
                    $account_precount += $prevalue['club_purchase_accounts']['accounts'];
                    $account_pretotal += $prevalue['club_settings']['300_total'];
                    $price_p = $prevalue['club_settings']["300_price"];
                } else if ($prevalue['club_purchase_accounts']['accounts'] == '500') {
                    $account_precount += $prevalue['club_purchase_accounts']['accounts'];
                    $account_pretotal += $prevalue['club_settings']['500_total'];
                    $price_p = $prevalue['club_settings']["500_price"];
                } else if ($prevalue['club_purchase_accounts']['accounts'] == '1000') {
                    $account_precount += $prevalue['club_purchase_accounts']['accounts'];
                    $account_pretotal += $prevalue['club_settings']['1000_total'];
                    $price_p = $prevalue['club_settings']["1000_price"];
                }
            }
        }
        $account_precount = $account_precount - $club_member_Premiumaccounts[0][0]['count(*)'];
        $account_pretotal = $account_pretotal - ($price_p * $club_member_Premiumaccounts[0][0]['count(*)']);
        //print_r($_SESSION['Auth']['User']['id']);exit;
        $club_purchase_Pro_accounts = $this->club_settings->find('all', array('joins' => array(array('table' => 'club_purchase_accounts', 'type' => 'INNER', 'conditions' => array('club_purchase_accounts.club_setting_id=club_settings.id'))), 'fields' => array('club_settings.id', 'club_settings.name', 'club_settings.200_price', 'club_settings.300_price', 'club_settings.500_price', 'club_settings.1000_price', 'club_settings.200_total', 'club_settings.300_total', 'club_settings.500_total', 'club_settings.1000_total', 'club_purchase_accounts.accounts'), 'conditions' => array('AND' => array(array('club_purchase_accounts.clubuser_id' => $_SESSION['Auth']['User']['id']), array('club_settings.name' => 'Pro')))));
        $club_member_Proaccounts = $this->club_member_accounts->find('all', array('joins' => array(array('table' => 'club_purchase_accounts', 'type' => 'INNER', 'conditions' => array('club_member_accounts.club_purches_id=club_purchase_accounts.id'))), 'fields' => array('count(*)'), 'conditions' => array('AND' => array(array('club_member_accounts.clubuser_id' => $_SESSION['Auth']['User']['id']), array('club_member_accounts.version' => 'Pro'), array('club_member_accounts.status' => 'paid')))));

        foreach ($club_purchase_Pro_accounts as $Prokey => $valuePro) {

            if (!empty($valuePro['club_purchase_accounts'])) {
                if (isset($Provalue['club_purchase_accounts']['accounts']) == '200') {
                    $account_Procount += $valuePro['club_purchase_accounts']['accounts'];
                    $account_Prototal += $valuePro['club_settings']['200_total'];
                    $club_pro_id = $valuePro['club_settings']['id'];
                    $price_pro = $valuePro['club_settings']["200_price"];
                } else if (isset($valuePro['club_purchase_accounts']['accounts']) == '300') {
                    $account_Procount += $valuePro['club_purchase_accounts']['accounts'];
                    $account_Prototal += $valuePro['club_settings']['300_total'];
                    $price_pro = $valuePro['club_settings']["300_price"];
                    $club_pro_id = $valuePro['club_settings']['id'];
                } else if (isset($valueclub_purchase_accountsPro['club_purchase_accounts']['accounts']) == '500') {
                    $account_Procount += $valuePro['club_purchase_accounts']['accounts'];
                    $account_Prototal += $valuePro['club_settings']['500_total'];
                    $price_pro = $valuePro['club_settings']["500_price"];
                    $club_pro_id = $valuePro['club_settings']['id'];
                } else if (isset($valuePro['club_purchase_accounts']['accounts']) == '1000') {
                    $account_Procount += $valuePro['club_purchase_accounts']['accounts'];
                    $account_Prototal += $valuePro['club_settings']['1000_total'];
                    $club_pro_id = $valuePro['club_settings']['id'];
                    $price_pro = $valuePro['club_settings']["1000_price"];
                }
            }
        }
        $account_Prototal = $account_Prototal - ($price_pro * $club_member_Proaccounts[0][0]['count(*)']);
        $account_Procount = $account_Procount - $club_member_Proaccounts[0][0]['count(*)'];
        $subscriptionLastdate = $this->User->find('all', array('fields' => array('subscription_end_date', 'subscription_setting_id'), 'conditions' => array('User.id' => $_SESSION['Auth']['User']['id'])));

        $user_subendEnddata = $subscriptionLastdate[0]['User']['subscription_end_date'];

        $last_sub = $this->subscription_setting->find('all', array('fields' => array('subscription_name'), 'conditions' => array('subscription_setting.id' => $subscriptionLastdate[0]['User']['subscription_setting_id'])));

        $subscriptionName = $last_sub[0]['subscription_setting']['subscription_name'];

        $this->set(compact('user_result', 'club_trial_subcount', 'club_base_subcount', 'club_prem_subcount', 'club_pro_subcount', 'day_duration_for_trial', 'result', 'club_purchase_base_accounts', 'club_purchase_Premium_accounts', 'club_purchase_Pro_accounts', 'day_duration_for_base', 'day_duration_for_pre', 'day_duration_for_pro', 'country_name', 'club_free_result', 'account_precount', 'account_pretotal', 'account_basecount', 'account_basetotal', 'account_Procount', 'account_Prototal', 'club_base_id', 'club_pre_id', 'club_pro_id'));
        $this->set(compact('subscriptionName', 'user_subendEnddata', 'memeber', 'country_option', 'singleUserTypes', 'themesList', 'weekList', 'zonesList', 'measureList', 'club_purchaseresult', 'club_purchase_base_accounts', 'club_purchase_Premium_accounts', 'club_purchase_Pro_accounts'));

        $this->loadModel("users_subscriptionsettings_types");
        $info_coach_limit = $this->users_subscriptionsettings_types->find('all', array('conditions' => array('users_subscriptionsettings_types.user_id' => $this->Session->read('Auth.User.id')), 'fields' => array('coaches_limit', 'teams_limit', 'groups_limit', 'clubs_limit'), 'limit' => '1', "order" => array('users_subscriptionsettings_types.id  DESC'), 'order' => 'id DESC', "limit" => 1));

        $this->set('coach_limit', $info_coach_limit[0]['users_subscriptionsettings_types']);
    }

    public function account_history()
    {
        $this->layout = 'club_clubtab';
    }

    public function club_account_viewlist($typeparam = NULL, $titlparam = NULL, $valparam = NULL)
    {

        $this->layout = 'club_clubtab';
        $this->loadModel('users');
        $this->loadModel('subscription_settings');

        if ($typeparam == 'Base') {
            $sub_id = '3';
        }
        if ($typeparam == 'Premium') {
            $sub_id = '4';
        }
        if ($typeparam == 'Pro') {
            $sub_id = '5';
        }
        $nm_auth_club_id = $this->Session->read('Auth.Club.id');
        $totalmemberCnt = $this->club_members->find('list', array('conditions' => array('club_members.club_id' => $nm_auth_club_id), 'fields' => array('id', 'user_id')));


        if ($titlparam == 'expiring') {

            $exp1date = date('Y-m-d', strtotime(date('Y-m-d') . ' +' . $valparam . '  days'));
            $todaydate = date('Y-m-d');

            $allList = $this->users->find(
                'all', array(
                'conditions' => array(
                    "users.id" => $totalmemberCnt, "subscription_setting_id" => $sub_id,
                    "subscription_end_date BETWEEN '" . date('Y-m-d') . "' AND '" . $exp1date . "'"
                ),
                'fields' => array(
                    'id', 'image', 'username',
                    'firstname', 'lastname', 'subscription_setting_id',
                    'subscription_start_date', 'subscription_end_date')
            ));
            $allList = $this->users->find(
                'all', array(
                'conditions' => array(
                    "subscription_setting_id" => $sub_id,
                    "subscription_end_date BETWEEN '" . date('Y-m-d') . "' AND '" . $exp1date . "'"
                ),
                'fields' => array(
                    'id', 'image', 'username',
                    'firstname', 'lastname', 'subscription_setting_id',
                    'subscription_start_date', 'subscription_end_date')
            ));
        }

        if ($titlparam == 'expired') {
            $expiredLastdate = date('Y-m-d', strtotime(date('Y-m-d') . ' -' . $valparam . '  days'));
            $lastdaydate = date('Y-m-d', strtotime(date('Y-m-d') . ' -1  days'));

            $allList = $this->users->find(
                'all', array(
                'conditions' => array(
                    "users.id" => $totalmemberCnt, "subscription_setting_id" => $sub_id,
                    "subscription_end_date BETWEEN '" . $expiredLastdate . "' AND '" . $lastdaydate . "'"
                ),
                'fields' => array(
                    'id', 'image', 'username',
                    'firstname', 'lastname', 'subscription_setting_id',
                    'subscription_start_date', 'subscription_end_date')
            ));
        }


        if ($titlparam == 'not_renewed') {
            $expiredbeforedate = date('Y-m-d', strtotime(date('Y-m-d') . ' -' . $valparam . '  days'));


            $allList = $this->users->find(
                'count', array(
                'conditions' => array(
                    "users.id" => $totalmemberCnt, "subscription_setting_id" => $sub_id,
                    "subscription_end_date" => $expiredbeforedate
                ),
                'fields' => array(
                    'id', 'image', 'username',
                    'firstname', 'lastname', 'subscription_setting_id',
                    'subscription_start_date', 'subscription_end_date')
            ));
        }

        //  echo $this->getLastQuery('users');exit;
        // echo $proAvail;exit;
        $SubscriptionList = $this->subscription_settings->find(
            'list', array(
            'conditions' => array(
                "role_id" => '5'
            ),
            'fields' => array('id', 'short_name')
        ));

        // $SubscriptionList='';
        //   pr($SubscriptionList);exit;

        $this->set(compact('allList', 'SubscriptionList'));
    }

    public function club_account_viewlist_print($typeparam = NULL, $titlparam = NULL, $valparam = NULL)
    {
        $this->layout = '';
        $this->loadModel('users');
        $this->loadModel('subscription_settings');

        if ($typeparam == 'Base') {
            $sub_id = '3';
        }
        if ($typeparam == 'Premium') {
            $sub_id = '4';
        }
        if ($typeparam == 'Pro') {
            $sub_id = '5';
        }
        $nm_auth_club_id = $this->Session->read('Auth.Club.id');
        $totalmemberCnt = $this->club_members->find('list', array('conditions' => array('club_members.club_id' => $nm_auth_club_id), 'fields' => array('id', 'user_id')));


        if ($titlparam == 'expiring') {
            $exp1date = date('Y-m-d', strtotime(date('Y-m-d') . ' +' . $valparam . '  days'));
            $todaydate = date('Y-m-d');

            $allList = $this->users->find(
                'all', array(
                'conditions' => array(
                    "users.id" => $totalmemberCnt, "subscription_setting_id" => $sub_id,
                    "subscription_end_date BETWEEN '" . date('Y-m-d') . "' AND '" . $exp1date . "'"
                ),
                'fields' => array(
                    'id', 'image', 'username',
                    'firstname', 'lastname', 'subscription_setting_id',
                    'subscription_start_date', 'subscription_end_date')
            ));
            $allList = $this->users->find(
                'all', array(
                'conditions' => array(
                    "subscription_setting_id" => $sub_id,
                    "subscription_end_date BETWEEN '" . date('Y-m-d') . "' AND '" . $exp1date . "'"
                ),
                'fields' => array(
                    'id', 'image', 'username',
                    'firstname', 'lastname', 'subscription_setting_id',
                    'subscription_start_date', 'subscription_end_date')
            ));
        }

        if ($titlparam == 'expired') {
            $expiredLastdate = date('Y-m-d', strtotime(date('Y-m-d') . ' -' . $valparam . '  days'));
            $lastdaydate = date('Y-m-d', strtotime(date('Y-m-d') . ' -1  days'));

            $allList = $this->users->find(
                'all', array(
                'conditions' => array(
                    "users.id" => $totalmemberCnt, "subscription_setting_id" => $sub_id,
                    "subscription_end_date BETWEEN '" . $expiredLastdate . "' AND '" . $lastdaydate . "'"
                ),
                'fields' => array(
                    'id', 'image', 'username',
                    'firstname', 'lastname', 'subscription_setting_id',
                    'subscription_start_date', 'subscription_end_date')
            ));
        }


        if ($titlparam == 'not_renewed') {
            $expiredbeforedate = date('Y-m-d', strtotime(date('Y-m-d') . ' -' . $valparam . '  days'));


            $allList = $this->users->find(
                'count', array(
                'conditions' => array(
                    "users.id" => $totalmemberCnt, "subscription_setting_id" => $sub_id,
                    "subscription_end_date" => $expiredbeforedate
                ),
                'fields' => array(
                    'id', 'image', 'username',
                    'firstname', 'lastname', 'subscription_setting_id',
                    'subscription_start_date', 'subscription_end_date')
            ));
        }

        //  echo $this->getLastQuery('users');exit;
        // echo $proAvail;exit;
        $SubscriptionList = $this->subscription_settings->find(
            'list', array(
            'conditions' => array(
                "role_id" => '5'
            ),
            'fields' => array('id', 'short_name')
        ));


        // $SubscriptionList='';
        //   pr($SubscriptionList);exit;

        $this->set(compact('allList', 'SubscriptionList'));
    }

    public function club_member_profile_old($id = null)
    {
        $this->layout = 'club_clubtab';
        $this->loadModel('User');
        $result = $this->User->getUserRecordByCondtions(array('conditions' => array("User.id" => $id)));
        $user_details = $result[0];
        $this->loadmodel('usertypes');
        $clubusertype = $this->Usertype->getUsertypeListByconditionWithfields(array('fields' => array('id', 'title')), array('conditions' => array('usertypes.role_id' => 8)));
        $this->set('clubusertype', $clubusertype);

        $this->set(compact('user_details', 'id'));
    }

    public function club_member_profile($id = null, $type = null)
    {

        $this->layout = 'club_clubtab';
        $this->loadModel('countries');
        $this->loadModel('Usertype');
        $this->loadModel('measures');
        $this->loadModel('club_members');
        $this->loadModel('zones');
        $this->loadModel('weeks');
        $this->loadModel('themes');
        $this->loadModel('countries');
        $this->loadModel('club_free_purches_accounts');
        $this->loadModel('club_purchase_accounts');
        $this->loadModel('club_settings');
        $this->loadModel('ClubSettingMembertype');
        $this->loadModel('ClubSettingProfession');
        $this->loadModel('states');

        $country_option = $this->countries->find(
            'list', array(
            'fields' => array('id', 'name')
        ));

        $type = $type;

        $states = $this->states->find(
            'list', array(
            'fields' => array('id', 'name')
        ));

        $country_currency1 = $this->countries->find(
            'all', array(
            'fields' => array('currency'),
            'conditions' => array(
                'id' => $_SESSION['Auth']['User']['country_id']
            )
        ));

        $country_currency = $country_currency1[0]['countries']['currency'];
        $this->set(compact("country_currency", $country_currency));

        $zonesList = $this->zones->find(
            'list', array(
            'fields' => array('id', 'zone_name'),
            'order' => 'zone_name ASC'
        ));

        $measureList = $this->measures->find(
            'list', array(
            'fields' => array('id', 'measure_unit')
        ));
        $weekList = $this->weeks->find(
            'list', array(
            'fields' => array('id', 'week_name')
        ));

        $themesList = $this->themes->find(
            'all', array(
            'fields' => array('id', 'theme_name', 'theme_type', 'theme_img')
        ));

        $singleUserTypes = $this->Usertype->find(
            'list', array(
            'conditions' => array('Usertype.role_id' => 5)
        ));
        $this->set(
            compact(
                'club_id', 'color', 'display_msg', 'memeber',
                'country_option', 'singleUserTypes', 'themesList', 'weekList',
                'zonesList', 'measureList', 'club_purchaseresult', 'club_purchase_base_accounts',
                'club_purchase_Premium_accounts', 'club_purchase_Pro_accounts', 'type'));

        /*  $profession  = $this->ClubSettingProfession->find('list', array(
        'fields' => array('id', 'profession')
        ));*/

        $member_type = $this->ClubSettingMembertype->find(
            'list', array(
            'fields' => array('id', 'member_type_name'),
            'conditions' => array("user_id" => $this->Session->read('Auth.User.id'))
        ));

        $profession = $this->ClubSettingProfession->getProfessionFunctionListByOrder($this->Session->read('Auth.User.id'));

        $this->set(compact('member_type', 'id', 'states'));
        $user_result = $this->User->find(
            'all', array(
            'conditions' => array('User.id' => $id)
        ));

        $check_club_member = $this->club_members->find(
            'all', array(
            'conditions' => array(
                'club_members.club_id' => $this->Session->read('Auth.Club.id'),
                'club_members.user_id' => $id
            )
        ));
        $this->set(compact('profession', 'check_club_member'));

        if ($this->request->is('post') || $this->request->is('put')) {

            if ($this->request->data['User']['image']['name'] != '') {

                $FileName = $this->request->data['User']['image']['name'];
                $NewFileName = time();
                $pos = strrpos($FileName, '.');
                $extension = substr($FileName, $pos);
                $NewFileName = $NewFileName . $extension;
                $path = WWW_ROOT . 'img\profile_images\\';
                $destination = WWW_ROOT . 'img\profile_images\\' . $NewFileName;

                if (move_uploaded_file($this->request->data['User']['image']['tmp_name'], $destination)) {
                    $this->request->data['User']['image'] = $NewFileName;
                }

            } else {

                unset($this->request->data['User']['image']);
            }

            $this->User->id = $id;
            $TeamId = null;

            if ($this->User->save($this->request->data)) {

                if ($this->request->data['User']['role_id'] == 5) {

                    if (empty($this->request->data['Athlete']['dob'])) {
                        unset($this->request->data['Athlete']['dob']);
                    }
                    $this->loadModel("Athlete");
                    $this->request->data['Athlete']['user_id'] = $id;
                    $this->request->data['Athlete']['country_id'] = $this->request->data['User']['country_id'];
                    $Athlete = $this->Athlete->find(
                        'all', array(
                        'conditions' => array('Athlete.user_id' => $id)
                    ));
                    $AthleteId = $Athlete[0]["Athlete"]["id"];

                    $this->Athlete->id = $AthleteId;
                    $this->Athlete->save($this->request->data['Athlete']);

                } elseif ($this->request->data['User']['role_id'] == 6) {

                    $this->loadModel("Coach");
                    $this->request->data['Coach']['user_id'] = $id;
                    $this->request->data['Coach']['country_id'] = $this->request->data['User']['country_id'];
                    $Coach = $this->Coach->find(
                        'all', array(
                        'conditions' => array('Coach.user_id' => $id)
                    ));
                    $CoachId = $Coach[0]["Coach"]["id"];
                    $this->Coach->id = $CoachId;
                    $this->Coach->save($this->request->data['Coach']);

                } elseif ($this->request->data['User']['role_id'] == 7) {

                    $this->loadModel("Team");
                    $this->request->data['Team']['user_id'] = $id;
                    $this->request->data['Team']['country_id'] = $this->request->data['User']['country_id'];
                    $Team = $this->Team->find(
                        'all', array(
                        'conditions' => array('Team.user_id' => $id)
                    ));
                    $TeamId = $Team[0]["Team"]["id"];
                    $this->Team->id = $TeamId;
                    $this->Team->save($this->request->data['Team']);

                } elseif ($this->request->data['User']['role_id'] == 8) {

                    $this->loadModel("Club");
                    $this->request->data['Club']['user_id'] = $id;
                    $this->request->data['Club']['country_id'] = $this->request->data['User']['country_id'];
                    $Club = $this->Club->find(
                        'all', array(
                        'conditions' => array('Club.user_id' => $id)
                    ));
                    $ClubId = $Club[0]["Club"]["id"];
                    $this->Club->id = $TeamId;
                    $this->Club->save($this->request->data['Club']);
                }

                $this->Session->setFlash(__('Record inserted successfully'));
                //Before user redirect on this page  return $this->redirect(array('action' => 'create_member', $encrypt_roleid, $encrypt_userid, '0'));
                return $this->redirect(
                    array(
                        'controller' => 'clubs',
                        'action' => 'new_member_otherdetails_edit', $id));
            }
        } else {

            $this->request->data = $user_result[0];
            if (!empty($user_result[0]["Athlete"][0])) {
                $this->request->data["Athlete"] = $user_result[0]["Athlete"][0];
            }
        }
    }

    public function club_membership_request()
    {

        $this->layout = 'ajax';
        $this->autoRender = false;
        $this->loadmodel('club_membership_requests');

        $role_id = $this->User->find(
            'all', array(
            'fields' => array('role_id'),
            'conditions' => array(
                'User.id' => $this->request->data['user_id']
            )
        ));

        if ($role_id[0]['User']['role_id'] == 8) {
            echo "Club can not become member of another club";
            exit;
        } else {

            $datasave['club_membership_requests']['club_id'] = $this->request->data['club_id'];
            $datasave['club_membership_requests']['user_id'] = $this->request->data['user_id'];
            $reminder_userresult = $this->User->find(
                'all', array(
                'fields' => array(
                    'firstname',
                    'email'
                ),
                'conditions' => array(
                    'User.id' => $this->request->data['user_id']
                )
            ));

            $check_status = $this->club_membership_requests->find(
                "all", array(
                "fields" => array(
                    "club_membership_requests.id",
                    "club_membership_requests.status",
                    "club_membership_requests.request_from"
                ),
                "conditions" => array(
                    "AND" => array(
                        array(
                            "club_membership_requests.club_id" => $this->request->data['club_id']
                        ),
                        array(
                            "club_membership_requests.user_id" => $this->request->data['user_id']
                        )
                    )
                )
            ));

            if (empty($check_status)) {

                $datasave['club_membership_requests']['status'] = "pending";
                $datasave['club_membership_requests']['request_from'] = $this->request->data['request_from'];
                $this->club_membership_requests->create();
                if ($this->club_membership_requests->save($datasave)) {

                    $data_stored['firstname'] = $reminder_userresult[0]['User']['firstname'];
                    $data_stored['username'] = $_SESSION['Auth']['User']['username'];
                    $to = $reminder_userresult[0]['User']['email'];
                    $Email = new CakeEmail('default');

                    $Email->config('default');
                    $Email->from(array('swapnilb@datalogysoftware.com' => 'MovesBook'))
                        ->to($to)
                        ->subject('Club Membership Request')
                        ->emailFormat('html')
                        ->template('club_membership_request')
                        ->viewVars(array('ms' => $data_stored));
                    $Email->send();
                    echo '1';
                    exit;

                } else {

                    echo '0';
                    exit;
                }

            } else if ($check_status[0]['club_membership_requests']['status'] == "pending") {

                $datasave['club_membership_requests']['status'] = "pending";
                $datasave['club_membership_requests']['request_from'] = $this->request->data['request_from'];
                $this->club_membership_requests->id = $check_status[0]['club_membership_requests']['id'];

                if ($this->club_membership_requests->save($datasave)) {

                    $data_stored['firstname'] = $reminder_userresult[0]['User']['firstname'];
                    $data_stored['username'] = $_SESSION['Auth']['User']['username'];
                    $to = $reminder_userresult[0]['User']['email'];
                    //$to ="swapnilb@datalogysoftware.com";
                    $Email = new CakeEmail('default');
                    $Email->config('default');
                    $Email->from(array('swapnilb@datalogysoftware.com' => 'MovesBook'))
                        ->to($to)
                        ->subject('Reminder Email')
                        ->emailFormat('html')
                        ->template('send_reminder')
                        ->viewVars(array('ms' => $data_stored));
                    $Email->send();
                    echo '1';
                    exit;

                } else {

                    echo '0';
                    exit;
                }

            } else if ($check_status[0]['club_membership_requests']['status'] == "rejected") {

                $datasave['club_membership_requests']['status'] = "pending";
                $datasave['club_membership_requests']['request_from'] = $this->request->data['request_from'];
                $this->club_membership_requests->id = $check_status[0]['club_membership_requests']['id'];
                if ($this->club_membership_requests->save($datasave)) {
                    echo 'pending';
                    exit;
                } else {
                    echo '0';
                    exit;
                }

            }
        }
    }

    public function sendClubMembershipRequest_after_exp()
    {

        $this->layout = 'ajax';
        $this->autoRender = false;
        $this->loadmodel('club_membership_requests');
        $this->loadmodel('Club');
        $this->loadmodel('club_members');

        $this->User->unbindModel(
            array(
                'hasMany' => array(
                    'Post',
                    'trackVisitor',
                    'Operator',
                    'Athlete',
                    'Coach',
                    'Team',
                    'Club_subscription_histories',
                    'Banner',
                    'SocialProfile',
                    'ClubMember'
                ))
        );

        $role_id = $this->User->find(
            'all', array(
            'fields' => array('role_id'),
            'conditions' => array(
                'User.id' => $this->request->data['user_id']
            )
        ));

        $this->loadModel('Club');
        $Club = $this->Club->find(
            'all', array(
            'fields' => array(
                'User.username',
                'User.email'
            ),
            'conditions' => array(
                'Club.id' => $this->request->data['club_id']
            )
        ));

        if ($role_id[0]['User']['role_id'] == 8) {

            echo "Club can not become member of another club";
            exit;

        } else {

            $datasave['club_membership_requests']['club_id'] = $this->request->data['club_id'];
            $datasave['club_membership_requests']['user_id'] = $this->request->data['user_id'];

            $reminder_userresult = $this->User->find(
                'all', array(
                'fields' => array(
                    'firstname',
                    'email'
                ),
                'conditions' => array(
                    'User.id' => $this->request->data['user_id']
                )
            ));

            $check_status = $this->club_membership_requests->find(
                "all", array(
                "fields" => array(
                    "club_membership_requests.id",
                    "club_membership_requests.status",
                    "club_membership_requests.request_from"
                ),
                "conditions" => array(
                    "AND" => array(
                        array(
                            "club_membership_requests.club_id" => $this->request->data['club_id']
                        ),
                        array(
                            "club_membership_requests.user_id" => $this->request->data['user_id']
                        )
                    )
                )
            ));

            $check_member_status = $this->club_members->find(
                "all", array(
                "fields" => array(
                    "club_members.id",
                    "club_members.membership_status"
                ),
                "conditions" => array(
                    "AND" => array(
                        array(
                            "club_members.club_id" => $this->request->data['club_id']
                        ),
                        array(
                            "club_members.user_id" => $this->request->data['user_id']
                        )
                    )
                )
            ));

            if ($check_status[0]['club_membership_requests']['status'] == "accepted") {

                $datasave['club_membership_requests']['status'] = "Pending";
                $datasave['club_membership_requests']['request_from'] = $this->request->data['request_from'];
                $this->club_membership_requests->id = $check_status[0]['club_membership_requests']['id'];

                if ($this->club_membership_requests->save($datasave)) {

                    if ($check_member_status[0]['club_members']['membership_status'] == "Accept") {

                        $club_memberdatasave["club_members"]['club_id'] = $this->request->data['club_id'];
                        $club_memberdatasave["club_members"]['user_id'] = $this->request->data['user_id'];
                        $this->club_members->id = $check_member_status[0]['club_members']['id'];
                        $this->club_members->save($club_memberdatasave);

                    }

                    $data_stored['firstname'] = $Club[0]["User"]["username"];
                    $data_stored['username'] = $reminder_userresult[0]['User']['firstname'];
                    $to = $Club[0]["User"]["email"];

                    $Email = new CakeEmail('default');
                    $Email->config('default');
                    $Email->from(array('sheetal@datalogysoftware.com' => 'MovesBook'))
                        ->to($to)
                        ->subject('Club membership request')
                        ->emailFormat('html')
                        ->template('send_club_member_request_after_exp')
                        ->viewVars(array('ms' => $data_stored));
                    $Email->send();
                    echo '1';
                    exit;

                } else {

                    echo '0';
                    exit;
                }
            } else if ($check_status[0]['club_membership_requests']['status'] == "rejected") {

                $datasave['club_membership_requests']['status'] = "pending";
                $datasave['club_membership_requests']['request_from'] = $this->request->data['request_from'];
                $this->club_membership_requests->id = $check_status[0]['club_membership_requests']['id'];
                if ($this->club_membership_requests->save($datasave)) {


                    $data_stored['firstname'] = $Club[0]["User"]["username"];
                    $data_stored['username'] = $reminder_userresult[0]['User']['firstname'];
                    $to = $reminder_userresult[0]['User']['email'];
                    //$to ="swapnilb@datalogysoftware.com";
                    $Email = new CakeEmail('default');
                    $Email->config('default');
                    $Email->from(array('swapnilb@datalogysoftware.com' => 'MovesBook'))
                        ->to($to)
                        ->subject('Club membership request')
                        ->emailFormat('html')
                        ->template('send_club_member_request_after_exp')
                        ->viewVars(array('ms' => $data_stored));
                    $Email->send();
                    echo '1';
                    exit;
                } else {
                    echo '0';
                    exit;
                }

            }
        }
    }

    public function club_membership_request_reply()
    {

        $this->layout = 'ajax';
        $this->autoRender = false;
        $this->loadmodel('club_membership_requests');
        $this->loadmodel('club_members');

        $reqChk = $this->club_membership_requests->find(
            'all', array(
            'conditions' => array(
                'club_membership_requests.club_id' => $this->request->data['club_id'],
                'club_membership_requests.user_id' => $this->request->data['user_id']
            ),
            'fields' => array('id', 'request_from', 'status')
        ));

        $datasave['club_membership_requests']['club_id'] = $this->request->data['club_id'];
        $datasave['club_membership_requests']['user_id'] = $this->request->data['user_id'];
        $datasave['club_membership_requests']['status'] = $this->request->data['status'];
        $this->club_membership_requests->id = $reqChk[0]['club_membership_requests']['id'];

        if ($this->club_membership_requests->save($datasave)) {

            $datasaveClub['club_members']['club_id'] = $this->request->data['club_id'];
            $datasaveClub['club_members']['user_id'] = $this->request->data['user_id'];
            $datasaveClub['club_members']['member_type'] = '';

            if ($this->request->data['status'] == 'accepted') {
                $this->club_members->create();
                $this->club_members->save($datasaveClub);
            }

            echo '1';
            exit;
        } else {
            echo '0';
            exit;
        }
    }

    public function search_member()
    {

        $this->layout = 'ajax';
        $sr = 0;
        $this->autoRender = true;

        $this->loadModel('roles');
        $this->loadModel('countries');
        $this->loadModel('flags');
        $this->loadModel('flags');

        if (isset($_POST['name'])) {

            $name = trim($_POST['name']);
            $query2 = $this->User->getUserRecordByquery($name);
        }
        $this->set(compact('query2'));

    }

    public function clubmembership_requestlist($paramval = NULL)
    {

        $this->layout = 'club_clubtab';
        $this->loadmodel('roles');
        $this->loadmodel('subscription_settings');
        $RoleList = $this->roles->find(
            'list', array(
            'conditions' => array(
                'id' => array('5', '6', '7', '8')
            ),
            'fields' => array('id', 'name')
        ));

        $versionData = $this->subscription_settings->find(
            'list', array(
            'fields' => array('id', 'subscription_name')
        ));

        $this->set(compact('RoleList', 'versionData'));
        $this->loadmodel('temp_subscriptionuserlist');

        $data1 = $this->temp_subscriptionuserlist->find(
            'all', array(
            'conditions' => array(
                'temp_subscriptionuserlist.admin_id' => $this->Session->read('Auth.User.id'),
                'temp_subscriptionuserlist.random_id' => $this->Session->read('Auth.User.random_id'),
                'temp_subscriptionuserlist.user_type' => 'clubmembership_requestlist'
            )
        ));


        $chknewuserID = array();
        foreach ($data1 as $key => $value) {
            foreach ($value as $key => $value1) {
                $chknewuserID[] = $value1['user_id'];
            }
        }
        /**************************************/

        $this->loadmodel('message');
        $msgCnt = $this->message->find(
            'list', array(
            'conditions' => array(
                'sender_id' => $this->Session->read('Auth.User.id'),
                'msg_moto' => 'clubmember_reqList'
            ),
            'fields' => array('id', 'reciver_id')
        ));

        $countMsgNewary = array_count_values($msgCnt);

        $querylastMsg = "select id, reciver_id,created from (select * from messages ORDER BY id DESC)
        AS lastmsg where msg_moto='clubmember_reqList' and sender_id='" . $this->Session->read('Auth.User.id') . "'
        GROUP BY `reciver_id` order by id desc";
        $orderLastQuery1 = $this->message->Query($querylastMsg);
        foreach ($orderLastQuery1 as $key100 => $value100) {
            $UserLastMsgIds[$value100['lastmsg']['reciver_id']] = $value100['lastmsg']['created'];
        }

        $this->loadmodel('Email_histories');
        $mailCnt = $this->Email_histories->find(
            'list', array(
            'conditions' => array(
                'sender_id' => $this->Session->read('Auth.User.id'),
                'msg_type' => 'by_clubmember_reqList'
            ),
            'fields' => array('id', 'receiver_id')
        ));
        $countMailNewary = array_count_values($mailCnt);
        $querylastMail = "select id,receiver_id,created from (select * from email_histories ORDER
            BY id DESC) AS lastmail where msg_type='by_clubmember_reqList' and
            sender_id='" . $this->Session->read('Auth.User.id') . "' GROUP BY `receiver_id` order
            by id desc";

        $orderLastMailQuery1 = $this->Email_histories->Query($querylastMail);
        foreach ($orderLastMailQuery1 as $key101 => $value101) {
            $UserLastMailIds[$value101['lastmail']['receiver_id']] = $value101['lastmail']['created'];
        }

        $this->loadmodel('club_givenaccount_histories');
        $this->loadmodel('club_members');
        if (!isset($paramval)) {
            $paramval = 'all';
        }

        $cndmake = '';
        if ($this->request->is(array('post', 'put'))) {


            if (isset($this->request->data['search_order'])) {

                if ($this->request->data['search_order']['searchUser'] != '') {
                    $cndmake .= "((`users`.`username`  LIKE '%" . $this->request->data['search_order']['searchUser'] . "%')OR (`users`.`firstname`  LIKE '%" . $this->request->data['search_order']['searchUser'] . "%')OR (`users`.`lastname`  LIKE '%" . $this->request->data['search_order']['searchUser'] . "%'))";
                }

                if ($this->request->data['search_order']['orderby'] != '') {

                    $ordMake = 'Y';
                    if (($this->request->data['search_order']['orderby'] == 'last_mail')
                        || ($this->request->data['search_order']['orderby'] == 'last_msg')
                    ) {

                        $this->loadmodel('Email_histories');
                        if ($this->request->data['search_order']['orderby'] == 'last_msg') {

                            $y = "select reciver_id from (select * from messages ORDER BY id DESC) AS
                            lastmsg where msg_moto='clubmember_reqList'  and
                            sender_id='" . $this->Session->read('Auth.User.id') . "' GROUP BY
                            `reciver_id` order by id desc";

                            $orderQuery1 = $this->Email_histories->Query($y);
                            foreach ($orderQuery1 as $key1 => $value1) {
                                $UserMsgIds[] = $value1['lastmsg']['reciver_id'];
                            }

                        } else {

                            $y1 = "select `receiver_id` from (select * from `email_histories` ORDER BY
                                `id` DESC) AS lastmsg where `msg_type`='by_clubmember_reqList'  and
                                sender_id='" . $this->Session->read('Auth.User.id') . "' GROUP BY
                                `receiver_id` order by `id` desc";

                            $orderQuery2 = $this->Email_histories->Query($y1);
                            foreach ($orderQuery2 as $key2 => $value2) {
                                $UserMailIds[] = $value2['lastmsg']['receiver_id'];
                            }
                        }

                    } else if (($this->request->data['search_order']['orderby'] == 'username')
                        || ($this->request->data['search_order']['orderby'] == 'firstname')
                        || ($this->request->data['search_order']['orderby'] == 'role_id')
                    ) {

                        $options['order'] = array('users.' . $this->request->data['search_order']['orderby'] . ' ASC');

                    } else {
                        $setHistoryOrder = $this->request->data['search_order']['orderby'];
                    }

                } else {
                    $options['order'] = array('club_givenaccount_histories.id  DESC');
                }
            }

            if (isset($this->request->data['search'])) {

                if ($this->request->data['search']['role_id'] != '') {
                    $cndmake .= "`users`.`role_id` = '" . $this->request->data['search']['role_id'] . "' AND ";
                }

                if ($this->request->data['search']['subscription_setting_id'] != '') {
                    $setHistorySearchFiltr = 'subscription_setting_id';
                }

                $startFromDate = $this->request->data['search']['start_from_date'];
                $startToDate = $this->request->data['search']['start_to_date'];
                $EndFromDate = $this->request->data['search']['end_from_date'];
                $EndToDate = $this->request->data['search']['end_to_date'];

                if (($startFromDate != '') && ($startToDate != '')
                    && ($EndFromDate != '') && ($EndToDate != '')
                ) {

                    $setHistorySearchFiltr1 = 'subscription_date';
                } else {

                    if ($startFromDate != '') {
                        $setHistorySearchFiltr1 = 'subscription_date';
                    }

                    if ($startToDate != '') {
                        $setHistorySearchFiltr1 = 'subscription_date';
                    }

                    if ($EndFromDate != '') {
                        $setHistorySearchFiltr1 = 'subscription_date';
                    }

                    if ($EndToDate != '') {
                        $setHistorySearchFiltr1 = 'subscription_date';
                    }

                }

                $cndmake .= "users.verification_status='T' and ";
                $cndmake = substr($cndmake, 0, -4);

                $options['order'] = array('club_givenaccount_histories.id  DESC');
            }

            if ($paramval == 'all') {

                $options['conditions'] = array(
                    $cndmake,
                    'club_givenaccount_histories.club_id' => $this->Session->read('Auth.Club.id')
                );

            } else if ($paramval == 'last') {

                $thirtDays = date('Y-m-d H:i:s', strtotime(date('Y-m-d') . ' -30  days'));
                $options['conditions'] = array(
                    $cndmake,
                    'club_givenaccount_histories.club_id' => $this->Session->read('Auth.Club.id'),
                    'club_givenaccount_histories.created >' => $thirtDays,
                );

            } else if ($paramval == 'members' || $paramval == 'current') {

                $aQuery = "select id from (select * from club_givenaccount_histories ORDER BY id DESC) AS lastmsg where club_id=" . $this->Session->read('Auth.Club.id') . " GROUP BY `user_id` order by id desc";
                $UserIds = array();
                $orderQuery1 = $this->club_members->Query($aQuery);
                foreach ($orderQuery1 as $key1 => $value1) {
                    $UserIds[] = $value1['lastmsg']['id'];
                }

                $options['conditions'] = array(
                    $cndmake,
                    'club_givenaccount_histories.club_id' => $this->Session->read('Auth.Club.id'),
                    'club_givenaccount_histories.id' => $UserIds
                );
            }

        } else {

            if ($paramval == 'all') {

                $options['conditions'] = array(
                    'club_givenaccount_histories.club_id' => $this->Session->read('Auth.Club.id'), 'users.verification_status' => 'T'
                );

            } else if ($paramval == 'last') {

                $thirtDays = date('Y-m-d H:i:s', strtotime(date('Y-m-d') . ' -30  days'));
                $options['conditions'] = array(
                    'club_givenaccount_histories.club_id' => $this->Session->read('Auth.Club.id'),
                    'club_givenaccount_histories.created >' => $thirtDays, 'users.verification_status' => 'T'
                );

            } else if ($paramval == 'members' || $paramval == 'current') {

                $aQuery = "select id from (select * from club_givenaccount_histories ORDER BY id DESC)
                AS lastmsg where club_id=" . $this->Session->read('Auth.Club.id') . " GROUP BY
                `user_id` order by id desc";
                $UserIds = array();
                $orderQuery1 = $this->club_members->Query($aQuery);
                foreach ($orderQuery1 as $key1 => $value1) {
                    $UserIds[] = $value1['lastmsg']['id'];
                }

                $options['conditions'] = array(
                    'club_givenaccount_histories.club_id' => $this->Session->read('Auth.Club.id'),
                    'club_givenaccount_histories.id' => $UserIds, 'users.verification_status' => 'T'
                );

            }
            $options['order'] = array('club_givenaccount_histories.id  DESC');

        }
        $options['joins'] = array(
            array(
                'table' => 'users',
                'alias' => 'users',
                'type' => 'INNER',
                'conditions' => array(
                    'club_givenaccount_histories.user_id = users.id'
                )
            ),
            array(
                'table' => 'club_members',
                'alias' => 'club_members',
                'type' => 'INNER',
                'conditions' => array(
                    'club_givenaccount_histories.club_member_id = club_members.id'
                )
            ),
            array(
                'table' => 'club_member_accounts',
                'alias' => 'club_member_accounts',
                'type' => 'INNER',
                'conditions' => array(
                    'club_givenaccount_histories.club_member_account_id = club_member_accounts.id'
                )
            ),
        );

        $options['fields'] = array(
            'club_givenaccount_histories.id', 'club_givenaccount_histories.club_id', 'club_givenaccount_histories.user_id', 'club_givenaccount_histories.club_member_id', 'club_givenaccount_histories.club_subscription_history_id', 'club_givenaccount_histories.created', 'club_members.id', 'club_members.club_id', 'club_members.user_id',
            'club_members.member_type', 'club_members.created',
            'users.id', 'users.username', 'users.firstname', 'users.lastname',
            'users.country_id', 'users.image', 'users.role_id', 'users.subscription_setting_id', 'users.subscription_start_date',
            'users.subscription_end_date', 'club_member_accounts.id', 'club_member_accounts.randm_key', 'club_member_accounts.club_purches_id', 'club_member_accounts.subscription_setting_id', 'club_member_accounts.status');
        $fetchAns = $this->club_givenaccount_histories->find('all', $options);

        $ReorderArySubscriptionIDs = array();
        foreach ($fetchAns as $key => $value) {

            if ($value['users']['role_id'] == '5') {
                $clsname = 'athlete_subscription_histories';
            } elseif ($value['users']['role_id'] == '6') {
                $clsname = 'coach_subscription_histories';
            } elseif ($value['users']['role_id'] == '7') {
                $clsname = 'team_subscription_histories';
            } elseif ($value['users']['role_id'] == '8') {
                $clsname = 'club_subscription_histories';
            }
            $this->loadmodel($clsname);

            $cndmakeNew = '';
            if (isset($setHistorySearchFiltr)) {
                if ($setHistorySearchFiltr == 'subscription_setting_id') {
                    $cndmakeNew .= $clsname . ".`subscription_setting_id` = '" . $this->request->data['search']['subscription_setting_id'] . "' AND ";
                }
            }

            if (isset($setHistorySearchFiltr1)) {

                if ($setHistorySearchFiltr1 == 'subscription_date') {

                    $startFromDate = $this->request->data['search']['start_from_date'];
                    $startToDate = $this->request->data['search']['start_to_date'];
                    $EndFromDate = $this->request->data['search']['end_from_date'];
                    $EndToDate = $this->request->data['search']['end_to_date'];
                    if (($startFromDate != '') && ($startToDate != '')
                        && ($EndFromDate != '') && ($EndToDate != '')
                    ) {

                        $cndmakeNew .= $clsname . ".`subscription_start_date` BETWEEN '" . $startFromDate . "' AND '" . $startToDate . "' AND
                        " . $clsname . ".`subscription_end_date` BETWEEN '" . $EndFromDate . "' AND '" . $EndToDate . "' AND ";

                    } else {

                        if ($startFromDate != '') {

                            $cndmakeNew .= $clsname . ".`subscription_start_date` >= '" . $startFromDate . "' AND ";
                        }

                        if ($startToDate != '') {

                            $cndmakeNew .= $clsname . ".`subscription_start_date` <= '" . $startToDate . "' AND ";
                        }

                        if ($EndFromDate != '') {

                            $cndmakeNew .= $clsname . ".`subscription_end_date` >= '" . $EndFromDate . "' AND ";
                        }

                        if ($EndToDate != '') {

                            $cndmakeNew .= $clsname . ".`subscription_end_date` <= '" . $EndToDate . "' AND ";
                        }
                    }
                }
            }

            if ($cndmakeNew == '') {

                $fetchhistory = $this->$clsname->find(
                    'all', array(
                    'conditions' => array(
                        'id' => $value['club_givenaccount_histories']['club_subscription_history_id']
                    )
                ));

            } else {

                $cndmakeNew = substr($cndmakeNew, 0, -4);
                $fetchhistory = $this->$clsname->find(
                    'all', array(
                    'conditions' => array(
                        $cndmakeNew,
                        'id' => $value['club_givenaccount_histories']['club_subscription_history_id']
                    )
                ));
            }

            if (empty($fetchhistory)) {
                unset($fetchAns[$key]);
            } else {

                if ($paramval == 'current') {

                    $todayDate = date('Y-m-d');
                    if (($fetchhistory[0][$clsname]['subscription_start_date'] <= $todayDate)
                        && ($fetchhistory[0][$clsname]['subscription_end_date'] >= $todayDate)
                    ) {

                        $this->loadmodel('subscription_settings');
                        $fetchSubscription_name = $this->subscription_settings->find('all', array('conditions' => array('id' => $fetchhistory[0][$clsname]['subscription_setting_id'])));
                        $fetchAns[$key]['member_subscription_history'] = $fetchhistory[0][$clsname];
                        $fetchAns[$key]['subscription_name'] = $fetchSubscription_name[0]['subscription_settings']['subscription_name'];

                    } else {
                        unset($fetchAns[$key]);
                    }

                } else {

                    $this->loadmodel('subscription_settings');
                    $fetchSubscription_name = $this->subscription_settings->find(
                        'all', array(
                        'conditions' => array(
                            'id' => $fetchhistory[0][$clsname]['subscription_setting_id']
                        )
                    ));
                    $fetchAns[$key]['member_subscription_history'] = $fetchhistory[0][$clsname];
                    $fetchAns[$key]['subscription_name'] = $fetchSubscription_name[0]['subscription_settings']['subscription_name'];
                }

                $ReorderArySubscriptionIDs[$value['club_givenaccount_histories']['id']] = $fetchhistory[0][$clsname]['subscription_setting_id'];
                $ReorderArySubscriptionStartdate[$value['club_givenaccount_histories']['id']] = $fetchhistory[0][$clsname]['subscription_start_date'];
                $ReorderArySubscriptionEnddate[$value['club_givenaccount_histories']['id']] = $fetchhistory[0][$clsname]['subscription_end_date'];
            }
        }

        if (isset($setHistoryOrder)) {

            $newAry = array();
            $LastnewAry = array();
            foreach ($fetchAns as $key1 => $value1) {
                $newAry[$value1['club_givenaccount_histories']['id']] = $value1;
            }

            if ($setHistoryOrder == 'subscription_setting_id') {

                asort($ReorderArySubscriptionIDs);
                foreach ($ReorderArySubscriptionIDs as $key3 => $value3) {
                    $LastnewAry[] = $newAry[$key3];
                }
            } else if ($setHistoryOrder == 'subscription_start_date') {

                arsort($ReorderArySubscriptionStartdate);
                foreach ($ReorderArySubscriptionStartdate as $key3 => $value3) {
                    $LastnewAry[] = $newAry[$key3];
                }
            } else if ($setHistoryOrder == 'subscription_end_date') {

                arsort($ReorderArySubscriptionEnddate);
                foreach ($ReorderArySubscriptionEnddate as $key3 => $value3) {
                    $LastnewAry[] = $newAry[$key3];
                }
            }

            $fetchAns = $LastnewAry;
        }

        if ((isset($UserMsgIds)) || (isset($UserMailIds))) {

            $newOrderAry = array();
            foreach ($fetchAns as $key => $value) {
                $newOrderAry[$value['users']['id']] = $value;
            }

            if (isset($UserMsgIds)) {
                $rowsall = $UserMsgIds;
            } else {
                $rowsall = $UserMailIds;
            }

            $makenewAry = array();
            foreach ($rowsall as $key5 => $value5) {
                $makenewAry[] = $newOrderAry[$value5];
            }

            if ((count($fetchAns)) > (count($makenewAry))) {
                foreach ($newOrderAry as $key9 => $value9) {
                    if (!in_array($key9, $rowsall)) {
                        $makenewAry[] = $value9;
                    }
                }
            }
            $fetchAns = $makenewAry;
        }
        $this->set(compact('fetchAns', 'chknewuserID', 'countMsgNewary', 'countMailNewary', 'UserLastMsgIds', 'UserLastMailIds'));
    }

    public function clubmembership_requestlist_print($urlIdArray = NULL)
    {

        $this->layout = '';
        $dataToPrint = explode('#~ ', $urlIdArray);
        $m = 0;

        foreach ($dataToPrint as $value) {
            $urlIdArray1 = (urldecode($value));
            $dataToPrint12 = explode('&', $urlIdArray1);

            foreach ($dataToPrint12 as $key1 => $value1) {
                $dataToPrint12345 = explode('=', $value1);
                $prData[$m][$dataToPrint12345[0]] = $dataToPrint12345[1];
            }
            $m++;
        }
        $this->set(compact('prData'));
    }

    public function clubmembership_invites($paramFiter = NULL)
    {

        $this->layout = 'club_clubtab';
        $this->loadmodel('roles');
        $this->loadmodel('subscription_settings');
        $this->loadmodel('temp_subscriptionuserlist');
        $RoleList = $this->roles->find(
            'list', array(
            'conditions' => array(
                'id' => array('5', '6', '7', '8')
            ),
            'fields' => array('id', 'name')
        ));

        $versionData = $this->subscription_settings->find(
            'list', array(
            'fields' => array('id', 'subscription_name')
        ));
        $this->set(compact('RoleList', 'versionData'));

        $data1 = $this->temp_subscriptionuserlist->find(
            'all', array(
            'conditions' => array(
                'temp_subscriptionuserlist.admin_id' => $this->Session->read('Auth.User.id'),
                'temp_subscriptionuserlist.random_id' => $this->Session->read('Auth.User.random_id'),
                'temp_subscriptionuserlist.user_type' => 'clubmembership_invites'
            )
        ));

        $chknewuserID = array();
        foreach ($data1 as $key => $value) {
            foreach ($value as $key => $value1) {
                $chknewuserID[] = $value1['user_id'];
            }
        }

        $this->loadmodel('club_membership_requests');
        $cndmake = '';
        if ($this->request->is(array('post', 'put'))) {

            if (isset($this->request->data['search_order'])) {

                if ($this->request->data['search_order']['searchUser'] != '') {
                    $cndmake .= "(`users`.`username`  LIKE '%" . $this->request->data['search_order']['searchUser'] . "%')OR (`users`.`firstname`  LIKE '%" . $this->request->data['search_order']['searchUser'] . "%')OR (`users`.`lastname`  LIKE '%" . $this->request->data['search_order']['searchUser'] . "%')";
                }

                if ($this->request->data['search_order']['orderby'] != '') {

                    $ordMake = 'Y';
                    if ($this->request->data['search_order']['orderby'] == 'request_date') {

                        $options['order'] = array('club_membership_requests.created  ASC');

                    } else if (($this->request->data['search_order']['orderby'] == 'by_last_mail')
                        || ($this->request->data['search_order']['orderby'] == 'by_last_msg')
                    ) {

                        $this->loadmodel('Email_histories');
                        if ($this->request->data['search_order']['orderby'] == 'by_last_msg') {

                            $y = "select reciver_id from (select * from messages ORDER BY id DESC) AS lastmsg where msg_moto='clubmember_invite' and sender_id='" . $this->Session->read('Auth.User.id') . "' GROUP BY `reciver_id` order by id desc";
                            $orderQuery1 = $this->Email_histories->Query($y);
                            foreach ($orderQuery1 as $key1 => $value1) {
                                $UserMsgIds[] = $value1['lastmsg']['reciver_id'];
                            }

                        } else {

                            $y1 = "select `receiver_id` from (select * from `email_histories` ORDER BY `id` DESC) AS lastmsg where `msg_type`='by_clubmember_invite' and sender_id='" . $this->Session->read('Auth.User.id') . "' GROUP BY `receiver_id` order by `id` desc";
                            $orderQuery2 = $this->Email_histories->Query($y1);
                            foreach ($orderQuery2 as $key2 => $value2) {
                                $UserMailIds[] = $value2['lastmsg']['receiver_id'];
                            }
                        }

                    } else {
                        $options['order'] = array('users.' . $this->request->data['search_order']['orderby'] . ' ASC');
                    }
                }
            }

            if (isset($this->request->data['search'])) {

                if ($this->request->data['search']['role_id'] != '') {
                    $cndmake .= "`users`.`role_id` = '" . $this->request->data['search']['role_id'] . "' AND ";
                }

                if ($this->request->data['search']['subscription_setting_id'] != '') {
                    $cndmake .= "`users`.`subscription_setting_id` = '" . $this->request->data['search']['subscription_setting_id'] . "' AND ";
                }

                if ($this->request->data['search']['status'] != '') {
                    $cndmake .= "`club_membership_requests`.`status` = '" . $this->request->data['search']['status'] . "' AND ";
                }

                if (!empty($this->request->data['search']['invite_from_date']) && empty($this->request->data['search']['invite_to_date'])) {
                    $cndmake .= "`club_membership_requests`.`created` >= '" . $this->request->data['search']['invite_from_date'] . "' AND ";
                }

                if (!empty($this->request->data['search']['invite_from_date']) && !empty($this->request->data['search']['invite_to_date'])) {
                    $cndmake .= "(`club_membership_requests`.`created` >= '" . $this->request->data['search']['invite_from_date'] . "' AND `club_membership_requests`.`created` <= '" . $this->request->data['search']['invite_to_date'] . "') AND ";
                }

                $startFromDate = $this->request->data['search']['start_from_date'];
                $startToDate = $this->request->data['search']['start_to_date'];
                $EndFromDate = $this->request->data['search']['end_from_date'];
                $EndToDate = $this->request->data['search']['end_to_date'];

                if (($startFromDate != '') && ($startToDate != '')
                    && ($EndFromDate != '') && ($EndToDate != '')
                ) {

                    $cndmake .= "`users`.`subscription_start_date` BETWEEN '" . $startFromDate . "' AND '" . $startToDate . "' AND
                    `users`.`subscription_end_date` BETWEEN '" . $EndFromDate . "' AND '" . $EndToDate . "' AND ";

                } else {

                    if ($startFromDate != '') {
                        $cndmake .= "`users`.`subscription_start_date` >= '" . $startFromDate . "' AND ";
                    }

                    if ($startToDate != '') {
                        $cndmake .= "`users`.`subscription_start_date` <= '" . $startToDate . "' AND ";
                    }

                    if ($EndFromDate != '') {

                        $cndmake .= "`users`.`subscription_end_date` >= '" . $EndFromDate . "' AND ";
                    }

                    if ($EndToDate != '') {

                        $cndmake .= "`users`.`subscription_end_date` <= '" . $EndToDate . "' AND ";
                    }
                }
                $cndmake = substr($cndmake, 0, -4);
            }
            unset($this->request->data);
        }

        $this->loadmodel('message');
        $msgCnt = $this->message->find('list', array('conditions' => array('sender_id' => $this->Session->read('Auth.User.id'), 'msg_moto' => 'clubmember_invite'), 'fields' => array('id', 'reciver_id')));
        $countMsgNewary = array_count_values($msgCnt);
        $this->loadmodel('Email_histories');
        $mailCnt = $this->Email_histories->find('list', array('conditions' => array('sender_id' => $this->Session->read('Auth.User.id'), 'msg_type' => 'by_clubmember_invite'), 'fields' => array('id', 'receiver_id')));
        $countMailNewary = array_count_values($mailCnt);

        if (!isset($paramFiter)) {
            $paramFiter = 'all';
        }

        if ($paramFiter == 'all') {
            $options['conditions'] = array(
                $cndmake,
                'club_membership_requests.club_id' => $this->Session->read('Auth.Club.id')
            );

        } elseif (($paramFiter == '30') || ($paramFiter == '60')) {

            if ($paramFiter == '30') {
                $daysBal = date('Y-m-d H:i:s', strtotime(date('Y-m-d') . ' -30  days'));
            } else {
                $daysBal = date('Y-m-d H:i:s', strtotime(date('Y-m-d') . ' -60  days'));
            }
            $options['conditions'] = array(
                $cndmake,
                'club_membership_requests.club_id' => $this->Session->read('Auth.Club.id'),
                'club_membership_requests.created >=' => $daysBal
            );
        }

        $options['joins'] = array(
            array(
                'table' => 'users',
                'alias' => 'users',
                'type' => 'INNER',
                'conditions' => array(
                    'club_membership_requests.user_id = users.id'
                )
            ),
        );

        $options['fields'] = array(
            'club_membership_requests.id',
            'club_membership_requests.club_id',
            'club_membership_requests.user_id',
            'club_membership_requests.request_from',
            'club_membership_requests.status',
            'club_membership_requests.created',
            'users.id',
            'users.username',
            'users.firstname',
            'users.lastname',
            'users.image',
            'users.role_id',
            'users.subscription_setting_id',
            'users.subscription_start_date',
            'users.subscription_end_date'
        );

        $fetchAns = $this->club_membership_requests->find('all', $options);

        if ((isset($UserMsgIds)) || (isset($UserMailIds))) {

            $newOrderAry = array();
            foreach ($fetchAns as $key => $value) {
                $newOrderAry[$value['users']['id']] = $value;
            }

            if (isset($UserMsgIds)) {
                $rowsall = $UserMsgIds;
            } else {
                $rowsall = $UserMailIds;
            }

            $makenewAry = array();
            foreach ($rowsall as $key5 => $value5) {
                $makenewAry[] = $newOrderAry[$value5];
            }

            if (count($fetchAns) > count($makenewAry)) {
                foreach ($newOrderAry as $key9 => $value9) {
                    if (!in_array($key9, $rowsall)) {
                        $makenewAry[] = $value9;
                    }
                }
            }
            $fetchAns = $makenewAry;
        }

        $this->set(compact('fetchAns', 'chknewuserID', 'countMsgNewary', 'countMailNewary'));
    }

    public function clubmembership_invites_print($urlIdArray = NULL)
    {

        $this->layout = '';
        $dataToPrint = explode('#~ ', $urlIdArray);
        $m = 0;
        foreach ($dataToPrint as $value) {

            $urlIdArray1 = (urldecode($value));
            $dataToPrint12 = explode('&', $urlIdArray1);
            foreach ($dataToPrint12 as $key1 => $value1) {

                $dataToPrint12345 = explode('=', $value1);
                $prData[$m][$dataToPrint12345[0]] = $dataToPrint12345[1];
            }
            $m++;
        }

        $this->set(compact('prData'));
    }

    public function send_email_clubmember()
    {

        $this->layout = '';

        $this->loadModel('temp_subscriptionuserlist');
        $this->request->data['detail']['admin_id'] = $this->Session->read('Auth.User.id');
        $this->request->data['detail']['random_id'] = $this->Session->read('Auth.User.random_id');
        $this->request->data['detail']['user_type'] = $this->request->data['usertype'];
        $user_id = urldecode($this->request->data['record_array']);
        $new_array = explode(',', $user_id);

        foreach ($new_array as $user_id1) {

            if (!empty($this->request->data['detail']['random_id'])) {

                $data0 = $this->temp_subscriptionuserlist->find(
                    'all', array(
                    'conditions' => array(
                        'temp_subscriptionuserlist.user_id' => $user_id1,
                        'temp_subscriptionuserlist.admin_id' => $this->request->data['detail']['admin_id'],
                        'temp_subscriptionuserlist.random_id' => $this->request->data['detail']['random_id'],
                        'temp_subscriptionuserlist.user_type' => $this->request->data['detail']['user_type']
                    )
                ));
            } else {
                $data0 = $this->temp_subscriptionuserlist->find(
                    'all', array(
                    'conditions' => array(
                        'temp_subscriptionuserlist.user_id' => $user_id1
                        , 'temp_subscriptionuserlist.admin_id' => $this->request->data['detail']['admin_id']
                        , 'temp_subscriptionuserlist.user_type' => $this->request->data['detail']['user_type'])));
            }

            if (empty($data0)) {

                if (empty($this->request->data['detail']['random_id'])) {
                    unset($this->request->data['detail']['random_id']);
                }
                $this->request->data['detail']['user_id'] = $user_id1;
                $this->temp_subscriptionuserlist->create();
                $this->temp_subscriptionuserlist->save($this->request->data['detail']);
            }
        }

        $find_email = $this->User->find(
            'all', array(
            'fields' => array('email'),
            'conditions' => array('User.id' => $new_array)
        ));
        $email_array = array();
        foreach ($find_email as $key => $value) {

            $email_array[] = $value['User']['email'];
        }
        echo json_encode($email_array);
        exit;
    }

    public function send_msg_clubmember()
    {

        $this->layout = '';
        $this->loadModel('temp_subscriptionuserlist');
        $this->request->data['detail']['admin_id'] = $this->Session->read('Auth.User.id');
        $this->request->data['detail']['random_id'] = $this->Session->read('Auth.User.random_id');
        $this->request->data['detail']['user_type'] = $this->request->data['usertype'];

        $user_id = $this->request->data['record_array'];
        foreach ($user_id as $user_id1) {

            if (!empty($this->request->data['detail']['random_id'])) {

                $data0 = $this->temp_subscriptionuserlist->find(
                    'all', array(
                    'conditions' => array(
                        'temp_subscriptionuserlist.user_id' => $user_id1,
                        'temp_subscriptionuserlist.admin_id' => $this->request->data['detail']['admin_id'],
                        'temp_subscriptionuserlist.random_id' => $this->request->data['detail']['random_id'],
                        'temp_subscriptionuserlist.user_type' => $this->request->data['detail']['user_type']
                    )
                ));

            } else {

                $data0 = $this->temp_subscriptionuserlist->find(
                    'all', array(
                    'conditions' => array(
                        'temp_subscriptionuserlist.user_id' => $user_id1,
                        'temp_subscriptionuserlist.admin_id' => $this->request->data['detail']['admin_id'],
                        'temp_subscriptionuserlist.user_type' => $this->request->data['detail']['user_type']
                    )
                ));
            }

            if (empty($data0)) {

                if (empty($this->request->data['detail']['random_id'])) {
                    unset($this->request->data['detail']['random_id']);
                }
                $this->request->data['detail']['user_id'] = $user_id1;
                $this->temp_subscriptionuserlist->create();
                $this->temp_subscriptionuserlist->save($this->request->data['detail']);
            }
        }

        $find_email = $this->User->find(
            'all', array(
            'fields' => array('email'),
            'conditions' => array('User.id' => $user_id)
        ));
        $email_array = array();
        foreach ($find_email as $key => $value) {
            $email_array[] = $value['User']['email'];
        }
        echo json_encode($email_array);
        exit;
    }

    public function clubmembership_req_members()
    {

        $this->layout = 'club_clubtab';
        $this->loadmodel('roles');
        $this->loadmodel('subscription_settings');
        $this->loadmodel('temp_subscriptionuserlist');
        $RoleList = $this->roles->find(
            'list', array(
            'conditions' => array(
                'id' => array('5', '6', '7', '8')
            ),
            'fields' => array('id', 'name')
        ));

        $versionData = $this->subscription_settings->find(
            'list', array(
            'fields' => array('id', 'subscription_name')
        ));

        $data1 = $this->temp_subscriptionuserlist->find(
            'all', array(
            'conditions' => array(
                'temp_subscriptionuserlist.admin_id' => $this->Session->read('Auth.User.id'),
                'temp_subscriptionuserlist.random_id' => $this->Session->read('Auth.User.random_id'),
                'temp_subscriptionuserlist.user_type' => 'clubmembership_reqFromUser'
            )
        ));

        $chknewuserID = array();

        foreach ($data1 as $key => $value) {
            foreach ($value as $key => $value1) {
                $chknewuserID[] = $value1['user_id'];
            }
        }

        $this->loadmodel('message');
        $msgCnt = $this->message->find(
            'list', array(
            'conditions' => array(
                'sender_id' => $this->Session->read('Auth.User.id'),
                'msg_moto' => 'membershipReq_FromUser'
            ),
            'fields' => array('id', 'reciver_id')
        ));
        $countMsgNewary = array_count_values($msgCnt);

        $this->loadmodel('Email_histories');
        $mailCnt = $this->Email_histories->find(
            'list', array(
            'conditions' => array(
                'sender_id' => $this->Session->read('Auth.User.id'),
                'msg_type' => 'membershipReq_FromUser'
            ),
            'fields' => array('id', 'receiver_id')
        ));
        var_dump($mailCnt);

        $countMailNewary = array_count_values($mailCnt);

        $last_message = array();
        $last_mail = array();

        foreach ($countMsgNewary as $key => $value) {
            var_dump($key);

            $last_msg = $this->messages->find(
                'all', array(
                'fields' => array("messages.created"),
                'conditions' => array(
                    'messages.reciver_id' => $key,
                    'messages.msg_moto' => "membershipReq_FromUser"
                ),
                "order" => "message.id DESC",
                "limit" => "1"
            ));
            var_dump($last_msg);
            die(" clubmembership_req_members ");

            $last_message[$key] = date("Y-m-d", strtotime($last_msg[0]['message']['created']));
        }

        foreach ($countMailNewary as $key => $value) {
            $last_mail1 = $this->Email_histories->find('all', array('fields' => array("Email_histories.created"), 'conditions' => array('Email_histories.receiver_id' => $key, 'Email_histories.msg_type' => "membershipReq_FromUser"), "order" => "Email_histories.id DESC", "limit" => "1"));
            if (!empty($last_mail1)) {
                $last_mail[$key] = date("Y-m-d", strtotime($last_mail1[0]['Email_histories']['created']));
            }
        }

        if ((empty($this->params->pass[0]))
            || ($this->params->pass[0] == 'all')
            || ($this->params->pass[0] == 'new')
        ) {

            $typeFetch = 'all';
        }
        $fetchAns = array();
        $cndmake = '';

        if ($this->request->is(array('post', 'put'))) {

            if (isset($this->request->data['search_order'])) {

                if ($this->request->data['search_order']['searchUser'] != '') {
                    $cndmake .= "((`users`.`username`  LIKE '%" . $this->request->data['search_order']['searchUser'] . "%') OR (`users`.`firstname`  LIKE '%" . $this->request->data['search_order']['searchUser'] . "%')OR (`users`.`lastname`  LIKE '%" . $this->request->data['search_order']['searchUser'] . "%'))";
                }

                if ($this->request->data['search_order']['orderby'] != '') {

                    $ordMake = 'Y';
                    if (($this->request->data['search_order']['orderby'] == 'by_last_mail') || ($this->request->data['search_order']['orderby'] == 'by_last_msg')) {

                        $this->loadmodel('Email_histories');
                        if ($this->request->data['search_order']['orderby'] == 'by_last_msg') {

                            $y = "select reciver_id from (select * from messages ORDER BY id DESC) AS lastmsg where msg_moto='membershipReq_FromUser' and sender_id = '" . $this->Session->read('Auth.User.id') . "' GROUP BY `reciver_id` order by id desc";
                            $orderQuery1 = $this->Email_histories->Query($y);
                            foreach ($orderQuery1 as $key1 => $value1) {
                                $UserMsgIds[] = $value1['lastmsg']['reciver_id'];
                            }

                        } else {

                            $y1 = "select `receiver_id` from (select * from `email_histories` ORDER BY `id` DESC) AS lastmsg where `msg_type`='membershipReq_FromUser' and sender_id = '" . $this->Session->read('Auth.User.id') . "' GROUP BY `receiver_id` order by `id` desc";
                            $orderQuery2 = $this->Email_histories->Query($y1);
                            foreach ($orderQuery2 as $key2 => $value2) {
                                $UserMailIds[] = $value2['lastmsg']['receiver_id'];
                            }

                        }

                    } else {
                        $options['order'] = array('users.' . $this->request->data['search_order']['orderby'] . ' ASC');
                    }
                }
            }


            if (isset($this->request->data['search'])) {


                if ($this->request->data['search']['role_id'] != '') {

                    $cndmake .= "`users`.`role_id` = '" . $this->request->data['search']['role_id'] . "' AND ";
                }

                if ($this->request->data['search']['subscription_setting_id'] != '') {
                    $cndmake .= "`users`.`subscription_setting_id` = '" . $this->request->data['search']['subscription_setting_id'] . "' AND ";
                }

                $request_data = $this->request->data['request_data'];
                if (!empty($request_data)) {

                    if (!empty($request_data['from']) && empty($request_data['to'])) {

                        $cndmake .= "club_membership_requests.created >='" . $request_data['from'] . "' and ";

                    } else if (empty($request_data['from']) && !empty($request_data['to'])) {

                        $cndmake .= "club_membership_requests.created <='" . $request_data['to'] . "' and ";
                    } else if (!empty($request_data['from']) && !empty($request_data['to'])) {

                        $cndmake .= "(club_membership_requests.created >='" . $request_data['from'] . "' and  club_membership_requests.created <='" . $request_data['to'] . "') and ";
                    }
                }

                $cndmake = substr($cndmake, 0, -4);
            }
            unset($this->request->data);
        }

        $options['conditions'] = array(
            $cndmake,
            'club_membership_requests.club_id' => $this->Session->read('Auth.Club.id'),
            'club_membership_requests.request_from' => 'user',
            'club_membership_requests.status' => 'pending'
        );

        $options['joins'] = array(
            array(
                'table' => 'users',
                'alias' => 'users',
                'type' => 'INNER',
                'conditions' => array(
                    'club_membership_requests.user_id = users.id'
                )
            ),
        );

        $options['fields'] = array(
            'club_membership_requests.id',
            'club_membership_requests.club_id',
            'club_membership_requests.user_id',
            'club_membership_requests.request_from',
            'club_membership_requests.status',
            'club_membership_requests.created',
            'users.id', 'users.username',
            'users.firstname',
            'users.lastname',
            'users.image',
            'users.role_id',
            'users.subscription_setting_id',
            'users.subscription_start_date',
            'users.subscription_end_date'
        );
        $fetchAns = $this->club_membership_requests->find('all', $options);

        if ((isset($UserMsgIds)) || (isset($UserMailIds))) {

            $newOrderAry = array();
            foreach ($fetchAns as $key => $value) {
                $newOrderAry[$value['users']['id']] = $value;
            }

            if (isset($UserMsgIds)) {
                $rowsall = $UserMsgIds;
            } else {
                $rowsall = $UserMailIds;
            }

            $makenewAry = array();
            foreach ($rowsall as $key5 => $value5) {
                if (!empty($newOrderAry[$value5])) {
                    $makenewAry[] = $newOrderAry[$value5];
                }
            }

            if (count($fetchAns) > count($makenewAry)) {
                foreach ($newOrderAry as $key9 => $value9) {
                    if (!in_array($key9, $rowsall)) {
                        $makenewAry[] = $value9;
                    }
                }
            }
            $fetchAns = $makenewAry;
        }

        $this->set(
            compact(
                'RoleList', 'versionData', 'fetchAns',
                'countMsgNewary', 'countMailNewary', 'last_message',
                'last_mail', 'chknewuserID'));
    }

    public function give_session_createmembership()
    {

        unset($_SESSION['search_created_user']);
        $_SESSION['search_created_user'] = $this->request->data['username'];
        echo '1';
        exit;
    }

    public function clubmembership_send_requestfromuser_print($urlIdArray = NULL)
    {

        $this->layout = '';
        $dataToPrint = explode('#~ ', $urlIdArray);
        $m = 0;
        foreach ($dataToPrint as $value) {

            $urlIdArray1 = (urldecode($value));
            $dataToPrint12 = explode('&', $urlIdArray1);
            foreach ($dataToPrint12 as $key1 => $value1) {

                $dataToPrint12345 = explode('=', $value1);
                $prData[$m][$dataToPrint12345[0]] = $dataToPrint12345[1];
            }
            $m++;
        }

        $this->set(compact('prData'));
    }

    public function save_payterms()
    {

        $this->autorender = false;
        $this->loadmodel('language_values');
        $this->loadmodel('club_acnt_payterms');
        $languageDetl = $this->language_values->find(
            'list', array(
            'fields' => array('id', 'lang_name')
        ));

        foreach ($languageDetl as $key => $value) {

            $msgNewAry[$value] = $this->request->data['club_acnt_payterms']['msg_' . $value];
            unset($this->request->data['club_acnt_payterms']['msg_' . $value]);
        }

        $makelanAString = serialize($msgNewAry);
        $this->request->data['club_acnt_payterms']['message'] = $makelanAString;

        if ($this->request->data['club_acnt_payterms']['msg_enable'] == '1') {
            $this->request->data['club_acnt_payterms']['msg_enable'] = 'Y';
        } else {
            $this->request->data['club_acnt_payterms']['msg_enable'] = 'N';
        }


        $this->request->data['club_acnt_payterms']['creditcard_status'] = $this->request->data['creditcard_status1'];
        unset($this->request->data['creditcard_status1']);

        $this->club_acnt_payterms->id = 1;
        $this->club_acnt_payterms->save($this->request->data['club_acnt_payterms']);
        return $this->redirect(array('controller' => 'clubs', 'action' => 'clubSettings'));
    }

    function help_edit_page()
    {

        $this->layout = '';
        $this->autoRender = false;
        if (isset($_COOKIE['lg']) && $_COOKIE['lg'] != '') {
            $language = $_COOKIE['lg'];
        } else {
            $language = 'en';
        }
        $this->loadModel('language_values');
        $this->loadModel('site_pages');
        $this->loadModel('help_pages');

        $languageId1 = $this->language_values->find(
            'all', array(
            'conditions' => array(
                'language_values.lang_name' => $language
            )
        ));

        $languageId = $languageId1[0]['language_values']['id'];
        $data102 = $this->help_pages->find(
            'all', array(
            'joins' => array(
                array(
                    'type' => 'inner',
                    'table' => 'site_pages',
                    'conditions' => "help_pages.sitepage_id=site_pages.id"
                )
            ),
            'conditions' => array(
                "AND" => array(
                    "site_pages.pagename" => "home"
                ),
                array(
                    "help_pages.lang_id=1"
                )
            )
        ));

        // renamed $data101 to $data102
        if (count($data102) > 0) {
            $response['content'] = $data102[0]['help_pages']['content'];
            $response['display_mode'] = $data102[0]['help_pages']['display_mode'];
            $response['status'] = '1';
        } else {
            $response['Dtavalue'] = '';
            $response['status'] = '0';
        }
        echo json_encode($response);
        exit;
    }

    public function club_idcards_pricelist()
    {

        $this->layout = 'admin';

        $this->loadmodel('language_values');
        $languageDetl = $this->language_values->find(
            'list', array(
            'fields' => array('id', 'lang_name')
        ));

        $this->loadModel('club_idcard_payterms');
        $club_payTerm = $this->club_idcard_payterms->find('all');

        if (empty($club_payTerm)) {
            /*
             * `send_money_before`
            `credit_card`
            `enable_msg`
            `days_after_assign_cards`
            `message`
             *
             *
             */

            $valSaveSubTerm['club_idcard_payterms']['enable_msg'] = 'N';
            $valSaveSubTerm['club_idcard_payterms']['send_money_before'] = '30';
            $valSaveSubTerm['club_idcard_payterms']['credit_card'] = 'N';
            $valSaveSubTerm['club_idcard_payterms']['days_after_assign_cards'] = '30';
            $valSaveSubTerm['club_idcard_payterms']['message'] = '';
            $this->club_idcard_payterms->create();
            $this->club_idcard_payterms->save($valSaveSubTerm);

            $this->request->data['club_idcard_payterms'] = $valSaveSubTerm['club_idcard_payterms'];
            $this->request->data['club_idcard_payterms']['id'] = $this->club_idcard_payterms->getLastInsertId();

        } else {

            $this->request->data['club_idcard_payterms'] = $club_payTerm[0]['club_idcard_payterms'];

            $b = unserialize($this->request->data['club_idcard_payterms']['message']);
            unset($this->request->data['club_idcard_payterms']['message']);
            $this->request->data['club_idcard_payterms']['message'] = $b;
        }
        $this->set(compact('languageDetl'));
    }

    public function club_price_list()
    {

        $this->layout = 'club_clubtab';
        $this->loadmodel('language_values');
        $languageDetl = $this->language_values->find(
            'list', array(
            'fields' => array('id', 'lang_name')
        ));
        $this->loadModel('club_idcard_payterms');
        $club_payTerm = $this->club_idcard_payterms->find('all');

        if (empty($club_payTerm)) {

            $valSaveSubTerm['club_idcard_payterms']['enable_msg'] = 'N';
            $valSaveSubTerm['club_idcard_payterms']['send_money_before'] = '30';
            $valSaveSubTerm['club_idcard_payterms']['credit_card'] = 'N';
            $valSaveSubTerm['club_idcard_payterms']['days_after_assign_cards'] = '30';
            $valSaveSubTerm['club_idcard_payterms']['message'] = '';
            $this->club_idcard_payterms->create();
            $this->club_idcard_payterms->save($valSaveSubTerm);
            $this->request->data['club_idcard_payterms'] = $valSaveSubTerm['club_idcard_payterms'];
            $this->request->data['club_idcard_payterms']['id'] = $this->club_idcard_payterms->getLastInsertId();

        } else {

            $this->request->data['club_idcard_payterms'] = $club_payTerm[0]['club_idcard_payterms'];
            $b = unserialize($this->request->data['club_idcard_payterms']['message']);
            unset($this->request->data['club_idcard_payterms']['message']);
            $this->request->data['club_idcard_payterms']['message'] = $b;
        }

        $this->set(compact('languageDetl'));

        if ($this->request->is('post')) {

            $backgroud_color = "";
            $_SESSION["Controler_name"] = "clubs";
            $_SESSION["EXIT_URL"] = "club_price_list";
            $_SESSION['Payment_Status'] = "not_done";

            $randm_key = $this->getUniquePatten('8');
            $typeVal = $this->request->data['savedta']['card_val'];
            $card_colorname_id = $this->request->data['savedta']['card_colorname_id'];
            $card_type_id = $this->request->data['savedta']['card_type_id'];

            $this->loadmodel('card_purchases');
            if (isset($this->request->data['savedta']['third_party_type'])) {

                $this->loadmodel('ThirdpartyPricelist');
                $club_printDetails = $this->ThirdpartyPricelist->find(
                    'all', array(
                    'conditions' => array(
                        'ThirdpartyPricelist.card_type_id' => $card_type_id
                    ),
                    'fields' => array('id', $typeVal . '_total', $typeVal)
                ));

                $unserz = $club_printDetails[0]['ThirdpartyPricelist'];
                $amount = $club_printDetails[0]['ThirdpartyPricelist'][$typeVal . '_total'];
                $club_printDetailId = $club_printDetails[0]['ThirdpartyPricelist']['id'];
                $club_printDetail_totalCards = $club_printDetails[0]['ThirdpartyPricelist'][$typeVal];
                $club_printDetail_CardPerPrice = $amount / $club_printDetail_totalCards;
                $third_type_card_status = 'Y';

            } else {

                $this->loadmodel('card_pricelists');
                $club_printDetails = $this->card_pricelists->find(
                    'all', array(
                    'conditions' => array(
                        'card_pricelists.card_colorname_id' => $card_colorname_id,
                        'card_pricelists.card_type_id' => $card_type_id
                    ),
                    'fields' => array('id', $typeVal . '_price', $typeVal . '_total', $typeVal)
                ));
                $unserz = $club_printDetails[0]['card_pricelists'];
                $amount = $club_printDetails[0]['card_pricelists'][$typeVal . '_total'];
                $club_printDetailId = $club_printDetails[0]['card_pricelists']['id'];
                $club_printDetail_totalCards = $club_printDetails[0]['card_pricelists'][$typeVal];
                $club_printDetail_CardPerPrice = $club_printDetails[0]['card_pricelists'][$typeVal . '_price'];
                $third_type_card_status = 'N';
            }

            if ($this->request->data['savedta']['mode_of_purchase'] == 'credit_card') {

                /*
                `randm_key`
                `clubuser_id`
                `card_pricelist_id`
                `card_colorname_id`
                `card_type_id`
                `price_per_card`
                `total_cards`
                `total_amount`
                `mode_of_purchase`
                `payment_status`
                `order_send_to_manufacturer`
                 */
                $invoice_no = $this->invoiceno_generate('purchase_cards'); //generate Invoice number
                $this->request->data['card_purchases']['invoice_no'] = $invoice_no;
                $this->request->data['card_purchases']['randm_key'] = $randm_key;
                $this->request->data['card_purchases']['clubuser_id'] = $this->Session->read('Auth.User.id');
                $this->request->data['card_purchases']['third_party_card_type'] = $third_type_card_status;
                $this->request->data['card_purchases']['card_pricelist_id'] = $club_printDetailId;
                $this->request->data['card_purchases']['card_colorname_id'] = $card_colorname_id;
                $this->request->data['card_purchases']['card_type_id'] = $card_type_id;
                $this->request->data['card_purchases']['price_per_card'] = $club_printDetail_CardPerPrice;
                $this->request->data['card_purchases']['total_cards'] = $club_printDetail_totalCards;
                $this->request->data['card_purchases']['total_amount'] = $amount;
                $this->request->data['card_purchases']['mode_of_purchase'] = 'credit_card';
                $this->request->data['card_purchases']['payment_status'] = 'not_payed';
                $this->request->data['card_purchases']['order_send_to_manufacturer'] = 'N';

                if ($this->card_purchases->save($this->request->data['card_purchases'])) {

                    $this->invoiceno_save($invoice_no);
                    //save Invoice number in Invoicen number pool
                    $this->Session->write('SecuredTransactionDetails.amount', $amount);
                    $this->Session->write('SecuredTransactionDetails.heading', 'Payment of Purchase Cards');
                    $this->Session->write('SecuredTransactionDetails.user_id', $this->Session->read('Auth.User.id'));
                    $this->Session->write('SecuredTransactionDetails.club_setting_id', 0);
                    $this->Session->write('SecuredTransactionDetails.card_pricelist_id', $club_printDetailId);
                    $this->Session->write('SecuredTransactionDetails.randm_key', $randm_key);
                    $this->Session->write('SecuredTransactionDetails.invoice_no', $invoice_no);
                    $this->Session->write('SecuredTransactionDetails.pay_for', 'purchase_cards');
                    return $this->redirect(array('controller' => 'users', 'action' => 'last_payment'));
                }

            } else if ($this->request->data['savedta']['mode_of_purchase'] == 'rest') {

                // Payment done after Receivment of accounts
                /***First check if any already due of cards with rest start ***/
                /*
                 *
                `clubuser_id`
                `card_type_id`
                `mode_of_purchase`=='rest'
                `payment_status`=='not_payed
                 *
                 */
                $chkBeforeSaveacnt = $this->card_purchases->find(
                    'all', array(
                    'conditions' => array(
                        'card_purchases.clubuser_id' => $this->Session->read('Auth.User.id'),
                        'card_purchases.card_type_id' => $card_type_id,
                        'card_purchases.third_party_card_type' => $third_type_card_status,
                        'card_purchases.mode_of_purchase' => 'rest',
                        'card_purchases.payment_status' => 'not_payed'
                    ),
                    'fields' => array('card_purchases.id'),
                    'order' => 'id DESC', "limit" => 1
                ));

                if (empty($chkBeforeSaveacnt)) {

                    $invoice_no = $this->invoiceno_generate('purchase_cards');
                    //generate Invoice number
                    $this->request->data['card_purchases']['invoice_no'] = $invoice_no;
                    $this->request->data['card_purchases']['randm_key'] = $randm_key;
                    $this->request->data['card_purchases']['clubuser_id'] = $this->Session->read('Auth.User.id');
                    $this->request->data['card_purchases']['third_party_card_type'] = $third_type_card_status;
                    $this->request->data['card_purchases']['card_pricelist_id'] = $club_printDetailId;
                    $this->request->data['card_purchases']['card_colorname_id'] = $card_colorname_id;
                    $this->request->data['card_purchases']['card_type_id'] = $card_type_id;
                    $this->request->data['card_purchases']['price_per_card'] = $club_printDetail_CardPerPrice;
                    $this->request->data['card_purchases']['total_cards'] = $club_printDetail_totalCards;
                    $this->request->data['card_purchases']['total_amount'] = $amount;
                    $this->request->data['card_purchases']['total_balance'] = $amount;
                    $this->request->data['card_purchases']['mode_of_purchase'] = 'rest';
                    $this->request->data['card_purchases']['payment_status'] = 'not_payed';
                    $this->request->data['card_purchases']['order_send_to_manufacturer'] = 'N';
                    ////////////////////////////

                    if ($this->card_purchases->save($this->request->data['card_purchases'])) {

                        $this->invoiceno_save($invoice_no);
                        //save Invoice number in Invoicen number pool

                        $userPayData['username'] = ucwords($this->Session->read('Auth.User.firstname') . ' ' . $this->Session->read('Auth.User.lastname'));
                        $userPayData['amount'] = $amount;
                        $userPayData['balance'] = $amount;
                        $userPayData['today_date'] = date("jS M Y", strtotime(date('Y-m-d')));
                        $userPayData['cards'] = $club_printDetail_totalCards;

                        $this->Session->write('SecuredSucessPg', $userPayData);
                        $to = $this->Session->read('Auth.User.email');
                        $Email = new CakeEmail('default');

                        $Email->config('default');
                        $Email->from(array('sheetal@datalogysoftware.com' => 'MovesBook'))
                            ->to($to)
                            ->subject('Purchased cards alloted')
                            ->emailFormat('html')
                            ->template('after_receivement_payment_done_cards')
                            ->viewVars(array('userPayData' => $userPayData));
                        $Email->send();
                        return $this->redirect(array('action' => 'success_purchase_received'));
                    }

                } else {

                    $backgroud_color = "red";
                    $this->Session->setFlash(__('Sorry, But you have already purchased a pack of cards that has not yet been paid in full, please complete the payment process before making a new order'));
                }
            }
        }

        $this->set(compact('backgroud_color'));
    }

    public function save_cardsterms()
    {

        $this->autorender = false;
        $this->loadmodel('club_idcard_payterms');
        $makelanAString = serialize($this->request->data['club_idcard_payterms']['message']);
        unset($this->request->data['club_idcard_payterms']['message']);
        $this->request->data['club_idcard_payterms']['message'] = $makelanAString;

        if ($this->request->data['club_idcard_payterms']['enable_msg'] == '1') {
            $this->request->data['club_idcard_payterms']['enable_msg'] = 'Y';
        } else {
            $this->request->data['club_idcard_payterms']['enable_msg'] = 'N';
        }

        $this->request->data['club_idcard_payterms']['credit_card'] = $this->request->data['creditcard_status1'];
        unset($this->request->data['creditcard_status1']);

        $this->club_idcard_payterms->id = $this->request->data['club_idcard_payterms']['id'];
        $this->club_idcard_payterms->save($this->request->data['club_idcard_payterms']);
        return $this->redirect(array('controller' => 'clubs', 'action' => 'club_idcards_pricelist'));
    }

    public function save_thirdParty_terms()
    {

        $this->autorender = false;
        $this->loadmodel('ThirdpartyPricelist');
        $saveThirdMsg['message'] = serialize($this->request->data['club_third_party']['message']);
        $saveThirdMsg['enable_msg'] = $this->request->data['club_third_party']['club_third_party_enable_msg'];
        $this->loadmodel('ClubThirdpartyMessage');
        $this->ClubThirdpartyMessage->id = '1';
        $third_party_msgDta = $this->ClubThirdpartyMessage->save($saveThirdMsg);
        $this->ThirdpartyPricelist->saveMany($this->request->data['thirdPartyPriceListDta']);
        $this->Session->setFlash(__("Saved successfully"));

        return $this->redirect(array('controller' => 'clubs', 'action' => 'club_idcards_pricelist'));
        exit;
    }


    public function save_cardsterms_individual($uNo)
    {

        $this->autoRender = false;
        $this->loadmodel('club_idcard_payterms');
        $this->loadmodel('users_subscriptionsettings_types');

        $users_subscriptionsettings_types_id = $this->request->data['club_idcard_payterms']['users_subscriptionsettings_types_id'];
        unset($this->request->data['club_idcard_payterms']['users_subscriptionsettings_types_id']);

        $this->request->data['club_idcard_payterms']['credit_card'] = $this->request->data['creditcard_status1'];
        unset($this->request->data['creditcard_status1']);

        if ($this->request->data['club_idcard_payterms']['enable_msg'] == '1') {

            $this->request->data['club_idcard_payterms']['enable_msg'] = 'Y';

        } else {

            $this->request->data['club_idcard_payterms']['enable_msg'] = 'N';

        }

        $msg12 = serialize($this->request->data['club_idcard_payterms']['message']);
        unset($this->request->data['club_idcard_payterms']['message']);
        $this->request->data['club_idcard_payterms']['message'] = $msg12;

        $dta['club_idcard_payterms'] = serialize($this->request->data['club_idcard_payterms']);

        $this->users_subscriptionsettings_types->id = $users_subscriptionsettings_types_id;

        $this->users_subscriptionsettings_types->save($dta);
        return $this->redirect(array('controller' => 'subscriptionuserlists', 'action' => 'checkstatus_identification_cards', $uNo));

    }

    public function club_pricelist_identification_cards()
    {

        $this->autorender = true;
        $this->loadmodel('card_colornames');
        $this->loadmodel('card_pricelists');
        $this->loadmodel('card_types');
        $this->loadmodel('language_values');
        $languageDetl = $this->language_values->find(
            'list', array(
            'fields' => array('id', 'lang_name')
        ));
        $this->set(compact('languageDetl'));

        $chk = $this->club_pricelist_identification_cards_checkdata();
        if ($chk) {

            $card_clr = $this->card_colornames->find('list', array('fields' => array('id', 'var_name')));
            $card_type = $this->card_types->find('list', array('fields' => array('id', 'name')));

            $newMainAry = array();
            $newClrAry = array();
            $card_priceList = $this->card_pricelists->find('all');
            foreach ($card_priceList as $key2 => $value2) {

                $nmeClr = $card_clr[$value2['card_pricelists']['card_colorname_id']];
                $nmeTyp = $card_type[$value2['card_pricelists']['card_type_id']];
                $newMainAry[$nmeClr][$nmeTyp] = $value2['card_pricelists'];
            }
            $card_priceList = $newMainAry;
            $this->request->data = $card_priceList;
            $this->set(compact('card_priceList'));

            $this->loadmodel('ClubThirdpartyMessage');
            $third_party_msgDta = $this->ClubThirdpartyMessage->find('all');
            $this->request->data['club_third_party']['message'] = unserialize($third_party_msgDta[0]['ClubThirdpartyMessage']['message']);
            $this->request->data['club_third_party']['club_third_party_enable_msg'] = $third_party_msgDta[0]['ClubThirdpartyMessage']['enable_msg'];
            $this->request->data['club_third_party']['id'] = $third_party_msgDta[0]['ClubThirdpartyMessage']['id'];


            $this->loadmodel('ThirdpartyPricelist');
            $third_priceList = $this->ThirdpartyPricelist->find('all');
            foreach ($third_priceList as $key_third => $value_third) {
                $nmeTyp_third = $card_type[$value_third['ThirdpartyPricelist']['card_type_id']];
                $newMainAry_third[$nmeTyp_third] = $value_third['ThirdpartyPricelist'];
            }

            $third_priceList = $newMainAry_third;
            $this->request->data['thirdPartyPriceListDta'] = $third_priceList;
            $this->set(compact('third_priceList'));
        }
    }

    public function club_pricelist_identification_cards_checkdata()
    {

        $this->loadmodel('card_colornames');
        $this->loadmodel('card_pricelists');
        $this->loadmodel('card_types');

        $this->autorender = false;
        $card_clr = $this->card_colornames->find('all');
        $card_price_count = $this->card_pricelists->find('all');
        $card_type_count = $this->card_types->find('count');
        $card_type = $this->card_types->find('all', array('fields' => array('id', 'name')));
        $match_count = (count($card_clr) * $card_type_count);

        /*****************************************************
         * Note:
         * Logic for below code*****
         * This match is useful if all types and all colors data are not prsent in table then first we need to add data in database
         * first check count is less than (countColor * countType)
         * if count is less than then go for check which data is not present in table
         * first check all color data is present or not then check for all colors.
         * present all card type for each color we get all values which are not present and then add it in table.
         * ****************************************************/

        if ($match_count > count($card_price_count)) {

            $cardClrAry = array();
            $cardTypAry = array();
            foreach ($card_price_count as $key1 => $value1) {

                if (!in_array($value1['card_pricelists']['card_colorname_id'], $cardClrAry)) {
                    $cardClrAry[] = $value1['card_pricelists']['card_colorname_id'];
                }
                $cardTypAry[$value1['card_pricelists']['card_colorname_id']][] = $value1['card_pricelists']['card_type_id'];
            }

            foreach ($card_clr as $key_clr => $value_clr) {

                $clrID = $value_clr['card_colornames']['id'];
                if (!in_array($clrID, $cardClrAry)) {

                    $savedata['card_pricelists']['card_colorname_id'] = $clrID;
                    foreach ($card_type as $key_typ => $value_typ) {

                        $savedata['card_pricelists']['card_type_id'] = $value_typ['card_types']['id'];
                        $savedata['card_pricelists']['val_a'] = '200';
                        $savedata['card_pricelists']['val_b'] = '300';
                        $savedata['card_pricelists']['val_c'] = '500';
                        $savedata['card_pricelists']['val_d'] = '1000';

                        $this->card_pricelists->create();
                        $this->card_pricelists->save($savedata);
                    }

                } else {

                    $savedata['card_pricelists']['card_colorname_id'] = $clrID;
                    foreach ($card_type as $key_typ => $value_typ) {

                        if (!in_array($value_typ['card_types']['id'], $cardTypAry[$clrID])) {
                            $savedata['card_pricelists']['card_type_id'] = $value_typ['card_types']['id'];
                            $savedata['card_pricelists']['val_a'] = '200';
                            $savedata['card_pricelists']['val_b'] = '300';
                            $savedata['card_pricelists']['val_c'] = '500';
                            $savedata['card_pricelists']['val_d'] = '1000';
                            $this->card_pricelists->create();
                            $this->card_pricelists->save($savedata);
                        }
                    }
                }
            }
            return true;
        } else {
            return true;
        }
        exit;
        /*******************************************************
         * End here checking and adding code
         * *****************************************************/
    }

    public function savepricelist_idcards()
    {

        $this->loadmodel('card_pricelists');

        $this->autorender = false;
        $savedata['card_pricelists'] = $this->request->data;
        $this->card_pricelists->id = $savedata['card_pricelists']['saveid'];

        if ($this->card_pricelists->save($savedata)) {
            echo '1';
            exit;
        } else {
            echo '0';
            exit;
        }
    }

    function club_user_identification_cards()
    {

        $this->loadmodel('card_colornames');
        $this->loadmodel('card_pricelists');
        $this->loadmodel('card_types');

        $this->autorender = true;
        $chk = $this->club_pricelist_identification_cards_checkdata();

        if ($chk) {

            $card_clr = $this->card_colornames->find(
                'list', array(
                'fields' => array('id', 'var_name')
            ));
            $card_type = $this->card_types->find(
                'list', array(
                'fields' => array('id', 'name')
            ));

            $newMainAry = array();
            $newClrAry = array();
            $card_priceList = $this->card_pricelists->find('all');
            foreach ($card_priceList as $key2 => $value2) {

                $nmeClr = $card_clr[$value2['card_pricelists']['card_colorname_id']];
                $nmeTyp = $card_type[$value2['card_pricelists']['card_type_id']];
                $newMainAry[$nmeClr][$nmeTyp] = $value2['card_pricelists'];
            }

            $card_priceList = $newMainAry;
            $this->request->data = $card_priceList;
            $this->set(compact('card_priceList'));
        }

        /***********************
         * Code for default select payment type credit card or REST Start
         */
        $this->loadmodel('users_subscriptionsettings_types');
        $info_coach_limit = $this->users_subscriptionsettings_types->find(
            'all', array(
            'conditions' => array(
                'users_subscriptionsettings_types.user_id' => $this->Session->read('Auth.User.id')
            ),
            'fields' => array('club_idcard_payterms'),
            'limit' => '1',
            "order" => array('users_subscriptionsettings_types.id  DESC')
        ));
        $unserze1 = unserialize($info_coach_limit[0]['users_subscriptionsettings_types']['club_idcard_payterms']);

        if ($unserze1['credit_card'] == 'Y') {
            $mode_of_purchase_def = 'Y';
        } else {
            $mode_of_purchase_def = 'N';
        }
        $this->set(compact('mode_of_purchase_def'));

        /***********************
         * Code for default select payment type credit card or REST end
         */

        /************ Get Selected language value from  cookies **************/
        if (isset($_COOKIE['lg']) && $_COOKIE['lg'] != '') {
            $language_set = $_COOKIE['lg'];
        } else {
            $language_set = 'en';
        }
        /**************************************************************/

        $this->loadmodel('ClubThirdpartyMessage');
        $third_party_msgDta = $this->ClubThirdpartyMessage->find('all');
        $club_third_partyDta['all_message'] = unserialize($third_party_msgDta[0]['ClubThirdpartyMessage']['message']);
        $club_third_partyDta['enable_msg'] = $third_party_msgDta[0]['ClubThirdpartyMessage']['enable_msg'];
        $club_third_partyDta['message'] = $club_third_partyDta['all_message'][$language_set];
        unset($club_third_partyDta['all_message']);
        $this->set(compact('club_third_partyDta'));

        $this->loadmodel('ThirdpartyPricelist');
        $third_priceList = $this->ThirdpartyPricelist->find('all');

        foreach ($third_priceList as $key_third => $value_third) {

            $nmeTyp_third = $card_type[$value_third['ThirdpartyPricelist']['card_type_id']];
            $newMainAry_third[$nmeTyp_third] = $value_third['ThirdpartyPricelist'];
        }

        $third_priceList = $newMainAry_third;
        $this->request->data['thirdPartyPriceListDta'] = $third_priceList;
        $this->set(compact('third_priceList'));
        /*********************************/
    }

    public function success_purchase_received()
    {

        $this->loadmodel('LanguageParagraph');
        $this->layout = 'club_clubtab';

        if (isset($_SESSION['SecuredSucessPg'])) {

            $showData = $this->Session->read('SecuredSucessPg');
            $language1 = $this->LanguageParagraph->find('all');
            $this->set(compact('language1', 'showData'));

        } else {
            return $this->redirect(
                array(
                    'controller' => 'users',
                    'action' => 'club_user_faccess'
                ));
        }
    }

    public function price_list($class = null)
    {

        $this->layout = 'admin';
        $this->loadmodel('language_values');
        $languageDetl = $this->language_values->find(
            'list', array(
            'fields' => array('id', 'lang_name')
        ));
        $this->loadModel('club_idcard_payterms');
        $club_payTerm = $this->club_idcard_payterms->find('all');
        if (empty($club_payTerm)) {

            /*
             * `send_money_before`
            `credit_card`
            `enable_msg`
            `days_after_assign_cards`
            `message`
             *
             *
             */
            $valSaveSubTerm['club_idcard_payterms']['enable_msg'] = 'N';
            $valSaveSubTerm['club_idcard_payterms']['send_money_before'] = '30';
            $valSaveSubTerm['club_idcard_payterms']['credit_card'] = 'N';
            $valSaveSubTerm['club_idcard_payterms']['days_after_assign_cards'] = '30';
            $valSaveSubTerm['club_idcard_payterms']['message'] = '';
            $this->club_idcard_payterms->create();
            $this->club_idcard_payterms->save($valSaveSubTerm);

            $this->request->data['club_idcard_payterms'] = $valSaveSubTerm['club_idcard_payterms'];
            $this->request->data['club_idcard_payterms']['id'] = $this->club_idcard_payterms->getLastInsertId();

        } else {

            $this->request->data['club_idcard_payterms'] = $club_payTerm[0]['club_idcard_payterms'];
            $b = unserialize($this->request->data['club_idcard_payterms']['message']);
            unset($this->request->data['club_idcard_payterms']['message']);
            $this->request->data['club_idcard_payterms']['message'] = $b;
        }
        $this->set(compact('languageDetl', 'class'));
    }

    function club_menu_selected_pricelist()
    {

        $class = $this->request->data["parameter"];
        $this->autorender = true;
        $this->loadmodel('card_colornames');
        $this->loadmodel('card_pricelists');
        $this->loadmodel('card_types');
        $chk = $this->club_pricelist_identification_cards_checkdata();

        if ($chk) {

            $card_clr = $this->card_colornames->find(
                'list', array(
                'fields' => array('id', 'var_name')
            ));

            $card_type = $this->card_types->find(
                'list', array(
                'fields' => array('id', 'name')
            ));

            $newMainAry = array();
            $newClrAry = array();

            $card_priceList = $this->card_pricelists->find('all');
            foreach ($card_priceList as $key2 => $value2) {
                $nmeClr = $card_clr[$value2['card_pricelists']['card_colorname_id']];
                $nmeTyp = $card_type[$value2['card_pricelists']['card_type_id']];
                $newMainAry[$nmeClr][$nmeTyp] = $value2['card_pricelists'];
            }

            $card_priceList = $newMainAry;
            $this->request->data = $card_priceList;
            $this->set(compact('card_priceList', 'class'));
        }
    }

    public function dummy_form()
    {
        $this->layout = 'admin';
    }

    public function card_pay_form()
    {

        $this->autorender = true;
        $error = '';

        if ($this->request->data['purchaseType'] == 'cards') {

            $this->loadmodel('card_purchases');
            $this->loadmodel('card_colornames');
            $this->loadmodel('card_pricelists');
            $this->loadmodel('card_types');
            $this->loadmodel('admin_setting_for_users');
            $this->loadmodel('users');
            $this->loadmodel('card_purchase_rest_details');
            $blockdate = '';

            $info_card_purchases = $this->card_purchases->find(
                'all', array(
                'conditions' => array(
                    'card_purchases.id' => $this->request->data['purchaseid']
                )
            ));
            $Basicdta = $info_card_purchases[0]['card_purchases'];
            $installnment_number = $this->card_purchase_rest_details->find(
                'count', array(
                'conditions' => array(
                    'card_purchase_rest_details.card_purchase_id' => $this->request->data['purchaseid']
                )
            ));

            $now_installnment_number = $installnment_number + 1;
            $clubuser_id = $Basicdta['clubuser_id'];
            $randm_key = $Basicdta['randm_key'];
            $invoice_no = $Basicdta['invoice_no'];
            $card_purchase_id = $this->request->data['purchaseid'];
            $this->unbindUserSocialBanner();

            $options['conditions'] = array(
                'users.id' => $Basicdta['clubuser_id']
            );

            $options['joins'] = array(
                array(
                    'table' => 'countries',
                    'alias' => 'countries',
                    'type' => 'INNER',
                    'conditions' => array(
                        'users.country_id = countries.id'
                    )
                ),
            );
            $options['fields'] = array(
                'users.id',
                'countries.id',
                'countries.currency',
                'countries.exchange_EUR'
            );
            $fetchAns = $this->users->find('all', $options);
            $user_currency = $fetchAns[0]['countries']['currency'];
            $exchnng_rate = $fetchAns[0]['countries']['exchange_EUR'];
            $card_type_id = $Basicdta['card_type_id'];

            if ($Basicdta['mode_of_purchase'] == 'rest') {

                $total_amount = $Basicdta['total_amount'];
                $total_balance = $Basicdta['total_balance'];
                $total_payed = ($total_amount - $total_balance);

                if ($Basicdta['card_delivered'] == 'Y') {

                    if ($Basicdta['card_type_id'] == '1') {
                        $clmn_name = 'block_magneticbadge_date';
                    }

                    if ($Basicdta['card_type_id'] == '2') {
                        $clmn_name = 'block_rfidbadge_date';
                    }

                    if ($Basicdta['card_type_id'] == '3') {
                        $clmn_name = 'block_rfidbracelets_date';
                    }

                    if ($Basicdta['card_type_id'] == '4') {
                        $clmn_name = 'block_smartcards_date';
                    }

                    $info_date_block = $this->admin_setting_for_users->find(
                        'all', array(
                        'conditions' => array(
                            'admin_setting_for_users.user_id' => $Basicdta['clubuser_id']
                        ),
                        'fields' => array('id', $clmn_name)
                    ));
                    $blockdate = $info_date_block[0]['admin_setting_for_users'][$clmn_name];
                } else {
                    $blockdate = 'Not yet delivered';
                }

                if ($Basicdta['card_type_id'] == '1') {
                    $area = 'Magnetic badge';
                }

                if ($Basicdta['card_type_id'] == '2') {
                    $area = 'RFIDs badges';
                }

                if ($Basicdta['card_type_id'] == '3') {
                    $area = 'RFIDs Bracelets';
                }

                if ($Basicdta['card_type_id'] == '4') {
                    $area = 'Smartcards';
                }

                if ($Basicdta['card_colorname_id'] == '1') {
                    $color = 'blank';
                }

                if ($Basicdta['card_colorname_id'] == '2') {
                    $color = 'one color';
                }

                if ($Basicdta['card_colorname_id'] == '3') {
                    $color = 'two color';
                }

                if ($Basicdta['card_colorname_id'] == '4') {
                    $color = 'three color';
                }

                if ($Basicdta['card_colorname_id'] == '5') {
                    $color = 'offset';
                }
                $detail_product = $Basicdta['total_cards'] . ' Cards of ' . $color . ' color';

            } else {
                $error = "Mode of purchase is not REST please Recheck user";
            }
            $this->set(compact('card_purchase_id', 'card_type_id'));

        } else if ($this->request->data['purchaseType'] == 'accounts') {

            $this->loadmodel('club_purchase_accounts');
            $this->loadmodel('club_settings');
            $this->loadmodel('admin_setting_for_users');
            $this->loadmodel('users');
            $this->loadmodel('club_purchase_account_rest_details');
            $blockdate = '';
            $area = 'Accounts';

            $info_account_purchases = $this->club_purchase_accounts->find(
                'all', array(
                'conditions' => array(
                    'club_purchase_accounts.id' => $this->request->data['purchaseid']
                )
            ));
            $Basicdta = $info_account_purchases[0]['club_purchase_accounts'];
            $installnment_number = $this->club_purchase_account_rest_details->find(
                'count', array(
                'conditions' => array(
                    'club_purchase_account_rest_details.club_purchase_account_id' => $this->request->data['purchaseid']
                )
            ));

            $now_installnment_number = $installnment_number + 1;
            $clubuser_id = $Basicdta['clubuser_id'];
            $randm_key = $Basicdta['randm_key'];
            $invoice_no = $Basicdta['invoice_no'];
            $club_purchase_account_id = $this->request->data['purchaseid'];
            $this->unbindUserSocialBanner();
            $options['conditions'] = array('users.id' => $Basicdta['clubuser_id']);
            $options['joins'] = array(
                array(
                    'table' => 'countries',
                    'alias' => 'countries',
                    'type' => 'INNER',
                    'conditions' => array('users.country_id = countries.id')
                ),
            );

            $options['fields'] = array('users.id', 'countries.id', 'countries.currency', 'countries.exchange_EUR');

            $fetchAns = $this->users->find('all', $options);
            $user_currency = $fetchAns[0]['countries']['currency'];
            $exchnng_rate = $fetchAns[0]['countries']['exchange_EUR'];
            if ($Basicdta['mode_of_purchase'] == 'rest') {

                $total_amount = $Basicdta['total_amount'];
                $total_balance = $Basicdta['total_balance'];
                $total_payed = ($total_amount - $total_balance);
                $info_date_block = $this->admin_setting_for_users->find(
                    'all', array(
                    'conditions' => array(
                        'admin_setting_for_users.user_id' => $Basicdta['clubuser_id']
                    ),
                    'fields' => array('id', 'block_account_date')
                ));

                $blockdate = $info_date_block[0]['admin_setting_for_users']['block_account_date'];
                $info_set = $this->club_settings->find(
                    'all', array(
                    'conditions' => array(
                        'club_settings.id' => $Basicdta['club_setting_id']
                    ),
                    'fields' => array('id', 'name')
                ));

                $accountVersion = $info_set[0]['club_settings']['name'];
                $detail_product = $Basicdta['accounts'] . ' accounts of ' . $accountVersion . ' version';

            } else {
                $error = "Mode of purchase is not REST please Recheck user";
            }

            $this->set(compact('club_purchase_account_id'));
        }

        $Main_type = $this->request->data['purchaseType'];

        $this->set(compact('error', 'total_amount', 'total_balance', 'total_payed', 'blockdate', 'area', 'detail_product', 'user_currency', 'exchnng_rate', 'now_installnment_number', 'clubuser_id', 'randm_key', 'invoice_no', 'Main_type'));
    }

    public function card_save_rest_payments()
    {

        $this->autorender = false;
        if ($this->request->data['typ'] == 'cards') {

            $this->loadmodel('card_purchase_rest_details');
            $this->loadmodel('card_purchases');
            $this->loadmodel('admin_setting_for_users');

            $invoice = $this->request->data['invoice_no'] . '-' . $this->request->data['installnment_no'];
            $saveDta['card_purchase_rest_details']['card_purchase_id'] = $this->request->data['card_purchase_id'];
            $saveDta['card_purchase_rest_details']['randm_key'] = $this->request->data['randm_key'];
            $saveDta['card_purchase_rest_details']['invoice_no'] = $invoice;
            $saveDta['card_purchase_rest_details']['admin_id'] = $this->Session->read('Auth.User.id');
            $saveDta['card_purchase_rest_details']['clubuser_id'] = $this->request->data['clubuserID'];
            $saveDta['card_purchase_rest_details']['pay_currency'] = $this->request->data['pay_currency'];
            $saveDta['card_purchase_rest_details']['pay_currency_amnt'] = $this->request->data['pay_currency_amnt'];
            $saveDta['card_purchase_rest_details']['euro_payment_done'] = $this->request->data['euro_payment_done'];
            $saveDta['card_purchase_rest_details']['new_balance_amnt'] = $this->request->data['new_balance_amnt'];

            $this->card_purchase_rest_details->create();
            if ($this->card_purchase_rest_details->save($saveDta)) {

                $saveDta_purchase['card_purchases']['total_balance'] = $this->request->data['new_balance_amnt'];

                if ($this->request->data['new_balance_amnt'] == '0') {

                    $saveDta_purchase['card_purchases']['payment_status'] = 'payed';

                    if ($this->request->data['card_type_id'] == '1') {

                        $saveDta_blck['admin_setting_for_users']['block_magneticbadge_date'] = '';
                        $saveDta_blck['admin_setting_for_users']['block_magnetic'] = 'N';

                    }

                    if ($this->request->data['card_type_id'] == '2') {

                        $saveDta_blck['admin_setting_for_users']['block_rfidbadge_date'] = '';
                        $saveDta_blck['admin_setting_for_users']['block_rfidbadges'] = 'N';

                    }

                    if ($this->request->data['card_type_id'] == '3') {

                        $saveDta_blck['admin_setting_for_users']['block_rfidbracelets_date'] = '';
                        $saveDta_blck['admin_setting_for_users']['block_rfidbracelets'] = 'N';

                    }

                    if ($this->request->data['card_type_id'] == '4') {

                        $saveDta_blck['admin_setting_for_users']['block_smartcards_date'] = '';
                        $saveDta_blck['admin_setting_for_users']['block_smartcards'] = 'N';
                    }

                    $info_date_block = $this->admin_setting_for_users->find(
                        'all', array(
                        'conditions' => array(
                            'admin_setting_for_users.user_id' => $this->request->data['clubuserID']
                        ), 'fields' => array('id')
                    ));
                    $this->admin_setting_for_users->id = $info_date_block[0]['admin_setting_for_users']['id'];
                    $this->admin_setting_for_users->save($saveDta_blck);
                }

                $this->card_purchases->id = $this->request->data['card_purchase_id'];
                $this->card_purchases->save($saveDta_purchase);

                /** ************************************************************************* */
                $this->loadmodel('user_payments');
                $saveDta1['user_payments']['randm_key'] = $this->request->data['randm_key'];
                $saveDta1['user_payments']['invoice_no'] = $this->request->data['invoice_no'];
                $saveDta1['user_payments']['user_id'] = $this->request->data['clubuserID'];
                $saveDta1['user_payments']['pay_for'] = 'purchase_cards';
                $saveDta1['user_payments']['date'] = date('y-m-d');
                $saveDta1['user_payments']['payment_type'] = 'Direct_to_Admin';
                $saveDta1['user_payments']['rest_payment'] = 'Y';

                $info_userpayments = $this->user_payments->find(
                    'all', array(
                    'conditions' => array(
                        'user_payments.randm_key' => $this->request->data['randm_key'],
                        'user_payments.invoice_no' => $this->request->data['invoice_no'],
                        'user_payments.user_id' => $this->request->data['clubuserID']
                    ),
                    'fields' => array('id', 'amount')
                ));

                if (!empty($info_userpayments)) {

                    $this->user_payments->id = $info_userpayments[0]['user_payments']['id'];
                    $saveDta1['user_payments']['amount'] = ($this->request->data['euro_payment_done'] + $info_userpayments[0]['user_payments']['amount']);
                } else {

                    $this->user_payments->create();
                    $saveDta1['user_payments']['amount'] = $this->request->data['euro_payment_done'];
                }

                $this->user_payments->save($saveDta1);

                /******************************************************************** */
                echo '1';
                exit;
            }

            echo '1';
            exit;

        } elseif ($this->request->data['typ'] == 'accounts') {

            $this->loadmodel('club_purchase_accounts');
            $this->loadmodel('club_purchase_account_rest_details');
            $this->loadmodel('club_settings');
            $this->loadmodel('admin_setting_for_users');
            $this->loadmodel('users');

            $invoice = $this->request->data['invoice_no'] . '-' . $this->request->data['installnment_no'];
            $saveDta['club_purchase_account_rest_details']['club_purchase_account_id'] = $this->request->data['card_purchase_id'];
            $saveDta['club_purchase_account_rest_details']['randm_key'] = $this->request->data['randm_key'];
            $saveDta['club_purchase_account_rest_details']['invoice_no'] = $invoice;
            $saveDta['club_purchase_account_rest_details']['admin_id'] = $this->Session->read('Auth.User.id');
            $saveDta['club_purchase_account_rest_details']['clubuser_id'] = $this->request->data['clubuserID'];
            $saveDta['club_purchase_account_rest_details']['pay_currency'] = $this->request->data['pay_currency'];
            $saveDta['club_purchase_account_rest_details']['pay_currency_amnt'] = $this->request->data['pay_currency_amnt'];
            $saveDta['club_purchase_account_rest_details']['euro_payment_done'] = $this->request->data['euro_payment_done'];
            $saveDta['club_purchase_account_rest_details']['new_balance_amnt'] = $this->request->data['new_balance_amnt'];

            $this->club_purchase_account_rest_details->create();
            if ($this->club_purchase_account_rest_details->save($saveDta)) {

                $saveDta_purchase['club_purchase_accounts']['total_balance'] = $this->request->data['new_balance_amnt'];
                if ($this->request->data['new_balance_amnt'] == '0') {

                    $saveDta_purchase['club_purchase_accounts']['payment_status'] = 'payed';
                    $saveDta_blck['admin_setting_for_users']['block_account_date'] = '';
                    $saveDta_blck['admin_setting_for_users']['block_account_status'] = 'N';
                    $saveDta_blck['admin_setting_for_users']['block_purchase_account_id'] = '0';
                    $info_date_block = $this->admin_setting_for_users->find(
                        'all', array(
                        'conditions' => array(
                            'admin_setting_for_users.user_id' => $this->request->data['clubuserID']
                        ),
                        'fields' => array('id')
                    ));

                    $this->admin_setting_for_users->id = $info_date_block[0]['admin_setting_for_users']['id'];
                    $this->admin_setting_for_users->save($saveDta_blck);
                }

                $this->club_purchase_accounts->id = $this->request->data['card_purchase_id'];
                $this->club_purchase_accounts->save($saveDta_purchase);

                /****************************************************** */

                $this->loadmodel('user_payments');
                $saveDta1['user_payments']['randm_key'] = $this->request->data['randm_key'];
                $saveDta1['user_payments']['invoice_no'] = $this->request->data['invoice_no'];
                $saveDta1['user_payments']['user_id'] = $this->request->data['clubuserID'];
                $saveDta1['user_payments']['pay_for'] = 'purchase_accounts';
                $saveDta1['user_payments']['date'] = date('y-m-d');
                $saveDta1['user_payments']['payment_type'] = 'Direct_to_Admin';
                $saveDta1['user_payments']['rest_payment'] = 'Y';

                $info_userpayments = $this->user_payments->find(
                    'all', array(
                    'conditions' => array(
                        'user_payments.randm_key' => $this->request->data['randm_key'],
                        'user_payments.invoice_no' => $this->request->data['invoice_no'],
                        'user_payments.user_id' => $this->request->data['clubuserID']
                    ), 'fields' => array('id', 'amount')
                ));

                if (!empty($info_userpayments)) {

                    $this->user_payments->id = $info_userpayments[0]['user_payments']['id'];
                    $saveDta1['user_payments']['amount'] = ($this->request->data['euro_payment_done'] + $info_userpayments[0]['user_payments']['amount']);
                } else {

                    $this->user_payments->create();
                    $saveDta1['user_payments']['amount'] = $this->request->data['euro_payment_done'];
                }

                $this->user_payments->save($saveDta1);

                /********************************************************* */
                echo '1';
                exit;
            }

            echo '1';
            exit;
        }
    }

    public function manufacturing()
    {

        $this->layout = "admin";
        $this->loadModel('countries');
        $this->loadModel('manufacturing_order');
        $this->loadModel('manufacturers');
        $this->loadmodel('temp_subscriptionuserlist');

        $data1 = $this->temp_subscriptionuserlist->find(
            'all', array(
            'conditions' => array(
                'temp_subscriptionuserlist.admin_id' => $this->Session->read('Auth.User.id'),
                'temp_subscriptionuserlist.random_id' => $this->Session->read('Auth.User.random_id'),
                'temp_subscriptionuserlist.user_type' => 'manufacturer_list'
            )
        ));

        $chknewuserID = array();
        foreach ($data1 as $key => $value) {

            foreach ($value as $key => $value1) {

                $chknewuserID[] = $value1['user_id'];
            }
        }

        if (!isset($this->params['pass'][0])) {
            $chkparam = 'all';
        } else {
            $chkparam = $this->params['pass'][0];
        }

        $cndmake = '';
        $limit = '';
        if ($chkparam == 'not_sent') {
            $cndmake = "`card_purchase`.`card_delivered`='N'";
        } elseif ($chkparam == 'sent') {
            $cndmake = "`card_purchase`.`card_delivered`='Y'";
        } elseif ($chkparam == 'payed') {
            $cndmake = "`manufacturing_order`.`manufacturer_balance`='0'";
        } elseif ($chkparam == 'not_payed') {
            $cndmake = "`manufacturing_order`.`manufacturer_balance`>'0'";
        }

        if ($chkparam == 'last') {
            $limit = '15';
        } else {
            $limit = '';
        }

        if ($this->request->is(array('post', 'put'))) {

            $ordChngMake = 'N';
            if ($cndmake != '') {
                $cndmake .= "AND ";
            }

            if (isset($this->request->data['search_order'])) {

                if ((trim($this->request->data['search_order']['searchUser']) == '')
                    && ($this->request->data['search_order']['orderby'] == '')
                    && (($this->request->data['search_order']['manufacturers_id'] == '')
                        || ($this->request->data['search_order']['manufacturers_id'] == '0'))
                ) {

                    $this->Session->setFlash(__("Select any option for search"));
                    if (isset($this->params['pass'][0])) {
                        $param1 = $this->params['pass'][0];
                    } else {
                        $param1 = '';
                    }
                    return $this->redirect(array('controller' => 'clubs', 'action' => 'manufacturing', $param1));

                } else {

                    if ($this->request->data['search_order']['searchUser'] != '') {
                        $cndmake .= "(`User`.`username`  LIKE '%" . $this->request->data['search_order']['searchUser'] . "%')";
                    }

                    if ($this->request->data['search_order']['manufacturers_id'] != '') {

                        $cndmake .= "(`manufacturing_order`.`manufacturer_id` ='" . $this->request->data['search_order']['manufacturers_id'] . "')";
                    }


                    if ($this->request->data['search_order']['orderby'] != '') {

                        $ordMake = 'Y';
                        $ordChngMake_user = 'N';
                        $ordChngMake_manufacturer = 'N';
                        if ($this->request->data['search_order']['orderby'] == 'username') {

                            $ordChngMake_user = 'Y';
                            $this->loadModel('users');
                            $y = "select id from users where id in(select `clubuser_id` from manufacturing_orders GROUP BY `clubuser_id`) order by username ASC";
                            $orderQuery1 = $this->users->Query($y);

                            foreach ($orderQuery1 as $key1 => $value1) {
                                $UserNameIds[] = $value1['users']['id'];
                            }

                        } elseif ($this->request->data['search_order']['orderby'] == 'manufacturer_name') {

                            $ordChngMake_manufacturer = 'Y';
                            $this->loadModel('users');
                            $y2 = "select id from manufacturers where id in(select `manufacturer_id` from manufacturing_orders GROUP BY `manufacturer_id`) order by name ASC";
                            $orderQuery2 = $this->users->Query($y2);
                            foreach ($orderQuery2 as $key1 => $value1) {
                                $UserNameIds[] = $value1['manufacturers']['id'];
                            }

                        } else if (($this->request->data['search_order']['orderby'] == 'date_purchase') || ($this->request->data['search_order']['orderby'] == 'date_storage')) {

                            $options['order'] = array('manufacturing_order.' . $this->request->data['search_order']['orderby'] . ' ASC');
                        }
                    } else {
                        $options['order'] = array('manufacturing_order.id  DESC');
                    }
                }
            }// end if search_order

            if (isset($this->request->data['search'])) {

                if ($this->request->data['search']['manufacturer_country_id'] != '') {
                    $cndmake .= "`manufacturing_order`.`country_id` = '" . $this->request->data['search']['manufacturer_country_id'] . "' AND ";
                }

                if ($this->request->data['search']['payment_stats'] != '') {

                    if ($this->request->data['search']['payment_stats'] == 'payed') {
                        $cndmake .= "`manufacturing_order`.`manufacturer_balance` = '0' AND ";
                    } else {
                        $cndmake .= "`manufacturing_order`.`manufacturer_balance` != '0' AND ";
                    }
                }


                $purchaseFromDate = $this->request->data['search']['purchase_from_date'];
                $purchaseToDate = $this->request->data['search']['purchase_to_date'];
                $storageFromDate = $this->request->data['search']['storage_from_date'];
                $storageToDate = $this->request->data['search']['storage_to_date'];

                if (($purchaseFromDate != '') && ($purchaseToDate != '')) {

                    $cndmake .= "(`manufacturing_order`.`date_purchase` BETWEEN '" . $purchaseFromDate . "' AND '" . $purchaseToDate . "') AND ";
                } else {

                    if ($purchaseFromDate != '') {

                        $cndmake .= "(`manufacturing_order`.`date_purchase` >='" . $purchaseFromDate . "') AND ";
                    } elseif ($purchaseToDate != '') {
                        $cndmake .= "(`manufacturing_order`.`date_purchase` <='" . $purchaseToDate . "') AND ";
                    }
                }

                if (($storageFromDate != '') && ($storageToDate != '')) {

                    $cndmake .= "(`manufacturing_order`.`date_storage` BETWEEN '" . $storageFromDate . "' AND '" . $storageToDate . "') AND ";
                } else {

                    if ($storageFromDate != '') {
                        $cndmake .= "(`manufacturing_order`.`date_storage` >='" . $storageFromDate . "') AND ";
                    } else if ($storageToDate != '') {
                        $cndmake .= "(`manufacturing_order`.`date_storage` <='" . $storageToDate . "') AND ";
                    }
                }

                if ($this->request->data['search']['user_country_id'] != '') {

                    $cndmake_query = "select id from users where country_id = '" . $this->request->data['search']['user_country_id'] . "' and id in(select clubuser_id from manufacturing_orders group by clubuser_id)";
                    $orderQuery2 = $this->users->Query($cndmake_query);

                    foreach ($orderQuery2 as $key1 => $value1) {
                        $clubUserIds[] = $value1['users']['id'];
                    }

                    $clubUserIds = join(',', $clubUserIds);
                    $cndmake .= "(`manufacturing_order`.`clubuser_id` in('" . $clubUserIds . "')) AND ";
                }


                if (($this->request->data['search']['delivery_status'] != '')
                    && ($this->request->data['search']['card_type_id'] != '')
                ) {

                    $cndmake_query = "select id from card_purchases where card_delivered = '" . $this->request->data['search']['delivery_status'] . "' and card_type_id = '" . $this->request->data['search']['card_type_id'] . "' and id in(select card_purchase_id from manufacturing_orders group by card_purchase_id)";

                    $orderQuery2 = $this->users->Query($cndmake_query);

                    foreach ($orderQuery2 as $key1 => $value1) {
                        $clubUserIds[] = $value1['card_purchases']['id'];
                    }

                    $clubUserIds = join(',', $clubUserIds);

                    $cndmake .= "(`manufacturing_order`.`card_purchase_id` in('" . $clubUserIds . "')) AND ";
                } else {

                    if ($this->request->data['search']['delivery_status'] != '') {

                        $cndmake_query = "select id from card_purchases where card_delivered = '" . $this->request->data['search']['delivery_status'] . "' and id in(select card_purchase_id from manufacturing_orders group by card_purchase_id)";

                        $orderQuery2 = $this->users->Query($cndmake_query);

                        foreach ($orderQuery2 as $key1 => $value1) {
                            $clubUserIds[] = $value1['card_purchases']['id'];
                        }

                        $clubUserIds = join(',', $clubUserIds);

                        $cndmake .= "(`manufacturing_order`.`card_purchase_id` in('" . $clubUserIds . "')) AND ";

                    }

                    if ($this->request->data['search']['card_type_id'] != '') {

                        $cndmake_query1 = "select id from card_purchases where card_type_id = '" . $this->request->data['search']['card_type_id'] . "' and id in(select card_purchase_id from manufacturing_orders group by card_purchase_id)";
                        $orderQuery21 = $this->users->Query($cndmake_query1);

                        foreach ($orderQuery21 as $key2 => $value2) {
                            $clubUserIds1[] = $value2['card_purchases']['id'];
                        }
                        $clubUserIds1 = join(',', $clubUserIds1);
                        $cndmake .= "(`manufacturing_order`.`card_purchase_id` in('" . $clubUserIds1 . "')) AND ";
                    }
                }

                $cndmake = substr($cndmake, 0, -4);

                $options['order'] = array('manufacturing_order.id  DESC');
            }

            $options['conditions'] = array($cndmake);
            $options['fields'] = array(
                'manufacturing_order.id',
                'manufacturing_order.manufacturer_id',
                'manufacturing_order.clubuser_id',
                'manufacturing_order.randm_key',
                'manufacturing_order.date_purchase',
                'manufacturing_order.date_storage',
                'manufacturing_order.manufacturer_total_cost',
                'manufacturing_order.manufacturer_payed',
                'manufacturing_order.manufacturer_balance',
                'manufacturing_order.country_id',
                'manufacturing_order.last_order',
                'manufacturing_order.last_order_amount',
                'User.id', 'User.role_id',
                'User.username', 'User.country_id',
                'User.location', 'User.image',
                'card_purchase.id',
                'card_purchase.card_type_id',
                'card_purchase.card_colorname_id',
                'card_purchase.payment_status',
                'card_purchase.total_cards',
                'card_purchase.total_amount',
                'card_purchase.card_delivered',
                'card_purchase.card_range_from',
                'card_purchase.card_range_to'
            );

            $result_manufacturer = $this->manufacturing_order->find('all', $options);

            if (isset($ordMake)) {

                if ($ordChngMake_user == 'Y' || $ordChngMake_manufacturer == 'Y') {

                    $usernewAry = array();
                    //order by username OR manufacturer name

                    if ($ordChngMake_user == 'Y') {

                        foreach ($UserNameIds as $key => $value) {
                            foreach ($result_manufacturer as $key1 => $value1) {
                                if ($value == $value1['User']['id']) {
                                    $usernewAry[$value][] = $value1;
                                }
                            }
                        }

                    } elseif ($ordChngMake_manufacturer == 'Y') {

                        foreach ($UserNameIds as $key => $value) {
                            foreach ($result_manufacturer as $key1 => $value1) {
                                if ($value == $value1['manufacturing_order']['manufacturer_id']) {
                                    $usernewAry[$value][] = $value1;
                                }
                            }
                        }
                    }

                    foreach ($usernewAry as $key => $value) {

                        foreach ($value as $key3 => $value3) {

                            $result_manufacturer_new[] = $value3;
                        }
                    }
                    $result_manufacturer = $result_manufacturer_new;
                }
            }

        } else {


            /** *************************************************
             *                                                  *
             * ************************************************ */
            $result_manufacturer = $this->manufacturing_order->find(
                'all', array(
                'conditions' => array($cndmake),
                'fields' => array(
                    'manufacturing_order.id',
                    'manufacturing_order.manufacturer_id',
                    'manufacturing_order.clubuser_id',
                    'manufacturing_order.randm_key',
                    'manufacturing_order.date_purchase',
                    'manufacturing_order.date_storage',
                    'manufacturing_order.manufacturer_total_cost',
                    'manufacturing_order.manufacturer_payed',
                    'manufacturing_order.manufacturer_balance',
                    'manufacturing_order.country_id',
                    'manufacturing_order.last_order',
                    'manufacturing_order.last_order_amount',
                    'User.id', 'User.role_id',
                    'User.username', 'User.country_id',
                    'User.location', 'User.image',
                    'card_purchase.id',
                    'card_purchase.card_type_id',
                    'card_purchase.card_colorname_id',
                    'card_purchase.payment_status',
                    'card_purchase.total_cards',
                    'card_purchase.total_amount',
                    'card_purchase.card_delivered',
                    'card_purchase.card_range_from',
                    'card_purchase.card_range_to'
                ),
                'order' => array('manufacturing_order.id  DESC'),
                'limit' => $limit
            ));
        }

        $this->loadModel('card_colornames');
        $this->loadModel('card_types');
        $countryList = $this->countries->find(
            'list', array(
            'fields' => array('id', 'name')
        ));

        $card_colornamesList = $this->card_colornames->find(
            'list', array(
            'fields' => array('id', 'name')
        ));

        $card_typesList = $this->card_types->find(
            'list', array(
            'fields' => array('id', 'name')
        ));

        $manufacturers_List = $this->manufacturers->find(
            'list', array(
            'fields' => array('id', 'name')
        ));

        $encrypt_id = array();
        if (!empty($result_manufacturer)) {
            foreach ($result_manufacturer as $row) {
                $encrypt_id[$row['card_purchase']['id']] = $this->cryptUrl($row['card_purchase']['id']);
            }
        }
        $this->set(compact('result_manufacturer', 'encrypt_id', 'countryList', 'card_colornamesList', 'card_typesList', 'manufacturers_List', 'chknewuserID'));
    }

    public function manufacturing_print($urlIdArray = NULL)
    {

        $this->layout = '';
        $dataToPrint = explode('#~ ', $urlIdArray);
        $m = 0;
        foreach ($dataToPrint as $value) {

            $urlIdArray1 = (urldecode($value));
            $dataToPrint12 = explode('&', $urlIdArray1);

            foreach ($dataToPrint12 as $key1 => $value1) {

                $dataToPrint12345 = explode('=', $value1);
                $prData[$m][$dataToPrint12345[0]] = $dataToPrint12345[1];
            }
            $m++;
        }
        $this->set(compact('prData'));
    }

    public function manufacturing_add($encryptuserID)
    {

        $this->loadModel('card_rfidbracelets_pools');
        $this->layout = "admin";
        $club_purchase_id = $this->decryptUrl($encryptuserID);
        $this->set('clubuserId', $club_purchase_id);

        $this->loadModel('manufacturing_order');
        $this->loadModel('card_purchases');
        $this->loadModel('card_purchase_rest_details');
        $this->loadModel('countries');
        $this->loadModel('manufacturers');

        $manufacturers_List = $this->manufacturers->find(
            'list', array(
            'fields' => array(
                'id',
                'name'
            )
        ));

        $options['conditions'] = array(
            'card_purchases.id' => $club_purchase_id
        );

        $options['joins'] = array(
            array(
                'table' => 'Users',
                'alias' => 'users',
                'type' => 'INNER',
                'conditions' => array(
                    'card_purchases.clubuser_id = users.id'
                )
            ),
            array(
                'table' => 'card_types',
                'alias' => 'card_types',
                'type' => 'INNER',
                'conditions' => array(
                    'card_purchases.card_type_id = card_types.id'
                )
            ),
            array(
                'table' => 'card_colornames',
                'alias' => 'card_colornames',
                'type' => 'INNER',
                'conditions' => array(
                    'card_purchases.card_colorname_id = card_colornames.id'
                )
            ),
            array(
                'table' => 'clubs',
                'alias' => 'clubs',
                'type' => 'INNER',
                'conditions' => array(
                    'users.id = clubs.user_id'
                )
            )
        );

        $options['fields'] = array(
            'card_purchases.id', 'card_purchases.randm_key', 'card_purchases.invoice_no',
            'card_purchases.clubuser_id',
            'card_purchases.card_pricelist_id',
            'card_purchases.card_colorname_id',
            'card_purchases.card_type_id',
            'card_purchases.total_cards',
            'card_purchases.total_amount',
            'card_purchases.total_balance',
            'card_purchases.mode_of_purchase',
            'card_purchases.payment_status',
            'card_purchases.card_delivered_date',
            'card_purchases.card_delivered',
            'card_purchases.created',
            'clubs.club_address',
            'clubs.annotations',
            'users.id',
            'users.firstname',
            'users.lastname',
            'users.email',
            'users.country_id',
            'users.zipcode',
            'users.location',
            'users.mobile_number',
            'users.mobile_number1',
            'card_types.id',
            'card_types.name',
            'card_colornames.id',
            'card_colornames.name',
        );

        $fetchAns = $this->card_purchases->find('all', $options);

        $fetch_restdetails = $this->card_purchase_rest_details->find(
            'all', array(
            'conditions' => array(
                'card_purchase_rest_details.card_purchase_id' => $club_purchase_id
            ),
            'fields' => array(
                'card_purchase_rest_details.euro_payment_done',
                'card_purchase_rest_details.created'
            ),
            'order' => array(
                'card_purchase_rest_details.id' => 'desc'
            ),
            'limit' => '1'
        ));

        if (isset($fetch_restdetails[0]['card_purchase_rest_details'])) {

            $fetchAns[0]['card_purchase_rest_details'] = $fetch_restdetails[0]['card_purchase_rest_details'];
        } else {

            $fetchAns[0]['card_purchase_rest_details']['euro_payment_done'] = '0';
            $fetchAns[0]['card_purchase_rest_details']['created'] = '';
        }

        $this->set('resultAry', $fetchAns[0]);
        $countryList = $this->countries->find(
            'list', array(
            'fields' => array('id', 'name')
        ));
        $this->set(compact('countryList', 'manufacturers_List'));
        $fetch_Manufacturer_details = $this->manufacturing_order->find(
            'all', array(
            'conditions' => array(
                'manufacturing_order.card_purchase_id' => $club_purchase_id
            )
        ));

        if ($this->request->is('post')) {

            unset($this->request->data['other']);

            $delivery_status = $this->request->data['manufacturer']['delivery_status'];
            $delivery_date = $this->request->data['manufacturer']['delivery_date'];

            unset($this->request->data['manufacturer']['delivery_status']);
            unset($this->request->data['manufacturer']['delivery_date']);

            if (isset($fetch_Manufacturer_details[0]['manufacturing_order']['id'])) {
                $this->manufacturing_order->id = $fetch_Manufacturer_details[0]['manufacturing_order']['id'];
            } else {

                $fetch_ManufacturerLast_details = $this->manufacturing_order->find(
                    'all', array(
                    'conditions' => array(
                        'manufacturing_order.manufacturer_id' => $this->request->data['manufacturer']['manufacturer_id']
                    ),
                    'order' => array(
                        'manufacturing_order.id' => 'DESC'
                    ),
                    'fields' => array(
                        'manufacturing_order.created',
                        'manufacturing_order.manufacturer_total_cost'
                    )
                ));

                if (isset($fetch_ManufacturerLast_details[0]['manufacturing_order'])) {

                    $this->request->data['manufacturer']['last_order_amount'] = $fetch_ManufacturerLast_details[0]['manufacturing_order']['manufacturer_total_cost'];
                    $this->request->data['manufacturer']['last_order'] = date('Y-m-d', strtotime($fetch_ManufacturerLast_details[0]['manufacturing_order']['created']));
                }

                $this->manufacturing_order->create();
            }

            if ($delivery_status == 'Y') {

                if ($delivery_date != '') {
                    $this->save_delivery_date($club_purchase_id, $delivery_date);
                }

            } else if (isset($fetch_Manufacturer_details[0]['manufacturing_order']['id'])) {

                if (($fetch_Manufacturer_details[0]['card_purchase']['card_delivered'] == 'Y') && ($delivery_status == 'N')) {
                    $this->delete_delivery_date($club_purchase_id);
                }
            }

            //manufacturer_payed
            if ((empty($this->request->data['manufacturer']['manufacturer_payed']))
                || (!isset($this->request->data['manufacturer']['manufacturer_payed']))
            ) {
                $this->request->data['manufacturer']['manufacturer_payed'] = '0';
            }

            if ($this->manufacturing_order->save($this->request->data['manufacturer'])) {

                $savecarddata['card_purchases']['order_send_to_manufacturer'] = 'Y';
                $this->card_purchases->id = $club_purchase_id;
                $this->card_purchases->save($savecarddata['card_purchases']);
            }

            $this->Session->setFlash(__("order saved successfullly"));

            return $this->redirect(
                array(
                    'controller' => 'clubs',
                    'action' => 'manufacturing'
                ));

        } else {

            if (!empty($fetch_Manufacturer_details)) {

                $this->request->data['manufacturer'] = $fetch_Manufacturer_details[0]['manufacturing_order'];
                $this->request->data['manufacturer']['delivery_status'] = $fetch_Manufacturer_details[0]['card_purchase']['card_delivered'];
            }

        }
    }

    /**************** Third party enable form end ********************/
    public function save_delivery_date($purch_id, $d_date)
    {

        $this->loadModel('card_purchases');
        $this->loadModel('admin_setting_for_users');
        $this->loadModel('users_subscriptionsettings_types');

        $this->request->data['card_purchases']['card_delivered'] = 'Y';
        $this->request->data['card_purchases']['card_delivered_date'] = $d_date;
        $this->card_purchases->id = $purch_id;
        $this->card_purchases->save($this->request->data['card_purchases']);

        $fetch_purchase_details = $this->card_purchases->find(
            'all', array(
            'conditions' => array(
                'card_purchases.id' => $purch_id
            ),
            'fields' => array(
                'id',
                'clubuser_id',
                'card_type_id',
                'mode_of_purchase',
                'payment_status'
            )
        ));

        $purchase_Details = $fetch_purchase_details[0]['card_purchases'];

        if (($purchase_Details['payment_status'] == 'not_payed')) {

            $fetch_users_terms_details = $this->users_subscriptionsettings_types->find(
                'all', array(
                'conditions' => array(
                    'users_subscriptionsettings_types.user_id' => $purchase_Details['clubuser_id']
                ),
                'fields' => array(
                    'id',
                    'user_id',
                    'club_idcard_payterms'
                ),
                'limit' => '1',
                "order" => array(
                    'users_subscriptionsettings_types.id  DESC')
            ));

            $terms = unserialize($fetch_users_terms_details[0]['users_subscriptionsettings_types']['club_idcard_payterms']);
            $blockdate = date('Y-m-d', strtotime($d_date . ' +' . $terms['send_money_before'] . '  days'));

            if ($fetch_purchase_details[0]['card_purchases']['card_type_id'] == '1') {

                //magnetic
                $this->request->data['admin_setting_for_users']['block_magneticbadge_date'] = $blockdate;
                $this->request->data['admin_setting_for_users']['block_magnetic'] = 'Y';

            } elseif ($fetch_purchase_details[0]['card_purchases']['card_type_id'] == '2') {

                //rfid badge
                $this->request->data['admin_setting_for_users']['block_rfidbadge_date'] = $blockdate;
                $this->request->data['admin_setting_for_users']['block_rfidbadges'] = 'Y';

            } elseif ($fetch_purchase_details[0]['card_purchases']['card_type_id'] == '3') {

                //rfid bracelets
                $this->request->data['admin_setting_for_users']['block_rfidbracelets_date'] = $blockdate;
                $this->request->data['admin_setting_for_users']['block_rfidbracelets'] = 'Y';

            } elseif ($fetch_purchase_details[0]['card_purchases']['card_type_id'] == '4') {

                //smartcards
                $this->request->data['admin_setting_for_users']['block_smartcards_date'] = $blockdate;
                $this->request->data['admin_setting_for_users']['block_smartcards'] = 'Y';

            }

            $fetch_admin_settings = $this->admin_setting_for_users->find(
                'all', array(
                'conditions' => array(
                    'admin_setting_for_users.user_id' => $purchase_Details['clubuser_id']
                ),
                'fields' => array('id'),
                'limit' => '1',
                "order" => array('admin_setting_for_users.id  DESC')
            ));
            $block_user_id = $fetch_admin_settings[0]['admin_setting_for_users']['id'];

            $this->admin_setting_for_users->id = $block_user_id;
            $this->admin_setting_for_users->save($this->request->data['admin_setting_for_users']);
        }
    }

    public function delete_delivery_date($purch_id)
    {

        $this->loadModel('card_purchases');
        $this->loadModel('admin_setting_for_users');

        $this->request->data['card_purchases']['card_delivered'] = 'N';
        $this->request->data['card_purchases']['card_delivered_date'] = '';
        $this->card_purchases->id = $purch_id;

        $this->card_purchases->save($this->request->data['card_purchases']);
        $fetch_purchase_details = $this->card_purchases->find(
            'all', array(
            'conditions' => array(
                'card_purchases.id' => $purch_id
            ),
            'fields' => array(
                'id',
                'clubuser_id',
                'card_type_id',
                'mode_of_purchase',
                'payment_status'
            )
        ));

        $purchase_Details = $fetch_purchase_details[0]['card_purchases'];

        if (($purchase_Details['payment_status'] == 'not_payed')) {

            if ($fetch_purchase_details[0]['card_purchases']['card_type_id'] == '1') {
                //magnetic
                $this->request->data['admin_setting_for_users']['block_magneticbadge_date'] = '';
                $this->request->data['admin_setting_for_users']['block_magnetic'] = 'N';
            } elseif ($fetch_purchase_details[0]['card_purchases']['card_type_id'] == '2') {
                //rfid badge
                $this->request->data['admin_setting_for_users']['block_rfidbadge_date'] = '';
                $this->request->data['admin_setting_for_users']['block_rfidbadges'] = 'N';
            } elseif ($fetch_purchase_details[0]['card_purchases']['card_type_id'] == '3') {
                //rfid bracelets
                $this->request->data['admin_setting_for_users']['block_rfidbracelets_date'] = '';
                $this->request->data['admin_setting_for_users']['block_rfidbracelets'] = 'N';
            } elseif ($fetch_purchase_details[0]['card_purchases']['card_type_id'] == '4') {
                //smartcards
                $this->request->data['admin_setting_for_users']['block_smartcards_date'] = '';
                $this->request->data['admin_setting_for_users']['block_smartcards'] = 'N';
            }

            $fetch_admin_settings = $this->admin_setting_for_users->find(
                'all', array(
                'conditions' => array(
                    'admin_setting_for_users.user_id' => $purchase_Details['clubuser_id']
                ),
                'fields' => array('id'),
                'limit' => '1',
                "order" => array('admin_setting_for_users.id  DESC')
            ));
            $block_user_id = $fetch_admin_settings[0]['admin_setting_for_users']['id'];

            $this->admin_setting_for_users->id = $block_user_id;
            $this->admin_setting_for_users->save($this->request->data['admin_setting_for_users']);
        }
    }

    /**************** Third party enable form start ********************/
    public function manufacturing_thirdparty($encryptuserID)
    {

        $this->layout = "admin";
        $club_purchase_id = $this->decryptUrl($encryptuserID);
        $this->set('clubuserId', $club_purchase_id);
        $this->loadModel('card_purchases');
        $this->loadModel('countries');
        $this->loadModel('manufacturers');
        $this->loadmodel('card_colornames');

        $card_colornames = $this->card_colornames->find(
            'list', array(
            'fields' => array('id', 'name')
        ));
        $this->set(compact('card_colornames'));

        $options['conditions'] = array(
            'card_purchases.id' => $club_purchase_id,
        );

        $options['joins'] = array(
            array(
                'table' => 'Users',
                'alias' => 'users',
                'type' => 'INNER',
                'conditions' => array(
                    'card_purchases.clubuser_id = users.id'
                )
            ),
            array(
                'table' => 'card_types',
                'alias' => 'card_types',
                'type' => 'INNER',
                'conditions' => array(
                    'card_purchases.card_type_id = card_types.id'
                )
            ),
            array(
                'table' => 'clubs',
                'alias' => 'clubs',
                'type' => 'INNER',
                'conditions' => array(
                    'users.id = clubs.user_id'
                )
            )
        );

        $options['fields'] = array(
            'card_purchases.id',
            'card_purchases.randm_key',
            'card_purchases.invoice_no',
            'card_purchases.clubuser_id',
            'card_purchases.card_pricelist_id',
            'card_purchases.card_colorname_id',
            'card_purchases.card_type_id',
            'card_purchases.total_cards',
            'card_purchases.total_amount',
            'card_purchases.total_balance',
            'card_purchases.mode_of_purchase',
            'card_purchases.payment_status',
            'card_purchases.card_delivered_date',
            'card_purchases.card_delivered',
            'card_purchases.created',
            'clubs.club_address',
            'users.id', 'users.firstname',
            'users.lastname', 'users.email',
            'users.country_id',
            'users.zipcode', 'users.location',
            'users.mobile_number', 'users.mobile_number1',
            'card_types.id', 'card_types.name'
        );

        $fetchAns = $this->card_purchases->find('all', $options);
        $this->set('resultAry', $fetchAns[0]);

        $countryList = $this->countries->find('list', array('fields' => array('id', 'name')));
        $this->set(compact('countryList'));

        if ($this->request->is('post')) {

            $card_purchase_saveDta['card_delivered'] = 'Y';
            $card_purchase_saveDta['third_party_card_block_date'] = $this->request->data['manufacturer']['block_date'];

            $this->card_purchases->id = $this->request->data['manufacturer']['card_purchase_id'];
            if ($this->card_purchases->save($card_purchase_saveDta)) {

                $this->third_party_save_card_in_pool($this->request->data['manufacturer']['card_purchase_id']);
            }
        }
    }

    public function third_party_save_card_in_pool($purch_id)
    {

        $this->loadModel('card_purchases');
        $fetch_purchase_details = $this->card_purchases->find(
            'all', array(
            'conditions' => array(
                'card_purchases.id' => $purch_id
            ),
            'fields' => array(
                'id',
                'clubuser_id',
                'invoice_no',
                'randm_key',
                'card_type_id',
                'card_colorname_id',
                'total_cards',
                'payment_status'
            )
        ));

        if ($fetch_purchase_details[0]['card_purchases']['card_type_id'] == '1') {
            //magnetic
            $tblname = 'card_magnetic_pools';
        } elseif ($fetch_purchase_details[0]['card_purchases']['card_type_id'] == '2') {
            //rfid badge
            $tblname = 'card_rfidbadges_pools';
        } elseif ($fetch_purchase_details[0]['card_purchases']['card_type_id'] == '3') {
            //rfid bracelets
            $tblname = 'card_rfidbracelets_pools';
        } elseif ($fetch_purchase_details[0]['card_purchases']['card_type_id'] == '4') {
            //smartcards
            $tblname = 'card_smartcards_pools';
        }
        $this->loadModel($tblname);

        $this->request->data[$tblname]['clubuser_id'] = $fetch_purchase_details[0]['card_purchases']['clubuser_id'];
        $this->request->data[$tblname]['user_id'] = $this->Session->read('Auth.User.id');
        $this->request->data[$tblname]['invoice_no'] = $fetch_purchase_details[0]['card_purchases']['invoice_no'];
        $this->request->data[$tblname]['randm_key'] = $fetch_purchase_details[0]['card_purchases']['randm_key'];
        $this->request->data[$tblname]['card_colorname_id'] = $fetch_purchase_details[0]['card_purchases']['card_colorname_id'];
        $this->request->data[$tblname]['card_purchase_id'] = $purch_id;
        $this->request->data[$tblname]['enable'] = 'Y';

        $total_card = $fetch_purchase_details[0]['card_purchases']['total_cards'];
        $fetch_unique = $this->$tblname->find('all', array('fields' => array($tblname . '.unique_id'), 'order' => array($tblname . '.id' => 'desc'), 'limit' => '1'));

        if (isset($fetch_unique[0][$tblname]['unique_id'])) {
            $existNumber = $fetch_unique[0][$tblname]['unique_id'];
        } else {
            $existNumber = 0;
        }

        /****** Start of save in card pool ***** */
        for ($i = 0; $i < ($total_card); $i++) {

            $existNumber++;
            $this->request->data[$tblname]['unique_id'] = $existNumber;
            $this->$tblname->create();

            if ($this->$tblname->save($this->request->data[$tblname])) {
                if ($i == 0) {
                    $card_range_from = $existNumber;
                }
                if ($i == ($total_card - 1)) {
                    $card_range_to = $existNumber;
                }
            }
        }

        /**x**** Start of save range in card_purchase table***** */
        $savedata['card_purchases']['card_range_from'] = $card_range_from;
        $savedata['card_purchases']['card_range_to'] = $card_range_to;
        $this->card_purchases->id = $purch_id;
        $this->card_purchases->save($savedata['card_purchases']);
    }

    public function save_card_in_pool($purch_id)
    {

        $this->loadModel('card_purchases');
        $this->loadModel('admin_setting_for_users');
        $fetch_purchase_details = $this->card_purchases->find(
            'all', array(
            'conditions' => array(
                'card_purchases.id' => $purch_id
            ),
            'fields' => array(
                'id',
                'clubuser_id',
                'invoice_no',
                'randm_key',
                'card_type_id',
                'card_colorname_id',
                'total_cards',
                'payment_status'
            )
        ));

        if ($fetch_purchase_details[0]['card_purchases']['card_type_id'] == '1') {

            //magnetic
            $tblname = 'card_magnetic_pools';
        } elseif ($fetch_purchase_details[0]['card_purchases']['card_type_id'] == '2') {

            //rfid badge
            $tblname = 'card_rfidbadges_pools';
        } elseif ($fetch_purchase_details[0]['card_purchases']['card_type_id'] == '3') {

            //rfid bracelets
            $tblname = 'card_rfidbracelets_pools';
        } elseif ($fetch_purchase_details[0]['card_purchases']['card_type_id'] == '4') {

            //smartcards
            $tblname = 'card_smartcards_pools';
        }
        $this->loadModel($tblname);

        $this->request->data[$tblname]['clubuser_id'] = $fetch_purchase_details[0]['card_purchases']['clubuser_id'];
        $this->request->data[$tblname]['user_id'] = $this->Session->read('Auth.User.id');
        $this->request->data[$tblname]['invoice_no'] = $fetch_purchase_details[0]['card_purchases']['invoice_no'];
        $this->request->data[$tblname]['randm_key'] = $fetch_purchase_details[0]['card_purchases']['randm_key'];
        $this->request->data[$tblname]['card_colorname_id'] = $fetch_purchase_details[0]['card_purchases']['card_colorname_id'];
        $this->request->data[$tblname]['card_purchase_id'] = $purch_id;
        $this->request->data[$tblname]['enable'] = 'N';

        $total_card = $fetch_purchase_details[0]['card_purchases']['total_cards'];
        $fetch_unique = $this->$tblname->find(
            'all', array(
            'fields' => array($tblname . '.unique_id'),
            'order' => array($tblname . '.id' => 'desc'),
            'limit' => '1'
        ));

        if (isset($fetch_unique[0][$tblname]['unique_id'])) {
            $existNumber = $fetch_unique[0][$tblname]['unique_id'];
        } else {
            $existNumber = 0;
        }

        /** **** Start of save in card pool ***** */

        for ($i = 0; $i < ($total_card); $i++) {

            $existNumber++;
            $this->request->data[$tblname]['unique_id'] = $existNumber;
            $this->$tblname->create();
            if ($this->$tblname->save($this->request->data[$tblname])) {

                if ($i == 0) {
                    $card_range_from = $existNumber;
                }
                if ($i == ($total_card - 1)) {
                    $card_range_to = $existNumber;
                }
            }
        }

        /****** Start save in admin_setting table if not_payed***** */
        if (($fetch_purchase_details[0]['card_purchases']['payment_status'] == 'not_payed')) {

            if ($fetch_purchase_details[0]['card_purchases']['card_type_id'] == '1') {

                //magnetic
                $this->request->data['admin_setting_for_users']['block_magneticbadge_range_from1'] = $card_range_from;
                $this->request->data['admin_setting_for_users']['block_magneticbadge_range_to1'] = $card_range_to;

            } elseif ($fetch_purchase_details[0]['card_purchases']['card_type_id'] == '2') {

                //rfid badge
                $this->request->data['admin_setting_for_users']['block_rfidbadge_range_from1'] = $card_range_from;
                $this->request->data['admin_setting_for_users']['block_rfidbadge_range_to1'] = $card_range_to;

            } elseif ($fetch_purchase_details[0]['card_purchases']['card_type_id'] == '3') {

                //rfid bracelets
                $this->request->data['admin_setting_for_users']['block_rfidbracelets_range_from1'] = $card_range_from;
                $this->request->data['admin_setting_for_users']['block_rfidbracelets_range_to1'] = $card_range_to;

            } elseif ($fetch_purchase_details[0]['card_purchases']['card_type_id'] == '4') {

                //smartcards
                $this->request->data['admin_setting_for_users']['block_smartcards_range_from1'] = $card_range_from;
                $this->request->data['admin_setting_for_users']['block_smartcards_range_to1'] = $card_range_to;
            }

            $fetch_admin_settings = $this->admin_setting_for_users->find(
                'all', array(
                'conditions' => array(
                    'admin_setting_for_users.user_id' => $fetch_purchase_details[0]['card_purchases']['clubuser_id']
                ),
                'fields' => array('id'),
                'limit' => '1',
                "order" => array('admin_setting_for_users.id  DESC')
            ));
            $block_user_id = $fetch_admin_settings[0]['admin_setting_for_users']['id'];

            $this->admin_setting_for_users->id = $block_user_id;
            $this->admin_setting_for_users->save($this->request->data['admin_setting_for_users']);
        }

        /****** End of save in admin_setting table ***** */

        /**x**** Start of save range in card_purchase table***** */
        $savedata['card_purchases']['card_range_from'] = $card_range_from;
        $savedata['card_purchases']['card_range_to'] = $card_range_to;
        $this->card_purchases->id = $purch_id;
        $this->card_purchases->save($savedata['card_purchases']);
        /*         * **** End of save range in card_purchase table ***** */
    }

    public function card_lists()
    {

        $this->layout = 'club_clubtab';
    }

    public function manage_card_lists()
    {

        $this->layout = 'club_clubtab';
        $order_condition = "";
        $this->loadModel('admin_setting_for_users');
        $this->loadModel('card_purchases');
        $third_party_block_date = $this->card_purchases->find(
            'list', array(
            'conditions' => array(
                'third_party_card_type' => 'Y',
                'payment_status' => 'not_payed'
            ),
            'fields' => array(
                'id',
                'third_party_card_block_date'
            )
        ));
        $userId = $this->Session->read('Auth.User.id');

        $this->set(compact('third_party_block_date'));

        if (!isset($this->params['pass'][0])) {
            $prm_val = 'magnetic';
        } else {
            $prm_val = $this->params['pass'][0];
        }
        if (!isset($this->params['pass'][1])) {
            $prm_val_second = 'not_assign';
        } else {
            $prm_val_second = $this->params['pass'][1];
        }

        $this->loadModel('Club');
        $tables = $this->Club->getTablesForCardType($prm_val);

        $tblcnd = '';
        switch ($prm_val_second) {

            case 'not_assign' :
                $tblcnd = $tables->tblFtchName . '.assigned_status = "N"';
                break;
            case 'assign' :
                $tblcnd = $tables->tblFtchName . '.assigned_status = "Y"';
                break;
            case 'all' :
                $tblcnd = '';
                break;
            default :
                $tblcnd = $tables->tblFtchName . '.assigned_status = "N"';
                break;
        }

        $this->loadModel($tables->secndTblFetch);
        $allowedIdsFromSec = $this->{$tables->secndTblFetch}->find('all', [
            'fields' => ['max(id) as id', 'unique_id'],
            'recursive' => -1,
            'group' => 'unique_id'
        ]);

        $idsOnly = array_map(function($item) {
            return $item['0']['id'];
        }, $allowedIdsFromSec);


        if ($this->request->is('post', 'put')) {

            $tblcnd_assing = '';

            if (!empty($this->request->data['Assigncard'])) {

                $tblcnd = '';
                $tblcnd = $tables->tblFtchName . '.assigned_status = "Y" or ';
                $tblcnd = $tables->tblFtchName . '.assigned_status = "N"';
                $this->loadModel($tables->tblFtchName);
                if ($prm_val_second == "all") {
                    $tblcnd = substr($tblcnd, 4);
                }


                $fetch_details = $this->$tables->tblFtchName->find(
                    'all', array(
                    'conditions' => array(
                        $tblcnd,
                        $tables->tblFtchName . '.clubuser_id' => $this->Session->read('Auth.User.id')
                    )
                    , 'joins' => array(
                        array(
                            'table' => $tables->secndTblFetch,
                            'alias' => $tables->secndTblFetch,
                            'type' => 'left',
                            'conditions' => array(
                                $tables->tblFtchName . '.id = ' . $tables->secndTblFetch . '.' . $tables->cnd_id_name,
                                $tables->tblFtchName . '.unique_id = ' . $tables->secndTblFetch . '.unique_id',
                            )
                        ),
                        array(
                            'table' => 'users',
                            'alias' => 'users',
                            'type' => 'left',
                            'conditions' => array(
                                $tables->secndTblFetch . '.user_id = users.id',
                            )),
                    ), 'fields' => array(
                        $tables->tblFtchName . '.id', $tables->tblFtchName . '.unique_id', $tables->tblFtchName . '.enabled_chk', $tables->tblFtchName . '.card_colorname_id', $tables->tblFtchName . '.clubuser_id',
                        $tables->tblFtchName . '.user_id', $tables->tblFtchName . '.invoice_no', $tables->tblFtchName . '.randm_key', $tables->tblFtchName . '.card_purchase_id',
                        $tables->tblFtchName . '.enable', $tables->tblFtchName . '.assigned_status', $tables->tblFtchName . '.suspended_status', $tables->tblFtchName . '.suspended_date',
                        $tables->tblFtchName . '.created', $tables->tblFtchName . '.modified',
                        $tables->secndTblFetch . '.id', $tables->secndTblFetch . '.user_id', $tables->secndTblFetch . '.start_date', $tables->secndTblFetch . '.expiry_date',
                        'users.id', 'users.username', 'users.firstname', 'users.lastname'
                    ),
                    'order' => $order_condition
                ));

                $fetch_admin_settings = $this->admin_setting_for_users->find(
                    'all', array(
                    'conditions' => array(
                        'admin_setting_for_users.user_id' => $this->Session->read('Auth.User.id')
                    ),
                    'fields' => $tables->optfields,
                    'limit' => '1',
                    "order" => array('admin_setting_for_users.id  DESC')
                ));

                $fetch_block_Dtail = $fetch_admin_settings[0]['admin_setting_for_users'];

                $block_by_admin = 'N';
                $block_admin_date = '';
                $block_admin_from1 = '0';
                $block_admin_to1 = '0';
                $block_admin_from2 = '0';
                $block_admin_to2 = '0';

                if ($fetch_block_Dtail[$tables->optfields[0]] == 'Y') {

                    $block_by_admin = 'Y';
                    $block_admin_date = $fetch_block_Dtail[$tables->optfields[1]];
                    $block_admin_from1 = empty($fetch_block_Dtail[$tables->optfields[2]]) ? '0' : $fetch_block_Dtail[$tables->optfields[2]];
                    $block_admin_to1 = empty($fetch_block_Dtail[$tables->optfields[3]]) ? '0' : $fetch_block_Dtail[$tables->optfields[3]];
                    $block_admin_from2 = empty($fetch_block_Dtail[$tables->optfields[4]]) ? '0' : $fetch_block_Dtail[$tables->optfields[4]];
                    $block_admin_to2 = empty($fetch_block_Dtail[$tables->optfields[5]]) ? '0' : $fetch_block_Dtail[$tables->optfields[5]];
                }
            }

            if (!empty($this->request->data["search1"]['search_card'])) {
                $tblcnd .= " and $tables->tblFtchName.unique_id='" . $this->request->data["search1"]['search_card'] . "'";
                $this->set("search_term", $this->request->data["search1"]['search_card']);
            }

            if (!empty($this->request->data['search']) && isset($this->request->data["search"])) {
                if ((!empty($this->request->data['search']['from_date']) && !empty($this->request->data['search']['to_date']))) {
                    $from_date = $this->request->data['search']['from_date'];
                    $to_date = $this->request->data['search']['to_date'];
                    $this->set(compact('from_date', 'to_date'));
                }

                if ((!empty($this->request->data['search']['clubStatus']) && ($this->request->data['search']['clubStatus'] == "Assigned"))) {
                    $tblcnd .= " and $tables->tblFtchName.assigned_status='Y'";
                }

                if (!empty($this->request->data['search']['clubStatus']) && ($this->request->data['search']['clubStatus'] == "Suspended")) {
                    $tblcnd .= " and $tables->tblFtchName.suspended_status='Y'";
                }

                if (!empty($this->request->data['search']['stystemStatus']) && ($this->request->data['search']['stystemStatus'] == "Enabled")) {
                    $tblcnd .= " and $tables->tblFtchName.enable='Y'";
                }

                if (!empty($this->request->data['search']['stystemStatus']) && ($this->request->data['search']['stystemStatus'] == "Disable")) {
                    $tblcnd .= " and $tables->tblFtchName.enable='N'";
                }
            }

            if (isset($this->request->data['search_order'])) {

                if (($this->request->data['search_order']['orderby'] == '') && ($this->request->data['search_order']['searchbySelection'] == '') && ($this->request->data['search_order']['searchUser'] == '')) {

                    $this->Session->setFlash(__('Select any criteria for search'));
                } else {

                    if ((!empty($this->request->data['search_order']["searchbySelection"]) && (($this->request->data['search_order']["searchbySelection"] == "user") && !empty($this->request->data['search_order']["searchUser"])))) {

                        $implode_username = explode(' ', trim($this->request->data['search_order']["searchUser"]));

                        if (count($implode_username) >= 2) {

                            $findUserid = $this->User->find('list', array('fields' => array("User.id"), 'conditions' => array("and" => array(array('User.firstname like ' => "" . $implode_username[0] . "%"), array('User.lastname like ' => "" . $implode_username[1] . "%")))));

                        } else {

                            $findUserid = $this->User->find('list', array('fields' => array("User.id"), 'conditions' => array('User.username like ' => "" . $this->request->data['search_order']["searchUser"] . "%")));

                        }

                        $tblcnd .= " and  $tables->secndTblFetch.user_id in ('" . implode(",", $findUserid) . "')";

                    } else if ((!empty($this->request->data['search_order']["searchbySelection"])) && ($this->request->data['search_order']["searchbySelection"] == "card_no")) {

                        $tblcnd .= " and $tables->tblFtchName.unique_id='" . $this->request->data['search_order']["searchUser"] . "'";
                    }

                    if ((!empty($this->request->data['search_order']['orderby'])) && ($this->request->data['search_order']['orderby'] == "username")) {

                        $order_condition = array('users.firstname' => 'ASC');


                    } else if ((!empty($this->request->data['search_order']['orderby'])) && ($this->request->data['search_order']['orderby'] == "card_no")) {

                        $order_condition = array(" $tables->tblFtchName.unique_id DESC");
                    }
                }
            }//end if search_order

            $this->loadModel($tables->tblFtchName);
            if ($prm_val_second == "all") {
                $tblcnd = substr($tblcnd, 4);
            }

            $fetch_details = $this->{$tables->tblFtchName}->find(
                'all', array(
                'conditions' => array(
                    $tblcnd,
                    $tables->tblFtchName . '.clubuser_id' => $this->Session->read('Auth.User.id')
                ),
                'joins' => array(
                    array(
                        'table' => 'cards_operater_pool_allocations',
                        'alias' => 'cards_operater_pool_allocations',
                        'type' => 'LEFT',
                        'conditions' => array(
                            $tables->tblFtchName . '.id =cards_operater_pool_allocations.card_type_id',
                            $tables->tblFtchName . '.unique_id = cards_operater_pool_allocations.unique_id',
                        )
                    ),
                    array(
                        'table' => $tables->secndTblFetch,
                        'alias' => $tables->secndTblFetch,
                        'type' => 'LEFT',
                        'conditions' => array(
                            $tables->tblFtchName . '.id = ' . $tables->secndTblFetch . '.' . $tables->cnd_id_name,
                            $tables->tblFtchName . '.unique_id = ' . $tables->secndTblFetch . '.unique_id',
                            $tables->secndTblFetch . '.id' => $idsOnly
                        )
                    ),
                    array(
                        'table' => 'users',
                        'alias' => 'users',
                        'type' => 'LEFT',
                        'conditions' => array(
                            "OR" => array(
                                $tables->secndTblFetch . '.user_id = users.id',
                                'cards_operater_pool_allocations.user_id = users.id'))
                    )),
                'fields' => array(
                    'cards_operater_pool_allocations.expiry_date',
                    $tables->tblFtchName . '.id', $tables->tblFtchName . '.unique_id', $tables->tblFtchName . '.enabled_chk', $tables->tblFtchName . '.card_colorname_id', $tables->tblFtchName . '.clubuser_id',
                    $tables->tblFtchName . '.user_id', $tables->tblFtchName . '.invoice_no', $tables->tblFtchName . '.randm_key', $tables->tblFtchName . '.card_purchase_id',
                    $tables->tblFtchName . '.enable', $tables->tblFtchName . '.assigned_status', $tables->tblFtchName . '.suspended_status', $tables->tblFtchName . '.suspended_date',
                    $tables->tblFtchName . '.created', $tables->tblFtchName . '.modified',
                    $tables->secndTblFetch . '.id', $tables->secndTblFetch . '.user_id', $tables->secndTblFetch . '.start_date', $tables->secndTblFetch . '.expiry_date',
                    'users.id', 'users.username', 'users.firstname', 'users.lastname'
                ),
                //'group' => "{$tables->tblFtchName}.unique_id",
                'order' => $order_condition
            ));

            $fetch_admin_settings = $this->admin_setting_for_users->find(
                'all', array(
                'conditions' => array(
                    'admin_setting_for_users.user_id' => $this->Session->read('Auth.User.id')),
                'fields' => $tables->optfields,
                'limit' => '1',
                "order" => array('admin_setting_for_users.id  DESC')
            ));
            $fetch_block_Dtail = $fetch_admin_settings[0]['admin_setting_for_users'];
            $block_by_admin = 'N';
            $block_admin_date = '';
            $block_admin_from1 = '0';
            $block_admin_to1 = '0';
            $block_admin_from2 = '0';
            $block_admin_to2 = '0';

            if ($fetch_block_Dtail[$tables->optfields[0]] == 'Y') {
                $block_by_admin = 'Y';
                $block_admin_date = $fetch_block_Dtail[$tables->optfields[1]];
                $block_admin_from1 = empty($fetch_block_Dtail[$tables->optfields[2]]) ? '0' : $fetch_block_Dtail[$tables->optfields[2]];
                $block_admin_to1 = empty($fetch_block_Dtail[$tables->optfields[3]]) ? '0' : $fetch_block_Dtail[$tables->optfields[3]];
                $block_admin_from2 = empty($fetch_block_Dtail[$tables->optfields[4]]) ? '0' : $fetch_block_Dtail[$tables->optfields[4]];
                $block_admin_to2 = empty($fetch_block_Dtail[$tables->optfields[5]]) ? '0' : $fetch_block_Dtail[$tables->optfields[5]];
            }

        } else {


            $this->loadModel($tables->tblFtchName);
            $fetch_details = $this->{$tables->tblFtchName}->find(
                'all', array(
                    'conditions' => array(
                        $tblcnd,
                        $tables->tblFtchName . '.clubuser_id' => $this->Session->read('Auth.User.id')
                    ),
                    'joins' => array(
                        array(
                            'table' => 'cards_operater_pool_allocations',
                            'alias' => 'cards_operater_pool_allocations',
                            'type' => 'LEFT',
                            'conditions' => array(
                                $tables->tblFtchName . '.id = cards_operater_pool_allocations.card_type_id',
                                $tables->tblFtchName . '.unique_id = cards_operater_pool_allocations.unique_id',
                            )
                        ), array(
                            'table' => $tables->secndTblFetch,
                            'alias' => $tables->secndTblFetch,
                            'type' => 'LEFT',
                            'conditions' => array(
                                $tables->tblFtchName . '.id = ' . $tables->secndTblFetch . '.' . $tables->cnd_id_name,
                                $tables->tblFtchName . '.unique_id = ' . $tables->secndTblFetch . '.unique_id',
                                $tables->secndTblFetch . '.id' => $idsOnly
                            )
                        ),
                        array(
                            'table' => 'users',
                            'alias' => 'users',
                            'type' => 'LEFT',
                            'conditions' => array(
                                "OR" => array($tables->secndTblFetch . '.user_id = users.id', 'cards_operater_pool_allocations.user_id = users.id')
                            )
                        )),
                    'fields' => array(
                        'cards_operater_pool_allocations.expiry_date',
                        $tables->tblFtchName . '.id', $tables->tblFtchName . '.unique_id', $tables->tblFtchName . '.enabled_chk', $tables->tblFtchName . '.card_colorname_id', $tables->tblFtchName . '.clubuser_id',
                        $tables->tblFtchName . '.user_id', $tables->tblFtchName . '.invoice_no', $tables->tblFtchName . '.randm_key', $tables->tblFtchName . '.card_purchase_id',
                        $tables->tblFtchName . '.enable', $tables->tblFtchName . '.assigned_status', $tables->tblFtchName . '.suspended_status', $tables->tblFtchName . '.suspended_date',
                        $tables->tblFtchName . '.created', $tables->tblFtchName . '.modified',
                        $tables->secndTblFetch . '.id', $tables->secndTblFetch . '.user_id', $tables->secndTblFetch . '.start_date', $tables->secndTblFetch . '.expiry_date',
                        'users.id', 'users.username', 'users.firstname', 'users.lastname'
                    ),
                    "order" => "{$tables->tblFtchName}.unique_id ASC, IF({$tables->secndTblFetch}.id IS NOT NULL, {$tables->secndTblFetch}.expiry_date, cards_operater_pool_allocations.expiry_date)",
                    //IF({$tables->secndTblFetch}.id IS NOT NULL, {$tables->secndTblFetch}.expiry_date, cards_operater_pool_allocations.expiry_date) DESC, users.username ASC
                    //'group' => "{$tables->tblFtchName}.unique_id"

                )
            );

            $fetch_admin_settings = $this->admin_setting_for_users->find(
                'all', array(
                'conditions' => array(
                    'admin_setting_for_users.user_id' => $this->Session->read('Auth.User.id')
                ),
                'fields' => $tables->optfields,
                'limit' => '1',
                "order" => array('admin_setting_for_users.id  DESC')
            ));
            $fetch_block_Dtail = $fetch_admin_settings[0]['admin_setting_for_users'];
            $block_by_admin = 'N';
            $block_admin_date = '';
            $block_admin_from1 = '0';
            $block_admin_to1 = '0';
            $block_admin_from2 = '0';
            $block_admin_to2 = '0';

            if ($fetch_block_Dtail[$tables->optfields[0]] == 'Y' && !empty($fetch_details)) {

                //add this && !empty($fetch_details) because it give error if $fetch_details is empty
                $block_by_admin = 'Y';
                $block_admin_date = $fetch_block_Dtail[$tables->optfields[1]];
                $block_admin_from1 = empty($fetch_block_Dtail[$tables->optfields[2]]) ? '0' : $fetch_block_Dtail[$tables->optfields[2]];
                $block_admin_to1 = empty($fetch_block_Dtail[$tables->optfields[3]]) ? '0' : $fetch_block_Dtail[$tables->optfields[3]];
                $block_admin_from2 = empty($fetch_block_Dtail[$tables->optfields[4]]) ? '0' : $fetch_block_Dtail[$tables->optfields[4]];
                $block_admin_to2 = empty($fetch_block_Dtail[$tables->optfields[5]]) ? '0' : $fetch_block_Dtail[$tables->optfields[5]];
                $date = date("Y-m-d");

                if ($date >= $block_admin_date) {

                    $sql = "UPDATE {$tables->tblFtchName}
                            INNER JOIN card_purchases ON card_purchases.id = {$tables->tblFtchName}.card_purchase_id
                            SET enable='N'
                            WHERE card_purchases.clubuser_id = '{$userId}'
                            AND card_purchases.card_type_id=1
                            AND (
                                ({$tables->tblFtchName}.unique_id BETWEEN '{$block_admin_from1}' AND '{$block_admin_to1}')
                                OR ({$tables->tblFtchName}.unique_id BETWEEN '{$block_admin_from2}' AND '{$block_admin_to2}')
                            )";
                    $this->{$tables->tblFtchName}->query($sql);
                }
            }
        }

        if (!empty($fetch_details)) {

            foreach ($fetch_details as $key => $value) {

                $clubUserId = $value[$tables->tblFtchName]['clubuser_id'];
                $purchaseId = $value[$tables->tblFtchName]['card_purchase_id'];
                $getPurchaseCard = $this->User->getPurchaseCardById($purchaseId, $clubUserId);
                $getUserSubType = $this->User->getUserSubscriptionsettingType($clubUserId);

                $fetch_details[$key]['club_idcard_payterms'] = $getUserSubType['club_idcard_payterms'];

                $fetch_details[$key]['Card_purchase'] = $getPurchaseCard['card_purchases'];

                $fetch_details[$key]['Card_purchase'] = $getPurchaseCard['card_purchases'];
            }
        }

        if (count($fetch_details) > 0) {
            $counttotal = count($fetch_details) - 1;
        } else {
            $counttotal = "";
        }

        $this->set(compact('fetch_details', 'block_by_admin', 'block_admin_date', 'block_admin_from1', 'block_admin_to1', 'block_admin_from2', 'block_admin_to2', 'counttotal', 'cnd_id_name', 'tables', 'prm_val'));

    }

    function card_availabe_for_assinement()
    {

        $this->layout = '';
        $this->autoRender = true;
        if (!empty($this->request->data)) {

            $params = $this->request->data['params'];
            $card = $this->request->data['card'];
            $unique_id = $this->request->data['card'];
        } else {

            $unique_id = $this->params->pass[1];
            $params = $this->params->pass[0];
            $card = $this->params->pass[1];
        }

        $this->set(compact("params"));
        $this->loadModel('Club');
        $tables = $this->Club->getTablesForCardType($params);


        $this->loadModel($tables->tblFtchName);
        $this->loadModel('admin_setting_for_users');
        $tblcnd = '';
        $tblcnd1 = '';
        $tblcnd .= " $tables->tblFtchName.unique_id='" . $unique_id . "' and  ($tables->tblFtchName.enable='Y') and clubuser_id='" . $_SESSION['Auth']['User']['id'] . "'";
        $tblcnd1 .= " $tables->tblFtchName.unique_id='" . $unique_id . "' and  clubuser_id='" . $_SESSION['Auth']['User']['id'] . "'";
        $check_result = $this->{$tables->tblFtchName}->find('all', array('conditions' => array($tblcnd)));
        $check_result1 = $this->{$tables->tblFtchName}->find('all', array('conditions' => array($tblcnd1)));

        if (empty($check_result1)) {
            echo "card_not_present";
            exit;
        }

        $fetch_admin_settings = $this->admin_setting_for_users->find(
            'all', array(
            'conditions' => array(
                'admin_setting_for_users.user_id' => $this->Session->read('Auth.User.id')
            ),
            'fields' => $tables->optfields,
            'limit' => '1',
            "order" => array(
                'admin_setting_for_users.id  DESC'
            )
        ));

        $fetch_block_Dtail = $fetch_admin_settings[0]['admin_setting_for_users'];
        $block_by_admin = 'N';
        $block_admin_date = '';
        $block_admin_from1 = '0';
        $block_admin_to1 = '0';
        $block_admin_from2 = '0';
        $block_admin_to2 = '0';

        if ($fetch_block_Dtail[$tables->optfields[0]] == 'Y') {

            $block_by_admin = 'Y';
            $block_admin_date = $fetch_block_Dtail[$tables->optfields[1]];
            $block_admin_from1 = empty($fetch_block_Dtail[$tables->optfields[2]]) ? '0' : $fetch_block_Dtail[$tables->optfields[2]];
            $block_admin_to1 = empty($fetch_block_Dtail[$tables->optfields[3]]) ? '0' : $fetch_block_Dtail[$tables->optfields[3]];
            $block_admin_from2 = empty($fetch_block_Dtail[$tables->optfields[4]]) ? '0' : $fetch_block_Dtail[$tables->optfields[4]];
            $block_admin_to2 = empty($fetch_block_Dtail[$tables->optfields[5]]) ? '0' : $fetch_block_Dtail[$tables->optfields[5]];
        }

        if (
            empty($check_result) || (($block_by_admin == 'Y')
                && ($block_admin_date != "0000-00-00"
                    && ($block_admin_date < date('Y-m-d'))
                    && ((($block_admin_from1 <= $card)
                            && ($block_admin_to1 >= $card))
                        || (($block_admin_from2 <= $card)
                            && ($block_admin_to2 >= $card)))))
        ) {

            echo "0";
            exit;
        } else {

            echo "1";
            exit;
        }
    }

    public function get_card_historical_list($cardId = null)
    {
        $this->layout = 'ajax';
        $this->autoRender = true;

        $this->loadModel('Club');
        $card_type = (!empty($this->request->data['card_type']) ? $this->request->data['card_type'] : 'magnetic');
        $tables = $this->Club->getTablesForCardType($card_type);

        $this->loadModel('admin_setting_for_users');
        $this->loadModel('card_purchases');
        $third_party_block_date = $this->card_purchases->find(
            'list', array(
            'conditions' => array(
                'third_party_card_type' => 'Y',
                'payment_status' => 'not_payed'
            ),
            'fields' => array(
                'id',
                'third_party_card_block_date'
            )
        ));


        $this->loadModel($tables->tblFtchName);
        $card_cond = "";
        if (!is_null($cardId)) {
            $card_cond = "{$tables->tblFtchName}.unique_id = '{$cardId}'";
        } else {
            $card_cond = "{$tables->tblFtchName}.assigned_status = 'Y'";
        }

        $order_condition = "IF({$tables->secndTblFetch}.id IS NOT NULL, {$tables->secndTblFetch}.expiry_date, cards_operater_pool_allocations.expiry_date) DESC, users.username ASC";

        if ($this->request->data['order'] && $this->request->data['order'] == 'id') {
            $order_condition = "{$tables->tblFtchName}.unique_id ASC";
        }

        $fetch_details = $this->{$tables->tblFtchName}->find(
            'all', array(
                'conditions' => array(
                    $tables->tblFtchName . '.clubuser_id' => $this->Session->read('Auth.User.id'),
                    $card_cond
                ),
                'joins' => array(
                    array(
                        'table' => 'cards_operater_pool_allocations',
                        'alias' => 'cards_operater_pool_allocations',
                        'type' => 'LEFT',
                        'conditions' => array(
                            $tables->tblFtchName . '.id = cards_operater_pool_allocations.card_type_id',
                            $tables->tblFtchName . '.unique_id = cards_operater_pool_allocations.unique_id',
                        )
                    ), array(
                        'table' => $tables->secndTblFetch,
                        'alias' => $tables->secndTblFetch,
                        'type' => 'LEFT',
                        'conditions' => array(
                            $tables->tblFtchName . '.id = ' . $tables->secndTblFetch . '.' . $tables->cnd_id_name,
                            $tables->tblFtchName . '.unique_id = ' . $tables->secndTblFetch . '.unique_id',
                        )
                    ),
                    array(
                        'table' => 'users',
                        'alias' => 'users',
                        'type' => 'LEFT',
                        'conditions' => array(
                            "OR" => array($tables->secndTblFetch . '.user_id = users.id', 'cards_operater_pool_allocations.user_id = users.id')
                        )
                    )),
                'fields' => array(
                    'cards_operater_pool_allocations.expiry_date',
                    $tables->tblFtchName . '.id', $tables->tblFtchName . '.unique_id', $tables->tblFtchName . '.card_colorname_id', $tables->tblFtchName . '.clubuser_id',
                    $tables->tblFtchName . '.user_id', $tables->tblFtchName . '.invoice_no', $tables->tblFtchName . '.randm_key', $tables->tblFtchName . '.card_purchase_id',
                    $tables->tblFtchName . '.enable', $tables->tblFtchName . '.assigned_status', $tables->tblFtchName . '.suspended_status', $tables->tblFtchName . '.suspended_date',
                    $tables->tblFtchName . '.created', $tables->tblFtchName . '.modified',
                    $tables->secndTblFetch . '.id', $tables->secndTblFetch . '.user_id', $tables->secndTblFetch . '.start_date', $tables->secndTblFetch . '.expiry_date',
                    'users.id', 'users.username', 'users.firstname', 'users.lastname'
                ),
                "order" => $order_condition,

            )
        );

        $fetch_admin_settings = $this->admin_setting_for_users->find(
            'all', array(
            'conditions' => array(
                'admin_setting_for_users.user_id' => $this->Session->read('Auth.User.id')
            ),
            'fields' => $tables->optfields,
            'limit' => '1',
            "order" => array('admin_setting_for_users.id  DESC')
        ));
        $fetch_block_Dtail = $fetch_admin_settings[0]['admin_setting_for_users'];
        $block_by_admin = 'N';
        $block_admin_date = '';
        $block_admin_from1 = '0';
        $block_admin_to1 = '0';
        $block_admin_from2 = '0';
        $block_admin_to2 = '0';

        if ($fetch_block_Dtail[$tables->optfields[0]] == 'Y' && !empty($fetch_details)) {

            //add this && !empty($fetch_details) because it give error if $fetch_details is empty
            $block_by_admin = 'Y';
            $block_admin_date = $fetch_block_Dtail[$tables->optfields[1]];
            $block_admin_from1 = empty($fetch_block_Dtail[$tables->optfields[2]]) ? '0' : $fetch_block_Dtail[$tables->optfields[2]];
            $block_admin_to1 = empty($fetch_block_Dtail[$tables->optfields[3]]) ? '0' : $fetch_block_Dtail[$tables->optfields[3]];
            $block_admin_from2 = empty($fetch_block_Dtail[$tables->optfields[4]]) ? '0' : $fetch_block_Dtail[$tables->optfields[4]];
            $block_admin_to2 = empty($fetch_block_Dtail[$tables->optfields[5]]) ? '0' : $fetch_block_Dtail[$tables->optfields[5]];
            $date = date("Y-m-d");

        }

        if (!empty($fetch_details)) {

            foreach ($fetch_details as $key => $value) {

                $clubUserId = $value[$tables->tblFtchName]['clubuser_id'];
                $purchaseId = $value[$tables->tblFtchName]['card_purchase_id'];
                $getPurchaseCard = $this->User->getPurchaseCardById($purchaseId, $clubUserId);
                $getUserSubType = $this->User->getUserSubscriptionsettingType($clubUserId);

                $fetch_details[$key]['club_idcard_payterms'] = $getUserSubType['club_idcard_payterms'];

                $fetch_details[$key]['Card_purchase'] = $getPurchaseCard['card_purchases'];

                $fetch_details[$key]['Card_purchase'] = $getPurchaseCard['card_purchases'];
            }
        }

        if (count($fetch_details) > 0) {
            $counttotal = count($fetch_details) - 1;
        } else {
            $counttotal = "";
        }

        $this->set(compact('fetch_details', 'tables', 'block_by_admin', 'block_admin_date', 'block_admin_from1', 'block_admin_to1', 'block_admin_from2', 'block_admin_to2', 'counttotal'));

    }

    function card_availabe_for_assinement_page()
    {

        $this->layout = 'club_clubtab';
        $this->autoRender = true;
        if (!empty($this->request->data['card'])) {
            $params = $this->request->data['params'];
            $card = $this->request->data['card'];
            $unique_id = $this->request->data['card'];
        } else {
            $unique_id = $this->params->pass[1];
            $params = $this->params->pass[0];
            $card = $this->params->pass[1];
        }
        $this->set(compact("params"));
        $this->loadModel('Club');
        $tables = $this->Club->getTablesForCardType($params);


        $this->loadModel($tables->tblFtchName);
        $this->loadModel($tables->secndTblFetch);
        $this->loadModel('admin_setting_for_users');
        $tblcnd = '';
        $tblcnd .= " $tables->tblFtchName.unique_id='" . $unique_id . "' and  ($tables->tblFtchName.enable='N')";
        $check_result = $this->{$tables->tblFtchName}->find(
            'all', array(
            'conditions' => array($tblcnd)
        ));
        $cardUser = $this->{$tables->secndTblFetch}->find(
            'all', array(
            'conditions' => array($tables->secndTblFetch . ".unique_id" => $unique_id), 'limit' => 1, 'order' => array($tables->secndTblFetch . '.id' => 'DESC')
        ));
        $username = "";
        $expireDate = "";
        if (!empty($cardUser[0]["card_magnetic_pool_allocations"]['user_id'])) {

            $expireDate = $cardUser[0]["card_magnetic_pool_allocations"]['expiry_date'] != "0000-00-00" ? $cardUser[0]["card_magnetic_pool_allocations"]['expiry_date'] : "";
            $this->User->recursive = 0;
            $username = $this->User->find('all', array('fields' => array('User.username'), 'conditions' => array('User.id' => $cardUser[0]["card_magnetic_pool_allocations"]['user_id'])));
            $username = !empty($username[0]["User"]["username"]) ? $username[0]["User"]["username"] : "";
        }

        $fetch_admin_settings = $this->admin_setting_for_users->find(
            'all', array(
            'conditions' => array(
                'admin_setting_for_users.user_id' => $this->Session->read('Auth.User.id')
            ),
            'fields' => $tables->optfields,
            'limit' => '1',
            "order" => array('admin_setting_for_users.id  DESC')
        ));
        $fetch_block_Dtail = $fetch_admin_settings[0]['admin_setting_for_users'];
        $block_by_admin = 'N';
        $block_admin_date = '';
        $block_admin_from1 = '0';
        $block_admin_to1 = '0';
        $block_admin_from2 = '0';
        $block_admin_to2 = '0';
        if ($fetch_block_Dtail[$tables->optfields[0]] == 'Y') {
            $block_by_admin = 'Y';
            $block_admin_date = $fetch_block_Dtail[$tables->optfields[1]];
            $block_admin_from1 = empty($fetch_block_Dtail[$tables->optfields[2]]) ? '0' : $fetch_block_Dtail[$tables->optfields[2]];
            $block_admin_to1 = empty($fetch_block_Dtail[$tables->optfields[3]]) ? '0' : $fetch_block_Dtail[$tables->optfields[3]];
            $block_admin_from2 = empty($fetch_block_Dtail[$tables->optfields[4]]) ? '0' : $fetch_block_Dtail[$tables->optfields[4]];
            $block_admin_to2 = empty($fetch_block_Dtail[$tables->optfields[5]]) ? '0' : $fetch_block_Dtail[$tables->optfields[5]];
        }
        $this->loadModel("club_members");
        $user_id = $this->club_members->find(
            'list', array(
            'fields' => array('club_members.user_id'),
            'conditions' => array(
                "club_id" => $_SESSION['Auth']['Club']['id']
            )
        ));
        $tblcnd = '';
        $tblcnd .= " users.id in (" . implode(',', $user_id) . ") ";
        $sql = "";

        if (!empty($this->request->query['page'])) {
            $page = $this->request->query['page'];
        } else {
            $page = 0;
        }

        if (!empty($this->request->data['selectLimit'])) {
            $limit = $this->request->data['selectLimit'];
        } else {
            $limit = 5;
        }

        $pageLimit = ($page * $limit) - $limit;
        if (!empty($user_id)) {

            $limitString = "";
            if (!empty($limit)) {
                $limitString = " LIMIT " . $page . " , " . $limit;
            }

            $searchConditions = "";
            $searchText = "";
            if (!empty($this->request->data['searchTerm'])) {
                $searchText = $this->request->data['searchTerm'];
                $searchConditions = "AND users.username LIKE '%" . $searchText . "%'";
            }

            $fetch_details = $this->{$tables->tblFtchName}->query("SELECT *,users.username,$tables->secndTblFetch.unique_id,$tables->secndTblFetch.unique_id FROM users left join $tables->secndTblFetch on $tables->secndTblFetch.user_id = users.id  WHERE $tblcnd $searchConditions " . $limitString);

            $totalCount = $this->{$tables->tblFtchName}->query("SELECT *,users.username,$tables->secndTblFetch.unique_id,$tables->secndTblFetch.unique_id FROM users left join $tables->secndTblFetch on $tables->secndTblFetch.user_id = users.id  WHERE $tblcnd " . $searchConditions);
            $totalCount = count($totalCount);

            $find_unique_id = $this->{$tables->tblFtchName}->find(
                'all', array(
                'fields' => array(
                    'unique_id',
                    'assigned_status',
                    'suspended_status',
                    'suspended_date'
                ),
                'conditions' => array(
                    'clubuser_id' => $_SESSION['Auth']['User']['id']
                )
            ));

            $find_unique_id1 = array();
            foreach ($find_unique_id as $key => $value) {
                $find_unique_id1[$value[$tables->tblFtchName]['unique_id']] = $value;
            }

        } else {

            $fetch_details = array();
            $totalCount = 0;
        }

        $pagination = $this->paginationGenerator($limit, $page, $totalCount);
        $unique_id = $card;

        $this->set(
            compact(
                'fetch_details',
                'find_unique_id1',
                'unique_id',
                'params',
                'secndTblFetch',
                'tblFtchName',
                'pagination',
                'totalCount',
                'limit',
                'searchText',
                'username',
                'expireDate',
                'tblFtchName',
                'secndTblFetch',
                'tables'
            ));
    }

    public function paginationGenerator($limit, $page, $queryCount)
    {

        $page_url = "?";
        $total = $queryCount;
        $adjacents = "2";

        $page = ($page == 0 ? 1 : $page);
        $start = ($page - 1) * $limit;

        $prev = $page - 1;
        $next = $page + 1;

        $setLastpage = ceil($total / $limit);
        $lpm1 = $setLastpage - 1;
        $setPaginate = "";

        if ($setLastpage > 1) {
            $setPaginate .= "<ul id='pagination' class='serial_pgn light-theme simple-pagination'>";


            if ($page == 1) {
                $setPaginate .= "<li class='active'><span  class='current'>Prev</span></li>";
            } else {
                $setPaginate .= "<li><a href='{$page_url}page=$prev'>Prev</a></li>";
            }

            if ($setLastpage < 7 + ($adjacents * 2)) {
                for ($counter = 1; $counter <= $setLastpage; $counter++) {
                    if ($counter == $page)
                        $setPaginate .= "<li class='active'><span class='current'>$counter</span></li>";
                    else
                        $setPaginate .= "<li><a href='{$page_url}page=$counter'>$counter</a></li>";
                }

            } elseif ($setLastpage > 5 + ($adjacents * 2)) {

                if ($page < 1 + ($adjacents * 2)) {

                    for ($counter = 1; $counter < 4 + ($adjacents * 2); $counter++) {

                        if ($counter == $page)
                            $setPaginate .= "<li class='active'><span class='current'>$counter</span></li>";
                        else
                            $setPaginate .= "<li><a href='{$page_url}page=$counter'>$counter</a></li>";
                    }

                    $setPaginate .= "<li class='dot'>...</li>";
                    $setPaginate .= "<li><a href='{$page_url}page=$lpm1'>$lpm1</a></li>";
                    $setPaginate .= "<li><a href='{$page_url}page=$setLastpage'>$setLastpage</a></li>";

                } elseif ($setLastpage - ($adjacents * 2) > $page && $page > ($adjacents * 2)) {

                    $setPaginate .= "<li><a href='{$page_url}page=1'>1</a></li>";
                    $setPaginate .= "<li><a href='{$page_url}page=2'>2</a></li>";
                    $setPaginate .= "<li class='dot'>...</li>";

                    for ($counter = $page - $adjacents; $counter <= $page + $adjacents; $counter++) {

                        if ($counter == $page)
                            $setPaginate .= "<li class='active'><span class='current'>$counter</span></li>";
                        else
                            $setPaginate .= "<li><a href='{$page_url}page=$counter'>$counter</a></li>";
                    }

                    $setPaginate .= "<li class='dot'>..</li>";
                    $setPaginate .= "<li><a href='{$page_url}page=$lpm1'>$lpm1</a></li>";
                    $setPaginate .= "<li><a href='{$page_url}page=$setLastpage'>$setLastpage</a></li>";
                } else {

                    $setPaginate .= "<li><a href='{$page_url}page=1'>1</a></li>";
                    $setPaginate .= "<li><a href='{$page_url}page=2'>2</a></li>";
                    $setPaginate .= "<li class='dot'>..</li>";

                    for ($counter = $setLastpage - (2 + ($adjacents * 2)); $counter <= $setLastpage; $counter++) {

                        if ($counter == $page)
                            $setPaginate .= "<li class='active'><span class='current'>$counter</span></li>";
                        else
                            $setPaginate .= "<li><a href='{$page_url}page=$counter'>$counter</a></li>";
                    }
                }
            }

            if ($page < $counter - 1) {
                $setPaginate .= "<li><a href='{$page_url}page=$next'>Next</a></li>";
                //$setPaginate.= "<li><a href='{$page_url}page=$setLastpage'>Last</a></li>";
            } else {
                $setPaginate .= "<li class='active'><span class='current'>Next</span></li>";
                //$setPaginate.= "<li class='active'><span class='current'>Last</span></li>";
            }

            $setPaginate .= "</ul>\n";
        } else {
            $setPaginate .= "<ul id='pagination' class='serial_pgn light-theme simple-pagination'>";
            $setPaginate .= "<li class='active'><span class='current'>Prev</span></li>";
            $setPaginate .= "<li class='active'><span class='current'>Next</span></li>";
            $setPaginate .= "</ul>\n";
        }

        return $setPaginate;
    }

    public function change_card_check()
    {
        $this->layout = 'ajax';
        $this->autoRender = false;

        $this->loadModel('Club');
        $type = (isset($this->request->data['ctype']) ? $this->request->data['ctype'] : 'magnetic');
        $tables = $this->Club->getTablesForCardType($type);
        $this->loadModel($tables->tblFtchName);
        $id = $this->request->data['id'];
        $to_status = ((bool)$this->request->data['checked'] ? 'Y' : 'N');
        $this->{$tables->tblFtchName}->query("UPDATE {$tables->tblFtchName} SET enabled_chk = '{$to_status}' WHERE id = '{$id}'");
        echo 0;
        exit;
    }


    function assing_card_to_user()
    {

        $this->layout = '';
        $this->autoRender = true;

        $user_id = $this->request->data['user_id'];
        $unique_id = trim($this->request->data['unique_id']);
        $old_unique_id = trim($this->request->data['old_unique_id']);
        $params = $this->request->data['params'];

        switch ($params) {

            case 'magnetic' :
                $tblFtchName = 'card_magnetic_pools';
                $secndTblFetch = 'card_magnetic_pool_allocations';
                $cnd_id_name = 'card_magneticpool_id';
                $optfields = array(
                    'block_magnetic',
                    'block_magneticbadge_date',
                    'block_magneticbadge_range_from1',
                    'block_magneticbadge_range_to1',
                    'block_magneticbadge_range_from2',
                    'block_magneticbadge_range_to2'
                );
                break;

            case 'rfidbadge' :
                $tblFtchName = 'card_rfidbadges_pools';
                $secndTblFetch = 'card_rfidbadges_pool_allocations';
                $cnd_id_name = 'card_rfidbadgespool_id';
                $optfields = array(
                    'block_rfidbadges',
                    'block_rfidbadge_date',
                    'block_rfidbadge_range_from1',
                    'block_rfidbadge_range_to1',
                    'block_rfidbadge_range_from2',
                    'block_rfidbadge_range_to2'
                );
                break;

            case 'rfidbracelet' :
                $tblFtchName = 'card_rfidbracelets_pools';
                $secndTblFetch = 'card_rfidbracelets_pool_allocations';
                $cnd_id_name = 'card_rfidbraceletspool_id';
                $optfields = array(
                    'block_rfidbracelets',
                    'block_rfidbracelets_date',
                    'block_rfidbracelets_range_from1',
                    'block_rfidbracelets_range_to1',
                    'block_rfidbracelets_range_from2',
                    'block_rfidbracelets_range_to2'
                );
                break;

            case 'smartcard' :
                $tblFtchName = 'card_smartcards_pools';
                $secndTblFetch = 'card_smartcards_pool_allocations';
                $cnd_id_name = 'card_smartcardspool_id';
                $optfields = array(
                    'block_smartcards',
                    'block_smartcards_date',
                    'block_smartcards_range_from1',
                    'block_smartcards_range_to1',
                    'block_smartcards_range_from2',
                    'block_smartcards_range_to2'
                );
                break;

            default :
                $tblFtchName = 'card_magnetic_pools';
                $secndTblFetch = 'card_magnetic_pool_allocations';
                $cnd_id_name = 'card_magneticpool_id';
                $optfields = array(
                    'block_magnetic',
                    'block_magneticbadge_date',
                    'block_magneticbadge_range_from1',
                    'block_magneticbadge_range_to1',
                    'block_magneticbadge_range_from2',
                    'block_magneticbadge_range_to2'
                );
                break;

        }
        $this->loadModel($tblFtchName);
        $this->loadModel($secndTblFetch);


        $card_table_id = $this->$tblFtchName->find(
            'all', array(
            'conditions' => array(
                'unique_id' => $unique_id,
                'clubuser_id' => $_SESSION['Auth']['User']['id']
            )
        ));
        $card_table_id1 = !empty($card_table_id[0][$tblFtchName]['id']) ? $card_table_id[0][$tblFtchName]['id'] : '';

        $data = array();
        $data['card_magneticpool_id'] = $card_table_id1;
        $data['unique_id'] = $unique_id;
        $data['user_id'] = $user_id;
        $data['start_date'] = date("Y-m-d");
        $data['expiry_date'] = $card_table_id[0][$tblFtchName]['suspended_date'];


        $this->$secndTblFetch->create();
        if ($this->$secndTblFetch->save($data)) {

            $this->$tblFtchName->query(
                "update  $tblFtchName  set  assigned_status='Y'
                where clubuser_id='" . $_SESSION['Auth']['User']['id'] . "'
                and id='" . $card_table_id1 . "'"
            );
            echo "1";
            exit;

        } else {
            echo "0";
            exit;
        }


    }


    public function assing_card_to_member()
    {
        $this->layout = '';
        $this->autoRender = true;
        $postData = $this->request->data;
        $dynamicTable = $this->getDyamicCardTable($postData['param']);
        $tblFtchName = $dynamicTable['tblFtchName'];
        $secndTblFetch = $dynamicTable['secndTblFetch'];
        $cnd_id_name = $dynamicTable['cnd_id_name'];
        $optfields = $dynamicTable['optfields'];
        $this->loadModel($tblFtchName);
        $this->loadModel($secndTblFetch);
        $card_table_id = $this->$tblFtchName->find(
            'all', array(
            'conditions' => array(
                'unique_id' => $postData['unique_id'],
                'clubuser_id' => $_SESSION['Auth']['User']['id']
            )
        ));
        $card_table_id1 = (!empty($card_table_id[0][$tblFtchName]['id'])) ? $card_table_id[0][$tblFtchName]['id'] : "";
        if ($postData['assigned_status'] == "Y") {

            $card_table_id1 = $this->$secndTblFetch->find(
                'all', array(
                'conditions' => array(
                    'user_id' => $postData['user_id'],
                ),
                'limit' => '1',
                "order" => array(
                    $secndTblFetch . '.id  DESC'
                )
            ));
            if (!empty($card_table_id1)) {
                $card_table_id2 = $card_table_id1[0][$secndTblFetch]['id'];
                $old_unique_id = $card_table_id1[0][$secndTblFetch]['unique_id'];
                $this->$secndTblFetch->query(
                    "update $secndTblFetch set expiry_date='" . date('Y-m-d') . "' where  unique_id='" . $old_unique_id . "' and $secndTblFetch.id='" . $card_table_id2 . "'"
                );
            }
        } else {

            $card_table_id1 = $this->$secndTblFetch->find(
                'all', array(
                'conditions' => array(
                    'user_id' => $postData['user_id'],
                ),
                'limit' => '1',
                "order" => array(
                    $secndTblFetch . '.id  DESC'
                )
            ));
            if (!empty($card_table_id1)) {
                $card_table_id2 = $card_table_id1[0][$secndTblFetch]['id'];
                $old_unique_id = $card_table_id1[0][$secndTblFetch]['unique_id'];
                $this->$secndTblFetch->query(
                    "update $secndTblFetch set expiry_date='" . date('Y-m-d') . "' where  unique_id='" . $old_unique_id . "' and $secndTblFetch.id='" . $card_table_id2 . "'"
                );
            }
            $this->$tblFtchName->query(
                "update  $tblFtchName  set  assigned_status='Y' where unique_id='" . $postData['unique_id'] . "' and clubuser_id='" . $_SESSION['Auth']['User']['id'] . "' and id='" . $card_table_id1 . "'"
            );
        }
        $cardIds = $card_table_id[0][$tblFtchName]['id'];
        $this->$tblFtchName->query(
            "update  $tblFtchName  set  assigned_status='Y' where unique_id='" . $postData['unique_id'] . "' and clubuser_id='" . $_SESSION['Auth']['User']['id'] . "' and id='" . $cardIds . "'"
        );
        $this->$secndTblFetch->create();
        $data = array();
        $data['card_magneticpool_id'] = $cardIds;
        $data['unique_id'] = $postData['unique_id'];
        $data['user_id'] = $postData['user_id'];
        $data['start_date'] = $postData['start_end'];
        if (!empty($postData['end_start'])) {
            $data['expiry_date'] = $postData['end_start'];
        }
        if (!empty($card_table_id)) {
            foreach ($card_table_id as $card) {
                $this->$tblFtchName->id = $card[$tblFtchName]['id'];
                $this->$tblFtchName->save(array("suspended_status" => $postData['tem_susp']));
            }
        }
        if ($card_table_id = $this->$secndTblFetch->save($data)) {
            echo "1";
            exit;
        }
        echo "0";
        exit;
    }

    private function getDyamicCardTable($type = "")
    {
        switch ($type) {

            case 'magnetic' :
                $tblFtchName = 'card_magnetic_pools';
                $secndTblFetch = 'card_magnetic_pool_allocations';
                $cnd_id_name = 'card_magneticpool_id';
                $optfields = array(
                    'block_magnetic',
                    'block_magneticbadge_date',
                    'block_magneticbadge_range_from1',
                    'block_magneticbadge_range_to1',
                    'block_magneticbadge_range_from2',
                    'block_magneticbadge_range_to2'
                );
                break;

            case 'rfidbadge' :
                $tblFtchName = 'card_rfidbadges_pools';
                $secndTblFetch = 'card_rfidbadges_pool_allocations';
                $cnd_id_name = 'card_rfidbadgespool_id';
                $optfields = array(
                    'block_rfidbadges',
                    'block_rfidbadge_date',
                    'block_rfidbadge_range_from1',
                    'block_rfidbadge_range_to1',
                    'block_rfidbadge_range_from2',
                    'block_rfidbadge_range_to2'
                );
                break;

            case 'rfidbracelet' :
                $tblFtchName = 'card_rfidbracelets_pools';
                $secndTblFetch = 'card_rfidbracelets_pool_allocations';
                $cnd_id_name = 'card_rfidbraceletspool_id';
                $optfields = array(
                    'block_rfidbracelets',
                    'block_rfidbracelets_date',
                    'block_rfidbracelets_range_from1',
                    'block_rfidbracelets_range_to1',
                    'block_rfidbracelets_range_from2',
                    'block_rfidbracelets_range_to2'
                );
                break;

            case 'smartcard' :
                $tblFtchName = 'card_smartcards_pools';
                $secndTblFetch = 'card_smartcards_pool_allocations';
                $cnd_id_name = 'card_smartcardspool_id';
                $optfields = array(
                    'block_smartcards',
                    'block_smartcards_date',
                    'block_smartcards_range_from1',
                    'block_smartcards_range_to1',
                    'block_smartcards_range_from2',
                    'block_smartcards_range_to2'
                );
                break;

            default :
                $tblFtchName = 'card_magnetic_pools';
                $secndTblFetch = 'card_magnetic_pool_allocations';
                $cnd_id_name = 'card_magneticpool_id';
                $optfields = array(
                    'block_magnetic',
                    'block_magneticbadge_date',
                    'block_magneticbadge_range_from1',
                    'block_magneticbadge_range_to1',
                    'block_magneticbadge_range_from2',
                    'block_magneticbadge_range_to2'
                );
                break;
        }

        return array(
            "tblFtchName" => $tblFtchName,
            "secndTblFetch" => $secndTblFetch,
            "cnd_id_name" => $cnd_id_name,
            "optfields" => $optfields,
        );
    }

    public function process_card_replacement()
    {

        $this->layout = '';
        $this->autoRender = true;
        $postData = $this->request->data;
        $dynamicTable = $this->getDyamicCardTable($postData['param']);
        $tblFtchName = $dynamicTable['tblFtchName'];
        $secndTblFetch = $dynamicTable['secndTblFetch'];
        $cnd_id_name = $dynamicTable['cnd_id_name'];
        $optfields = $dynamicTable['optfields'];

        if ($this->request->is("post")) {

            if ((!empty($postData['user_id'])) && (!empty($postData['unique_id']))) {
                $this->loadModel($tblFtchName);
                $card_table_id = $this->$tblFtchName->find(
                    'all', array(
                    'conditions' => array(
                        'unique_id' => $postData['unique_id'],
                        'clubuser_id' => $_SESSION['Auth']['User']['id']
                    )
                ));
                $this->loadModel($secndTblFetch);
                $curdate = date('Y-m-d');
                $cardData = $this->$secndTblFetch->find(
                    "first", array(
                    'conditions' => array(
                        "user_id" => $postData['user_id'],
                        "unique_id" => $postData['replace_Card'],
                        "expiry_date <" => $curdate
                    ),
                    'fields' => array("id")
                ));
                if (!empty($cardData)) {
                    $assignUserCard = $this->$tblFtchName->find(
                        'all', array(
                        'conditions' => array(
                            'unique_id' => $postData['replace_Card'],
                            'clubuser_id' => $_SESSION['Auth']['User']['id']
                        )
                    ));
                    $id = $cardData[$secndTblFetch]['id'];
                    $this->$secndTblFetch->id = $id;
                    $insertData = array(
                        $cnd_id_name => $card_table_id[0][$tblFtchName]['id'],
                        "unique_id" => $postData['unique_id'],
                        "expiry_date" => $postData['card_return']
                    );
                    if (!empty($postData['expire_date'])) {
                        $currentDate = date("Y-m-d");
                        if ($currentDate < $postData['expire_date']) {
                            echo "2";
                            exit;
                        }
                    }
                    if ($this->$secndTblFetch->save($insertData)) {
                        $updateNewCard = array(
                            "assigned_status" => "Y"
                        );
                        $this->$tblFtchName->id = $card_table_id[0][$tblFtchName]['id'];
                        $this->$tblFtchName->save($updateNewCard);
                        if (!empty($assignUserCard)) {
                            $asId = $assignUserCard[0][$tblFtchName]['id'];
                            $updateOldCard = array(
                                "assigned_status" => "N",
                                "id" => $asId
                            );
                            $this->$tblFtchName->id = $asId;
                            $this->$tblFtchName->save($updateOldCard);
                        }
                        echo "1";
                        exit;
                    }
                } else {
                    echo "0";
                    exit;
                }
            }

        }
    }

    public function assing_card_to_operator()
    {
        $this->layout = '';
        $this->autoRender = true;
        $postData = $this->request->data;
        $dynamicTable = $this->getDynamicCardForOperatorTable($postData['param']);
        $tblFtchName = $dynamicTable['tblFtchName'];
        $optfields = $dynamicTable['optfields'];

        if ($this->request->is("post")) {

            if ((!empty($postData['user_id']))
                && (!empty($postData['unique_id']))
            ) {

                $this->loadModel($tblFtchName);
                $card_table_id = $this->$tblFtchName->find(
                    'all', array(
                    'conditions' => array(
                        'unique_id' => $postData['unique_id'],
                        'clubuser_id' => $_SESSION['Auth']['User']['id']
                    )
                ));

                $this->loadModel("cards_operater_pool_allocations");
                if (!empty($card_table_id)) {

                    $insertData['card_type_id'] = $card_table_id[0][$tblFtchName]['id'];
                    $insertData['unique_id'] = $postData['unique_id'];
                    $insertData['user_id'] = $postData['user_id'];
                    $insertData['start_date'] = $postData['start_end'];

                    if (!empty($postData['end_start'])) {
                        $insertData['expiry_date'] = $postData['end_start'];
                    }
                    $insertData['type'] = $postData['type'];

                    if ($this->cards_operater_pool_allocations->save($insertData)) {

                        $updateNewCard["assigned_status"] = "Y";
                        $updateNewCard["suspended_status"] = $postData['tem_susp'];

                        $this->$tblFtchName->id = $card_table_id[0][$tblFtchName]['id'];
                        $this->$tblFtchName->save($updateNewCard);
                        echo "1";
                        exit;
                    }

                    echo "0";
                    exit;
                }


            }
        }
    }

    private function getDynamicCardForOperatorTable($type = "")
    {
        switch ($type) {

            case 'magnetic' :
                $tblFtchName = 'card_magnetic_pools';
                $optfields = array(
                    'block_magnetic',
                    'block_magneticbadge_date',
                    'block_magneticbadge_range_from1',
                    'block_magneticbadge_range_to1',
                    'block_magneticbadge_range_from2',
                    'block_magneticbadge_range_to2'
                );
                break;

            case 'rfidbadge' :
                $tblFtchName = 'card_rfidbadges_pools';
                $optfields = array(
                    'block_rfidbadges',
                    'block_rfidbadge_date',
                    'block_rfidbadge_range_from1',
                    'block_rfidbadge_range_to1',
                    'block_rfidbadge_range_from2',
                    'block_rfidbadge_range_to2'
                );
                break;

            case 'rfidbracelet' :
                $tblFtchName = 'card_rfidbracelets_pools';
                $secndTblFetch = 'card_rfidbracelets_pool_allocations';
                $cnd_id_name = 'card_rfidbraceletspool_id';
                $optfields = array(
                    'block_rfidbracelets',
                    'block_rfidbracelets_date',
                    'block_rfidbracelets_range_from1',
                    'block_rfidbracelets_range_to1',
                    'block_rfidbracelets_range_from2',
                    'block_rfidbracelets_range_to2'
                );
                break;

            case 'smartcard' :
                $tblFtchName = 'card_smartcards_pools';
                $optfields = array(
                    'block_smartcards',
                    'block_smartcards_date',
                    'block_smartcards_range_from1',
                    'block_smartcards_range_to1',
                    'block_smartcards_range_from2',
                    'block_smartcards_range_to2'
                );
                break;

            default :
                $tblFtchName = 'card_magnetic_pools';
                $optfields = array(
                    'block_magnetic',
                    'block_magneticbadge_date',
                    'block_magneticbadge_range_from1',
                    'block_magneticbadge_range_to1',
                    'block_magneticbadge_range_from2',
                    'block_magneticbadge_range_to2'
                );
                break;
        }

        return array(
            "tblFtchName" => $tblFtchName,
            "optfields" => $optfields,
        );
    }

    function check_assing_status()
    {

        $this->layout = '';
        $this->autoRender = true;
        $user_id = $this->request->data['user_id'];
        $unique_id = $this->request->data['unique_id'];
        $params = $this->request->data['params'];
        $assing_unique_id = $this->request->data['assing_unique_id'];
        switch ($params) {
            case 'magnetic' :
                $tblFtchName = 'card_magnetic_pools';
                $secndTblFetch = 'card_magnetic_pool_allocations';
                break;
            case 'rfidbadge' :
                $tblFtchName = 'card_rfidbadges_pools';
                $secndTblFetch = 'card_magnetic_pool_allocations';
                break;
            case 'rfidbracelet' :
                $tblFtchName = 'card_rfidbracelets_pools';
                $secndTblFetch = 'card_magnetic_pool_allocations';
                break;
            case 'smartcard' :
                $tblFtchName = 'card_smartcards_pools';
                $secndTblFetch = 'card_magnetic_pool_allocations';
                break;
            default :
                $tblFtchName = 'card_magnetic_pools';
                $secndTblFetch = 'card_magnetic_pool_allocations';
                break;
        }

        $this->loadModel($tblFtchName);
        $this->loadModel($secndTblFetch);

        $card_table_id = $this->$tblFtchName->find(
            'all', array(
            'conditions' => array(
                'unique_id' => $unique_id,
                'clubuser_id' => $_SESSION['Auth']['User']['id']
            )
        ));
        $secndTblFetchData = $this->$secndTblFetch->find(
            'all', array(
            'conditions' => array(
                'card_magneticpool_id' => $card_table_id[0][$tblFtchName]['id']
            )
        ));


        $expireDate = '';
        if (!empty($secndTblFetchData)) {
            $expireDate = $secndTblFetchData[0][$secndTblFetch]['expiry_date'];
            if (strtotime($expireDate) < strtotime(date('Y-m-d'))) {
                echo "15";
                exit;
            }

        } else {
            $expireDate = $card_table_id[0][$tblFtchName]['suspended_date'];
        }

        if ($card_table_id[0][$tblFtchName]['enable'] == 'N') {
            echo "7";
            exit;
        }
        if ($card_table_id[0][$tblFtchName]['suspended_status'] == 'Y') {
            echo "2";
            exit;
        }
        if ($card_table_id[0][$tblFtchName]['assigned_status'] == 'N') {
            echo "0";
            exit;
        }
        if ($card_table_id[0][$tblFtchName]['assigned_status'] == 'Y' && strtotime($expireDate) > strtotime(date('Y-m-d'))) {
            echo "6";
            exit;
        } else {
            echo "1";
            exit;
        }


    }


    /* start remove suspend status if card aready has suspended status */

    function remove_suspended_status()
    {

        $this->layout = '';
        $this->autoRender = true;
        $user_id = $this->request->data['user_id'];
        $unique_id = $this->request->data['unique_id'];
        $params = $this->request->data['params'];

        switch ($params) {

            case 'magnetic' :
                $tblFtchName = 'card_magnetic_pools';
                $secndTblFetch = 'card_magnetic_pool_allocations';
                break;

            case 'rfidbadge' :
                $tblFtchName = 'card_rfidbadges_pools';
                $secndTblFetch = 'card_magnetic_pool_allocations';
                break;

            case 'rfidbracelet' :
                $tblFtchName = 'card_rfidbracelets_pools';
                $secndTblFetch = 'card_magnetic_pool_allocations';
                break;

            case 'smartcard' :
                $tblFtchName = 'card_smartcards_pools';
                $secndTblFetch = 'card_magnetic_pool_allocations';
                break;

            default :
                $tblFtchName = 'card_magnetic_pools';
                $secndTblFetch = 'card_magnetic_pool_allocations';
                break;
        }


        $this->loadModel($tblFtchName);
        $this->loadModel($secndTblFetch);
        $card_table_id = $this->$tblFtchName->find('all', array('conditions' => array('unique_id' => $unique_id, 'clubuser_id' => $_SESSION['Auth']['User']['id'])));
        $this->$tblFtchName->id = $card_table_id[0][$tblFtchName]['id'];

        $data['suspended_status'] = 'N';
        $data['suspended_date'] = '';

        if ($this->$tblFtchName->save($data)) {

            echo "1";
            exit;
        } else {

            echo "0";
            exit;
        }
    }

    function club_edit_card_assing()
    {

        $this->layout = '';
        $this->autoRender = true;
        $unique_id = $this->request->data['unique_id'];
        $params = $this->request->data['params'];

        $this->loadModel('Club');
        $tables = $this->Club->getTablesForCardType($params);


        $this->loadModel($tables->tblFtchName);

        $user_id = $this->Session->read('Auth.User.id');


        $fetch_details = $this->{$tables->tblFtchName}->find(
            'all', array(
                'conditions' => array(
                    $tables->tblFtchName . '.clubuser_id' => $user_id,
                    $tables->tblFtchName . '.unique_id' => $unique_id,
                    $tables->tblFtchName . '.assigned_status' => 'Y',
                    $tables->tblFtchName . '.enable' => 'Y'
                ),
                'joins' => array(
                    array(
                        'table' => $tables->secndTblFetch,
                        'alias' => $tables->secndTblFetch,
                        'type' => 'INNER',
                        'conditions' => array(
                            $tables->tblFtchName . '.id = ' . $tables->secndTblFetch . '.' . $tables->cnd_id_name,
                            $tables->tblFtchName . '.unique_id = ' . $tables->secndTblFetch . '.unique_id',
                        )
                    ),
                    array(
                        'table' => 'users',
                        'alias' => 'users',
                        'type' => 'INNER',
                        'conditions' => array(
                            $tables->secndTblFetch . '.user_id = users.id'
                        )
                    )),
                'fields' => array(
                    $tables->tblFtchName . '.id',
                    $tables->tblFtchName . '.unique_id',
                    $tables->tblFtchName . '.card_colorname_id',
                    $tables->tblFtchName . '.clubuser_id',
                    $tables->tblFtchName . '.user_id',
                    $tables->tblFtchName . '.invoice_no',
                    $tables->tblFtchName . '.randm_key',
                    $tables->tblFtchName . '.card_purchase_id',
                    $tables->tblFtchName . '.enable',
                    $tables->tblFtchName . '.assigned_status',
                    $tables->tblFtchName . '.suspended_status',
                    $tables->tblFtchName . '.suspended_date',
                    $tables->tblFtchName . '.created',
                    $tables->tblFtchName . '.modified',
                    $tables->secndTblFetch . '.id',
                    $tables->secndTblFetch . '.user_id',
                    $tables->secndTblFetch . '.start_date',
                    $tables->secndTblFetch . '.expiry_date',
                    'users.id',
                    'users.username',
                    'users.firstname',
                    'users.lastname'
                ),
                "order" => "{$tables->secndTblFetch}.expiry_date DESC",

            )
        );

        if (empty($fetch_details)) {
            echo 'card_not_present';
            exit;
        }


        $today = date('Y-m-d');
        $canBeAssigned = array_filter(
            $fetch_details, function ($itm) use ($tables, $today) {
            return (
                ($itm[$tables->secndTblFetch]['expiry_date'] > $today) ||
                ($itm[$tables->secndTblFetch]['start_date'] > $today && $itm[$tables->secndTblFetch]['expiry_date'] > $today)
            );
        });

        $isTerminate = ($this->request->data['is_terminate']);

        $this->set(compact('fetch_details', 'unique_id', 'tables', 'canBeAssigned', 'params', 'today', 'isTerminate'));
    }

    public function make_card_assignment()
    {
        $this->layout = 'ajax';

        $unique_id = $this->request->data['unique_id'];
        $params = $this->request->data['params'];
        $this->loadModel('Club');
        $tables = $this->Club->getTablesForCardType($params);

        $this->loadModel($tables->secndTblFetch);
        $last_user_of_card = $this->{$tables->secndTblFetch}->find(
            'first', [
            'conditions' => [
                $tables->secndTblFetch . '.unique_id' => $unique_id,
            ],
            'joins' => [
                [
                    'table' => 'users',
                    'alias' => 'users',
                    'type' => 'LEFT',
                    'conditions' => [
                        "users.id = {$tables->secndTblFetch}.user_id"
                    ]
                ]
            ],
            'fields' => [
                'users.id',
                'users.username',
                'users.firstname',
                'users.lastname',
                $tables->secndTblFetch . '.expiry_date',
                $tables->secndTblFetch . '.start_date'
            ],
            'recursive' => -1,
            'order' => "{$tables->secndTblFetch}.start_date DESC, {$tables->secndTblFetch}.id DESC"
        ]);


        $club_id = $this->Session->read('Auth.Club.id');

        $sql = "SELECT u.id, u.firstname, u.lastname, u.username, ( IFNULL(crgpa.expired, 0) + IFNULL(crgpa.not_expired, 0) + IFNULL(crapa.expired, 0) + IFNULL(crapa.not_expired, 0) + IFNULL(cspa.expired, 0) + IFNULL(cspa.not_expired, 0) + IFNULL(cmpa.expired, 0) + IFNULL(cmpa.not_expired, 0) ) AS total_cards, ( IFNULL(crgpa.not_expired, 0) + IFNULL(crapa.not_expired, 0) + IFNULL(cspa.not_expired, 0) + IFNULL(cmpa.not_expired, 0) ) AS current_cards, GREATEST(IFNULL(crgpa.exp_date, '0000-00-00'), IFNULL(crapa.exp_date, '0000-00-00'), IFNULL(cspa.exp_date, '0000-00-00'), IFNULL(cmpa.exp_date, '0000-00-00')) AS expire_last FROM club_members cm INNER JOIN users u ON (cm.user_id = u.id AND cm.club_id = '{$club_id}') LEFT JOIN ( SELECT user_id, COUNT(IF((expiry_date > DATE(NOW())), 1, null)) AS not_expired, COUNT(IF((expiry_date < DATE(NOW())), 1, null)) AS expired, expiry_date AS exp_date FROM card_rfidbadges_pool_allocations GROUP BY user_id ORDER BY expiry_date DESC ) crgpa ON crgpa.user_id = u.id LEFT JOIN ( SELECT user_id, COUNT(IF((expiry_date > DATE(NOW())), 1, null)) AS not_expired, COUNT(IF((expiry_date < DATE(NOW())), 1, null)) AS expired, expiry_date AS exp_date FROM card_rfidbracelets_pool_allocations GROUP BY user_id ORDER BY expiry_date DESC ) crapa ON crapa.user_id = u.id LEFT JOIN ( SELECT user_id, COUNT(IF((expiry_date > DATE(NOW())), 1, null)) AS not_expired, COUNT(IF((expiry_date < DATE(NOW())), 1, null)) AS expired, expiry_date AS exp_date FROM card_smartcards_pool_allocations GROUP BY user_id ORDER BY expiry_date DESC ) cspa ON cspa.user_id = u.id LEFT JOIN ( SELECT user_id, COUNT(IF((expiry_date > DATE(NOW())), 1, null)) AS not_expired, COUNT(IF((expiry_date < DATE(NOW())), 1, null)) AS expired, expiry_date AS exp_date FROM card_magnetic_pool_allocations GROUP BY user_id ORDER BY expiry_date DESC ) cmpa ON cmpa.user_id = u.id GROUP BY u.id";

        $this->loadModel('ClubMember');
        $members_to_assign = $this->ClubMember->query($sql);


        $this->set(compact('members_to_assign', 'last_user_of_card', 'unique_id', 'params', 'tables'));

    }

    public function all_cards_assigned_to_user()
    {
        $this->layout = 'ajax';
        $this->autoRender = false;
        $memberId = $this->request->data['member_id'];


        $sql = "SELECT ptable.unique_id, CASE WHEN ptable.expiry_date > NOW() OR ptable.expiry_date = '0000-00-00' THEN 'Active' ELSE 'Expired' END AS card_status, 'Rfid badge' AS card_type, last_assignment.expiry_date, last_assignment.start_date, last_assignment.user_name FROM card_rfidbadges_pool_allocations ptable LEFT JOIN ( SELECT c.unique_id, c.expiry_date,c.start_date, (CONCAT_WS(' ', u.firstname, u.lastname)) AS user_name, u.id AS user_id FROM card_rfidbadges_pool_allocations c LEFT JOIN users u ON c.user_id = u.id WHERE u.id = '{$memberId}' ORDER BY expiry_date DESC ) AS last_assignment ON last_assignment.unique_id = ptable.unique_id WHERE last_assignment.user_id = '{$memberId}' AND ptable.user_id = '{$memberId}' UNION ALL SELECT ptable.unique_id, CASE WHEN ptable.expiry_date > NOW() OR ptable.expiry_date = '0000-00-00' THEN 'Active' ELSE 'Expired' END AS card_status, 'Rfid bracelet' AS card_type, last_assignment.expiry_date, last_assignment.start_date, last_assignment.user_name FROM card_rfidbracelets_pool_allocations ptable LEFT JOIN ( SELECT c.unique_id, c.expiry_date,c.start_date, (CONCAT_WS(' ', u.firstname, u.lastname)) AS user_name, u.id as user_id FROM card_rfidbracelets_pool_allocations c LEFT JOIN users u ON c.user_id = u.id WHERE u.id = '{$memberId}' ORDER BY expiry_date DESC ) AS last_assignment ON last_assignment.unique_id = ptable.unique_id WHERE last_assignment.user_id = '{$memberId}' AND ptable.user_id = '{$memberId}' UNION ALL SELECT ptable.unique_id, CASE WHEN ptable.expiry_date > NOW() OR ptable.expiry_date = '0000-00-00' THEN 'Active' ELSE 'Expired' END AS card_status, 'Smart cards' AS card_type, last_assignment.expiry_date, last_assignment.start_date, last_assignment.user_name FROM card_smartcards_pool_allocations ptable LEFT JOIN ( SELECT c.unique_id, c.expiry_date,c.start_date, (CONCAT_WS(' ', u.firstname, u.lastname)) AS user_name, u.id as user_id FROM card_smartcards_pool_allocations c LEFT JOIN users u ON c.user_id = u.id WHERE u.id = '{$memberId}' ORDER BY expiry_date DESC ) AS last_assignment ON last_assignment.unique_id = ptable.unique_id WHERE last_assignment.user_id = '{$memberId}' AND  ptable.user_id = '{$memberId}' UNION ALL SELECT ptable.unique_id, CASE WHEN ptable.expiry_date > NOW() OR ptable.expiry_date = '0000-00-00' THEN 'Active' ELSE 'Expired' END AS card_status, 'Magnetic' AS card_type, last_assignment.expiry_date, last_assignment.start_date, last_assignment.user_name FROM card_magnetic_pool_allocations ptable LEFT JOIN ( SELECT c.unique_id, c.expiry_date,c.start_date, (CONCAT_WS(' ', u.firstname, u.lastname)) AS user_name, u.id AS user_id FROM card_magnetic_pool_allocations c LEFT JOIN users u ON c.user_id = u.id WHERE u.id = '{$memberId}' ORDER BY expiry_date DESC ) AS last_assignment ON last_assignment.unique_id = ptable.unique_id WHERE last_assignment.user_id = '{$memberId}' AND ptable.user_id = '{$memberId}' GROUP BY unique_id, card_type ORDER BY start_date DESC";

        $this->loadModel('Club');
        $assignmentsOfUser = $this->Club->query($sql);
        echo json_encode($assignmentsOfUser);
        exit;

    }


    public function assign_card_to_member()
    {
        $this->layout = 'ajax';
        $this->autoRender = false;

        $unique_id = $this->request->data['card'];
        $params = (isset($this->request->data['params']) ? $this->request->data['params'] : 'magnetic');
        $member = $this->request->data['member'];
        $this->loadModel('Club');
        $tables = $this->Club->getTablesForCardType($params);

        $today = date('Y-m-d');
        $this->loadModel($tables->secndTblFetch);

        $overlaps = $this->{$tables->secndTblFetch}->find(
            'count', [
            'conditions' => [
                $tables->secndTblFetch . '.unique_id' => $unique_id,
                $tables->secndTblFetch . '.start_date >' => $today,
                $tables->secndTblFetch . '.expiry_date >= ' => $today
            ],
            'recursive' => -1,
        ]);


        if ((int)$overlaps < 1) {
            $this->loadModel($tables->tblFtchName);
            $cardTableId = $this->{$tables->tblFtchName}->find(
                'first', [
                'conditions' => [
                    'unique_id' => $unique_id,
                    'clubuser_id' => $_SESSION['Auth']['User']['id']
                ],
                'fields' => ['id', 'suspended_date'],
                'recursive' => -1,
            ]);

            if (!empty($cardTableId)) {
                $data = [];
                $data['card_magneticpool_id'] = $cardTableId[$tables->tblFtchName]['id'];
                $data['unique_id'] = $unique_id;
                $data['user_id'] = $member;
                $data['start_date'] = date("Y-m-d");
                $data['expiry_date'] = $cardTableId[$tables->tblFtchName]['suspended_date'];

                $this->{$tables->secndTblFetch}->create();
                if($this->{$tables->secndTblFetch}->save($data)) {
                    $this->{$tables->tblFtchName}->query(
                        "UPDATE  $tables->tblFtchName SET assigned_status='Y' WHERE clubuser_id='" . $_SESSION['Auth']['User']['id'] . "' AND id='" . $cardTableId[$tables->tblFtchName]['id'] . "'"
                    );

                    echo 1;
                    exit;
                } else {
                    echo 2;
                    exit;
                }
            } else {
                echo 3;
                exit;
            }
        } else {
            echo 4;
            exit;
        }
    }

    function save_edit_assing_card()
    {

        $this->layout = '';
        $this->autoRender = true;


        $params = $this->request->data['params'];

        if ($params) {
            $this->loadModel('Club');
            $tables = $this->Club->getTablesForCardType($params);
            $data_first_table = [];
            $data_secnd_table = [];

            $cards_to_update = $this->request->data['cards'];
            foreach ($cards_to_update as $card) {
                $data_first_table[] = [
                    $tables->tblFtchName => $card['card']
                ];
                $data_secnd_table[] = [
                    $tables->secndTblFetch => $card['assignment']
                ];
            }

            if (!empty($data_first_table)) {
                $this->loadModel($tables->tblFtchName);
                $this->{$tables->tblFtchName}->saveMany($data_first_table);
            }

            if (!empty($data_secnd_table)) {
                $this->loadModel($tables->secndTblFetch);
                $this->{$tables->secndTblFetch}->saveMany($data_secnd_table);
            }

            echo 1;
        } else {
            echo 0;
        }

        exit;

    }


    public function user_card_assinement($params = null, $unique_id, $user_id = null)
    {

        $this->layout = 'club_clubtab';
        $this->autoRender = true;
        if (!empty($this->request->data)) {

            $params = $this->request->data['params'];
            $card = $this->request->data['card'];
            $unique_id = $this->request->data['card'];
        } else {

            $unique_id = $this->params->pass[1];
            $params = $this->params->pass[0];
            $card = $this->params->pass[1];
        }

        $this->set(compact("params"));
        $tblcnd = null;
        switch ($params) {

            //            case 'magnetic' :
            //                $tblFtchName = 'card_magnetic_pools';
            //                $secndTblFetch = 'card_magnetic_pool_allocations';
            //                $cnd_id_name = 'card_magneticpool_id';
            //                $optfields = array(
            //                    'block_magnetic',
            //                    'block_magneticbadge_date',
            //                    'block_magneticbadge_range_from1',
            //                    'block_magneticbadge_range_to1',
            //                    'block_magneticbadge_range_from2',
            //                    'block_magneticbadge_range_to2'
            //                );
            //                $optfields1 = array('card_magneticpool_id');
            //
            //
            //                break;

            case 'rfidbadge' :
                $tblFtchName = 'card_rfidbadges_pools';
                $secndTblFetch = 'card_rfidbadges_pool_allocations';
                $cnd_id_name = 'card_rfidbadgespool_id';
                $optfields = array(
                    'block_rfidbadges',
                    'block_rfidbadge_date',
                    'block_rfidbadge_range_from1',
                    'block_rfidbadge_range_to1',
                    'block_rfidbadge_range_from2',
                    'block_rfidbadge_range_to2'
                );
                $optfields1 = array('card_rfidbadgespool_id');
                break;

            case 'rfidbracelet' :
                $tblFtchName = 'card_rfidbracelets_pools';
                $secndTblFetch = 'card_rfidbracelets_pool_allocations';
                $cnd_id_name = 'card_rfidbraceletspool_id';
                $optfields = array(
                    'block_rfidbracelets',
                    'block_rfidbracelets_date',
                    'block_rfidbracelets_range_from1',
                    'block_rfidbracelets_range_to1',
                    'block_rfidbracelets_range_from2',
                    'block_rfidbracelets_range_to2'
                );
                $optfields1 = array('card_rfidbraceletspool_id');
                break;

            case 'smartcard' :
                $tblFtchName = 'card_smartcards_pools';
                $secndTblFetch = 'card_smartcards_pool_allocations';
                $cnd_id_name = 'card_smartcardspool_id';
                $optfields = array(
                    'block_smartcards',
                    'block_smartcards_date',
                    'block_smartcards_range_from1',
                    'block_smartcards_range_to1',
                    'block_smartcards_range_from2',
                    'block_smartcards_range_to2'
                );
                $optfields1 = array('card_smartcardspool_id');
                break;

            default :
                $tblFtchName = 'card_magnetic_pools';
                $secndTblFetch = 'card_magnetic_pool_allocations';
                $cnd_id_name = 'card_magneticpool_id';
                $optfields = array(
                    'block_magnetic',
                    'block_magneticbadge_date',
                    'block_magneticbadge_range_from1',
                    'block_magneticbadge_range_to1',
                    'block_magneticbadge_range_from2',
                    'block_magneticbadge_range_to2'
                );
                $optfields1 = array('card_magneticpool_id');
                break;
        }

        $this->loadModel($tblFtchName);
        $this->loadModel($secndTblFetch);
        $this->loadModel('admin_setting_for_users');

        $tblcnd .= " $tblFtchName.clubuser_id=" . $_SESSION['Auth']['User']['id'];
        $onCondition = "$secndTblFetch.$optfields1[0]=$tblFtchName.id";
        $onCondition1 = "$secndTblFetch.user_id=users.id";
        //$fetch_details=$this->$tblFtchName->find('all',array("joins"=>array(array("table"=>$secndTblFetch,"type"=>"left","conditions"=>$onCondition),array("table"=>"users","type"=>"left","conditions"=>$onCondition1)),'fields'=>array('users.username','users.id',$tblFtchName.'.assigned_status',$tblFtchName.'.suspended_status',$tblFtchName.'.suspended_date',$secndTblFetch.'.unique_id',$secndTblFetch.'.unique_id', $secndTblFetch.'.start_date',$secndTblFetch.'.expiry_date',$tblFtchName.'.unique_id'),'conditions'=>array($tblcnd)));
        // pr($this->getLastQuery($tblFtchName));exit;

        $fetch_details = $this->$tblFtchName->find('all', array('conditions' => array($tblcnd)));
        $user_array = array();
        $secondtable_array = array();

        foreach ($fetch_details as $row) {

            $result = $this->$secndTblFetch->query("select * from  $secndTblFetch where $optfields1[0]='" . $row[$tblFtchName]['id'] . "'  order by id DESC limit 0,1");

            if (!empty($result)) {

                $user_result = $this->User->find('all', array('fields' => array('User.username', 'User.lastname'), 'conditions' => array("User.id" => $result[0][$secndTblFetch]["user_id"])));
                $secondtable_array[$row[$tblFtchName]['id']] = $result[0][$secndTblFetch];
                $user_array[$row[$tblFtchName]['id']] = $user_result[0];
            }
        }

        $fetch_admin_settings = $this->admin_setting_for_users->find(
            'all', array(
            'conditions' => array(
                'admin_setting_for_users.user_id' => $this->Session->read('Auth.User.id')
            ),
            'fields' => $optfields,
            'limit' => '1',
            "order" => array('admin_setting_for_users.id  DESC')
        ));

        $fetch_block_Dtail = $fetch_admin_settings[0]['admin_setting_for_users'];
        $block_by_admin = 'N';
        $block_admin_date = '';
        $block_admin_from1 = '0';
        $block_admin_to1 = '0';
        $block_admin_from2 = '0';
        $block_admin_to2 = '0';

        if ($fetch_block_Dtail[$optfields[0]] == 'Y') {

            $block_by_admin = 'Y';
            $block_admin_date = $fetch_block_Dtail[$optfields[1]];
            $block_admin_from1 = empty($fetch_block_Dtail[$optfields[2]]) ? '0' : $fetch_block_Dtail[$optfields[2]];
            $block_admin_to1 = empty($fetch_block_Dtail[$optfields[3]]) ? '0' : $fetch_block_Dtail[$optfields[3]];
            $block_admin_from2 = empty($fetch_block_Dtail[$optfields[4]]) ? '0' : $fetch_block_Dtail[$optfields[4]];
            $block_admin_to2 = empty($fetch_block_Dtail[$optfields[5]]) ? '0' : $fetch_block_Dtail[$optfields[5]];
        }

        $this->set(compact('block_by_admin', 'block_admin_date', 'block_admin_from1', 'block_admin_to1', 'block_admin_from2', 'block_admin_to2'));

        $unique_id = $card;
        $user_id = $user_id;
        $this->set(compact('user_id', 'user_array', 'user_result', 'secondtable_array', 'fetch_details', 'find_unique_id1', 'unique_id', 'params', 'secndTblFetch', 'tblFtchName'));

    }

    function save_card_to_user()
    {

        $this->layout = '';
        $this->autoRender = true;
        $user_id = $this->request->data['user_id'];
        $unique_id = $this->request->data['unique_id'];
        $params = $this->request->data['params'];

        switch ($params) {

            case 'magnetic' :
                $tblFtchName = 'card_magnetic_pools';
                $secndTblFetch = 'card_magnetic_pool_allocations';
                break;
            case 'rfidbadge' :
                $tblFtchName = 'card_rfidbadges_pools';
                $secndTblFetch = 'card_magnetic_pool_allocations';
                break;
            case 'rfidbracelet' :
                $tblFtchName = 'card_rfidbracelets_pools';
                $secndTblFetch = 'card_magnetic_pool_allocations';
                break;
            case 'smartcard' :
                $tblFtchName = 'card_smartcards_pools';
                $secndTblFetch = 'card_magnetic_pool_allocations';
                break;
            default :
                $tblFtchName = 'card_magnetic_pools';
                $secndTblFetch = 'card_magnetic_pool_allocations';
                break;
        }

        $this->loadModel($tblFtchName);
        $this->loadModel($secndTblFetch);

        $card_table_id = $this->$tblFtchName->find(
            'all', array(
            'conditions' => array(
                'unique_id' => $unique_id,
                'clubuser_id' => $_SESSION['Auth']['User']['id']
            )
        ));

        $card_table_id1 = $card_table_id[0][$tblFtchName]['id'];

        if ($this->request->data['assigned_status'] == "Y") {

            $old_unique_id = $this->request->data['old_unique_id'];
            $card_table_id1 = $this->$secndTblFetch->find(
                'all', array(
                'conditions' => array(
                    'unique_id' => $old_unique_id,
                    'user_id' => $user_id
                ),
                'limit' => '1',
                "order" => array(
                    $secndTblFetch . '.id  DESC'
                )
            ));

            $card_table_id2 = $card_table_id1[0][$secndTblFetch]['id'];
            // print_r("update $secndTblFetch set expiry_date='".date('Y-m-d')."' where user_id='".$user_id."' and unique_id='".$old_unique_id."' and $secndTblFetch.id='".$card_table_id2."'");exit;

            $this->$secndTblFetch->query("update $secndTblFetch set expiry_date='" . date('Y-m-d') . "' where user_id='" . $user_id . "' and unique_id='" . $old_unique_id . "' and $secndTblFetch.id='" . $card_table_id2 . "'");

        } else {

            $this->$tblFtchName->query("update  $tblFtchName  set  assigned_status='Y' where unique_id='" . $unique_id . "' and clubuser_id='" . $_SESSION['Auth']['User']['id'] . "' and id='" . $card_table_id1 . "'");
        }

        $card_table_id1 = $card_table_id[0][$tblFtchName]['id'];

        $this->$tblFtchName->query("update  $tblFtchName  set  assigned_status='Y' where unique_id='" . $unique_id . "' and clubuser_id='" . $_SESSION['Auth']['User']['id'] . "' and id='" . $card_table_id1 . "'");
        $this->$secndTblFetch->create();

        $data = array();
        $data['card_magneticpool_id'] = $card_table_id1;
        $data['unique_id'] = $unique_id;
        $data['user_id'] = $user_id;
        $data['start_date'] = date("Y-m-d");

        if ($card_table_id = $this->$secndTblFetch->save($data)) {
            echo "1";
            exit;
        } else {
            echo "0";
            exit;
        }
    }

    function manage_card_lists_print($urlIdArray = NULL)
    {

        $this->layout = '';
        $urlIdArray = $_SESSION['urlIdArray'];
        $dataToPrint = explode('#~ ', urldecode($_SESSION['urlIdArray']['urlParam']));

        $m = 0;
        $prData = array();
        foreach ($dataToPrint as $value) {

            $urlIdArray1 = (urldecode($value));
            $dataToPrint12 = explode('&', $urlIdArray1);
            foreach ($dataToPrint12 as $row) {
                $row1 = explode('=', $row);
                $prData[$m][$row1[0]] = $row1[1];
            }
            $m++;
        }
        $this->set(compact('prData'));
    }

    function store_date_to_session()
    {

        if (!empty($this->request->data)) {

            $this->layout = '';
            $_SESSION['urlIdArray'] = $this->request->data;

        } else {

            echo "0";
            exit;
        }

        // print_r($prData);
        // exit;
    }

    /*     * *****************swapnil****************************** */

    function club_account_purches()
    {

        $this->layout = "club_clubtab";
        $this->loadModel('club_purchase_accounts');
        $this->loadModel('club_purchase_account_rest_details');
        $this->loadModel('countries');
        $this->loadModel('subscription_settings');
        $this->loadModel('states');
        $this->loadModel('club_settings');
        $this->loadModel('club_purchase_account_rest_details');

        $id = $_SESSION['Auth']['User']['id'];
        $card_purchase_rest_details = $this->club_purchase_account_rest_details->find(
            'all', array(
            'fields' => array(
                'club_purchase_account_rest_details.clubuser_id',
                'club_purchase_account_rest_details.club_purchase_account_id',
                'club_purchase_account_rest_details.created'
            ),
            'group' => 'clubuser_id',
            'order' => "club_purchase_account_rest_details.id DESC"
        ));

        $last_date = array();
        foreach ($card_purchase_rest_details as $lastDate) {
            $last_date[$lastDate['club_purchase_account_rest_details']['club_purchase_account_id']] = $lastDate['club_purchase_account_rest_details']['created'];
        }

        $_SESSION['area_product'] = "Accounts";
        $result = array();

        $club_settings = $this->club_settings->find('all');
        $club_settings1 = array();
        foreach ($club_settings as $key => $value) {
            $club_settings1[$value["club_settings"]['id']] = $value['club_settings'];
        }

        if ($this->request->is('post', 'put')) {

            if (isset($this->request->data['search_order']['orderby'])) {

                if ($this->request->data['search_order']['orderby'] == "date") {

                    $order = "club_purchase_accounts.created DESC";
                    $result = $this->User->find(
                        'all', array(
                            'joins' => array(
                                array('table' => 'club_purchase_accounts', 'type' => 'inner', 'conditions' => 'User.id=club_purchase_accounts.clubuser_id'),
                                array('table' => 'countries', 'type' => 'inner', 'conditions' => 'User.country_id=countries.id'),
                                array('table' => 'subscription_settings', 'type' => 'inner', 'conditions' => 'User.subscription_setting_id=subscription_settings.id'),
                                array('table' => 'states', 'type' => 'left', 'conditions' => 'states.id=User.state_id')
                            ), 'fields' => array('User.lastname', 'User.subscription_start_date', 'User.subscription_end_date', 'User.firstname', 'club_purchase_accounts.total_balance', 'club_purchase_accounts.mode_of_purchase', 'club_purchase_accounts.total_amount', 'User.username', 'User.image', 'club_purchase_accounts.id', 'User.subscription_setting_id', 'club_purchase_accounts.accounts', 'club_purchase_accounts.created', 'club_purchase_accounts.payment_status', 'club_purchase_accounts.club_setting_id', 'countries.name', 'subscription_settings.subscription_name', 'states.name', 'club_purchase_accounts.payment_status'), 'conditions' => array("User.id" => $id), "order" => array($order)
                        )
                    );
                }
            } else {

                $conditions = '';
                if ((!empty($this->request->data['filterSearch']['date_from']))
                    && empty($this->request->data['filterSearch']['date_to'])
                ) {

                    $conditions .= "club_purchase_accounts.created ='" . $this->request->data['filterSearch']['date_from'] . "' AND ";

                } else if ((!empty($this->request->data['filterSearch']['date_from']))
                    && (!empty($this->request->data['filterSearch']['date_to']))
                ) {
                    $conditions .= "club_purchase_accounts.created>='" . $this->request->data['filterSearch']['date_from'] . "' AND club_purchase_accounts.created<='" . $this->request->data['filterSearch']['date_to'] . "' AND ";
                }

                if (isset($this->request->data['filterSearch']['lang_value_id'])
                    && !empty($this->request->data['filterSearch']['lang_value_id'])
                ) {
                    $conditions .= "club_purchase_accounts.payment_status='" . $this->request->data['filterSearch']['lang_value_id'] . "' AND ";
                }

                $conditions = substr($conditions, 0, -4);

                $result = $this->User->find(
                    'all', array(
                        'joins' => array(
                            array('table' => 'club_purchase_accounts', 'type' => 'inner', 'conditions' => 'User.id=club_purchase_accounts.clubuser_id'),
                            array('table' => 'countries', 'type' => 'inner', 'conditions' => 'User.country_id=countries.id'),
                            array('table' => 'subscription_settings', 'type' => 'inner', 'conditions' => 'User.subscription_setting_id=subscription_settings.id'),
                            array('table' => 'states', 'type' => 'left', 'conditions' => 'states.id=User.state_id')
                        ), 'fields' => array('User.lastname', 'User.subscription_start_date', 'User.subscription_end_date', 'User.firstname', 'club_purchase_accounts.total_amount', 'club_purchase_accounts.total_balance', 'User.username', 'User.image', 'club_purchase_accounts.id', 'User.subscription_setting_id', 'club_purchase_accounts.mode_of_purchase', 'club_purchase_accounts.accounts', 'club_purchase_accounts.created', 'club_purchase_accounts.payment_status', 'club_purchase_accounts.club_setting_id', 'countries.name', 'subscription_settings.subscription_name', 'states.name', 'club_purchase_accounts.payment_status'), 'conditions' => array($conditions, "User.id" => $id)
                    )
                );
            }

        } else {

            $result = $this->User->find(
                'all', array(
                    'joins' => array(
                        array('table' => 'club_purchase_accounts', 'type' => 'inner', 'conditions' => 'User.id=club_purchase_accounts.clubuser_id'),
                        array('table' => 'countries', 'type' => 'inner', 'conditions' => 'User.country_id=countries.id'),
                        array('table' => 'subscription_settings', 'type' => 'inner', 'conditions' => 'User.subscription_setting_id=subscription_settings.id'),
                        array('table' => 'states', 'type' => 'left', 'conditions' => 'states.id=User.state_id')
                    ), 'fields' => array('User.lastname', 'User.subscription_start_date', 'User.subscription_end_date', 'club_purchase_accounts.total_amount', 'club_purchase_accounts.total_balance', 'User.firstname', 'User.username', 'User.image', 'User.subscription_setting_id', 'club_purchase_accounts.id', 'club_purchase_accounts.mode_of_purchase', 'club_purchase_accounts.accounts', 'club_purchase_accounts.created', 'club_purchase_accounts.mode_of_purchase', 'club_purchase_accounts.total_amount', 'club_purchase_accounts.total_balance', 'club_purchase_accounts.payment_status', 'club_purchase_accounts.club_setting_id', 'countries.name', 'subscription_settings.subscription_name', 'states.name', 'club_purchase_accounts.payment_status'), 'conditions' => array("User.id" => $id), 'order' => 'club_purchase_accounts.id DESC '
                )
            );
        }
        $this->set(compact('result', 'club_settings1'));
    }

    public function clubsetting_membertype()
    {

        $this->layout = 'club_clubtab';
        $this->loadModel('ClubSettingMembertype');
        $this->loadModel('ClubsettingMembertypeModel');

        $clubsetting_membertype_models = $this->ClubsettingMembertypeModel->find(
            'list', array(
            'fields' => array('id', 'name')
        ));

        $club_setting_membertypes = $this->ClubSettingMembertype->find(
            'all', array(
            'conditions' => array(
                "ClubSettingMembertype.user_id" => $this->Session->read('Auth.User.id')
            )
        ));

        $this->set(compact('clubsetting_membertype_models', 'club_setting_membertypes'));

        if ($this->request->is('post', 'put')) {

            if (isset($this->request->data['OrderByAlpha'])) {

                $club_setting_membertypes = $this->ClubSettingMembertype->find('all', array('conditions' => array("ClubSettingMembertype.user_id" => $this->Session->read('Auth.User.id')), 'order' => 'member_type_name ASC'));
                $this->set(compact('club_setting_membertypes'));

            } else {

                $this->request->data["ClubSettingMembertype"]["user_id"] = $this->Session->read('Auth.User.id');
                $this->request->data["ClubSettingMembertype"]["club_id"] = $user = $this->Session->read('Auth.User.Role.id');

                if (empty($this->request->data["ClubSettingMembertype"]["membertyp_id"])) {
                    unset($this->request->data["ClubSettingMembertype"]["membertyp_id"]);
                }

                if ($this->request->data["ClubSettingMembertype"]["discount_status"] == 0) {
                    $this->request->data["ClubSettingMembertype"]["discount_status"] = "N";
                } else {
                    $this->request->data["ClubSettingMembertype"]["discount_status"] = "Y";
                }

                $this->ClubSettingMembertype->save($this->request->data);
                return $this->redirect("clubsetting_membertype");
            }
        }
    }

    public function admin_clubsetting_membertype($club_id = null, $user_id = null)
    {

        $this->layout = 'default';
        $this->loadModel('ClubSettingMembertype');
        $this->loadModel('ClubsettingMembertypeModel');
        $this->loadModel('User');
        $user_record = $this->User->getRecordById($user_id);
        $clubsetting_membertype_models = $this->ClubsettingMembertypeModel->find(
            'list', array(
            'fields' => array('id', 'name')
        ));

        $club_setting_membertypes = $this->ClubSettingMembertype->find(
            'all', array(
            'conditions' => array(
                "ClubSettingMembertype.user_id" => $user_id
            )
        ));

        $this->set(compact('clubsetting_membertype_models', 'club_setting_membertypes'));

        if ($this->request->is('post', 'put')) {

            if (isset($this->request->data['OrderByAlpha'])) {

                $club_setting_membertypes = $this->ClubSettingMembertype->find('all', array('conditions' => array("ClubSettingMembertype.user_id" => $user_id), 'order' => 'member_type_name ASC'));
                $this->set(compact('club_setting_membertypes'));

            } else {

                $this->request->data["ClubSettingMembertype"]["user_id"] = $user_id;
                $this->request->data["ClubSettingMembertype"]["club_id"] = $user = $user_record['Role']['id'];

                if (empty($this->request->data["ClubSettingMembertype"]["membertyp_id"])) {
                    unset($this->request->data["ClubSettingMembertype"]["membertyp_id"]);
                }

                if ($this->request->data["ClubSettingMembertype"]["discount_status"] == 0) {
                    $this->request->data["ClubSettingMembertype"]["discount_status"] = "N";
                } else {
                    $this->request->data["ClubSettingMembertype"]["discount_status"] = "Y";
                }

                $this->ClubSettingMembertype->save($this->request->data);
                return $this->redirect("admin_clubsetting_membertype/" . $club_id . '/' . $user_id);
            }
        }
        $this->set('user_id', $user_id);
        $this->set('club_id', $club_id);

    }

    public function delete_membertype($id)
    {

        $this->loadModel('ClubSettingMembertype');
        $this->ClubSettingMembertype->id = $id;
        $this->ClubSettingMembertype->delete();
        return $this->redirect($_SERVER["HTTP_REFERER"]);
    }

    public function admin_delete_membertype($id, $club_id = null, $user_id = null)
    {

        $this->loadModel('ClubSettingMembertype');
        $this->ClubSettingMembertype->id = $id;
        $this->ClubSettingMembertype->delete();
        $this->set('user_id', $user_id);
        $this->set('club_id', $club_id);
        return $this->redirect($_SERVER["HTTP_REFERER"]);
    }

    public function edit_membertype()
    {

        $this->layout = 'ajax';
        $this->autoRender = true;
        $this->loadModel('ClubSettingMembertype');
        $this->loadModel('ClubsettingMembertypeModel');

        $id = $this->request->data['id'];
        $clubsetting_membertype_models = $this->ClubsettingMembertypeModel->find(
            'list', array(
            'fields' => array('id', 'name')
        ));

        $club_setting_membertypes = $this->ClubSettingMembertype->find(
            'all', array(
            'conditions' => array('ClubSettingMembertype.id' => $this->request->data['id'])
        ));

        $this->request->data = $club_setting_membertypes[0];
        $this->set(compact('clubsetting_membertype_models', 'id'));
    }

    public function admin_edit_membertype()
    {

        $this->layout = 'ajax';
        $this->autoRender = true;
        $this->loadModel('ClubSettingMembertype');
        $this->loadModel('ClubsettingMembertypeModel');

        $id = $this->request->data['id'];
        $user_id = $this->request->data['user_id'];
        $club_id = $this->request->data['club_id'];
        $clubsetting_membertype_models = $this->ClubsettingMembertypeModel->find(
            'list', array(
            'fields' => array('id', 'name')
        ));

        $club_setting_membertypes = $this->ClubSettingMembertype->find(
            'all', array(
            'conditions' => array('ClubSettingMembertype.id' => $this->request->data['id'])
        ));

        $this->request->data = $club_setting_membertypes[0];
        $this->set(compact('clubsetting_membertype_models', 'id', 'user_id', 'club_id'));
    }

    public function clubsetting_membertype_edit($id = null)
    {

        $this->layout = 'club_clubtab';
        $this->loadModel('ClubSettingMembertype');

        if ($this->request->data["ClubSettingMembertype"]["discount_status"] == 0) {
            $this->request->data["ClubSettingMembertype"]["discount_status"] = "N";
        } else {
            $this->request->data["ClubSettingMembertype"]["discount_status"] = "Y";
        }

        $this->ClubSettingMembertype->id = $id;
        $this->ClubSettingMembertype->save($this->request->data);
        return $this->redirect(array('controller' => 'clubs', 'action' => 'clubsetting_membertype'));
    }

    public function admin_clubsetting_membertype_edit($id = null, $club_id = null, $user_id = null)
    {

        $this->layout = 'club_clubtab';
        $this->loadModel('ClubSettingMembertype');

        if ($this->request->data["ClubSettingMembertype"]["discount_status"] == 0) {
            $this->request->data["ClubSettingMembertype"]["discount_status"] = "N";
        } else {
            $this->request->data["ClubSettingMembertype"]["discount_status"] = "Y";
        }

        $this->ClubSettingMembertype->id = $id;
        $this->ClubSettingMembertype->save($this->request->data);
        return $this->redirect(array('controller' => 'clubs', 'action' => 'admin_clubsetting_membertype/' . $club_id . '/' . $user_id));
    }

    public function check_dubplicate_name()
    {

        $this->layout = 'ajax';
        $this->autoRender = true;
        $this->loadModel('ClubSettingMembertype');
        if (!empty($this->request->data['id'])) {
            $condition = array("conditions" => array('ClubSettingMembertype.member_type_name' => $this->request->data['member_type_name'], "ClubSettingMembertype.id !=" => $this->request->data['id'], "ClubSettingMembertype.user_id" => $this->Session->read('Auth.User.id')));
        } else {
            $condition = array("conditions" => array('ClubSettingMembertype.member_type_name' => $this->request->data['member_type_name'], "ClubSettingMembertype.user_id" => $this->Session->read('Auth.User.id')));
        }
        $club_setting_membertypes = $this->ClubSettingMembertype->find('count', $condition);
        if ($club_setting_membertypes > 0) {
            echo "1";
            exit;
        } else {
            echo "0";
            exit;
        }
    }

    public function clubsetting_typology_subscription()
    {

        $this->layout = 'club_clubtab';
        $this->loadModel('ClubSettingArea');
        $this->loadModel('ClubSettingSubscriptionTypology');

        $result = $this->ClubSettingSubscriptionTypology->find(
            'all', array(
            'conditions' => array(
                "ClubSettingSubscriptionTypology.user_id" => $this->Session->read('Auth.User.id'),
                "ClubSettingSubscriptionTypology.club_id" => $this->Session->read('Auth.Club.id')
            )
        ));
        $this->set(compact('result'));
    }

    public function ClubSettingSubscriptionTypology_dubplicate_name()
    {

        $this->layout = 'ajax';
        $this->autoRender = true;
        $this->loadModel('ClubSettingSubscriptionTypology');

        if (!empty($this->request->data['id'])) {

            $condition = array(
                "conditions" => array(
                    'ClubSettingSubscriptionTypology.member_type_name' => $this->request->data['member_type_name'],
                    "ClubSettingSubscriptionTypology.id !=" => $this->request->data['id'],
                    "ClubSettingSubscriptionTypology.user_id" => $this->Session->read('Auth.User.id')
                )
            );

        } else {

            $condition = array(
                "conditions" => array(
                    'ClubSettingSubscriptionTypology.member_type_name' => $this->request->data['member_type_name'],
                    "ClubSettingSubscriptionTypology.user_id" => $this->Session->read('Auth.User.id')
                )
            );
        }

        $ClubSettingSubscriptionTypology = $this->ClubSettingSubscriptionTypology->find('count', $condition);

        if ($ClubSettingSubscriptionTypology > 0) {

            echo "1";
            exit;

        } else {

            echo "0";
            exit;

        }
    }

    public function check_admin_password()
    {

        $this->layout = 'ajax';
        $this->autoRender = true;
        $admin_password = $this->request->data['admin_password'];
        $cbs = $this->request->data['cbs'];
        $password = Security::hash($admin_password, null, true);

        $user_id = $this->Session->read('Auth.User.id');

        $condition = array(
            "conditions" => array(
                "User.id" => $user_id,
                'password' => $password
            )
        );

        $this->loadModel('User');
        $this->User->unbindModel(
            array(
                'belongsTo' => array(
                    'Post',
                    'Operator',
                    'Club',
                    'Athlete',
                    'Coach',
                    'Team',
                    'Club_subscription_histories',
                    'Banner',
                    'SocialProfile'
                )
            ), true);

        $User = $this->User->find(
            'all', array(
            'fields' => array(
                'User.password'
            )
        ), $condition);

        if (!empty($User)) {

            echo "1";
            exit;

        } else {

            echo "0";
            exit;

        }
    }

    public function new_member_otherdetails($id = null)
    {

        $this->layout = 'club_clubtab';
        $this->loadModel('MemberOtherdetail');
        $this->loadModel('AdminSettingForUser');
        $fields = array("User.image");

        $unbindArray = array(
            'belongsTo' => array(
                'Post',
                'Operator',
                'Club',
                'Athlete',
                'Coach',
                'Team',
                'Club_subscription_histories',
                'Banner',
                'SocialProfile'
            )
        );

        $userRecord = $this->getFunctionByUserId($id, $fields, $unbindArray);
        $userImage = !empty($userRecord[0]["User"]["image"]) ? $userRecord[0]["User"]["image"] : "";
        $this->set(compact('userImage', 'id'));

        if ($this->request->is('post', 'put')) {

            $user_id = $this->Session->read('Auth.User.id');
            $this->request->data["MemberOtherdetail"]["club_user_id"] = $user_id;
            $club_id = $this->Session->read('Auth.Club.id');

            $this->request->data["MemberOtherdetail"]["club_id"] = $club_id;
            $this->request->data["MemberOtherdetail"]["club_member_id"] = $id;

            if (!empty($this->request->data["submit"])) {

                if ($this->request->data['AdminSettingForUser']['allow_display_profile_pic'] == 1) {
                    $this->request->data['AdminSettingForUser']['allow_display_profile_pic'] = 'Y';
                } else {
                    $this->request->data['AdminSettingForUser']['allow_display_profile_pic'] = 'N';
                }

                if ($this->request->data['AdminSettingForUser']['allow_to_modify_data'] == 1) {
                    $this->request->data['AdminSettingForUser']['allow_to_modify_data'] = 'Y';
                } else {
                    $this->request->data['AdminSettingForUser']['allow_to_modify_data'] = 'N';
                }

                $getReferenceData = $this->AdminSettingForUser->getSettingRecordByUserId($id);

                if (!empty($getReferenceData)) {
                    $this->AdminSettingForUser->id = $getReferenceData['AdminSettingForUser']['id'];
                } else {
                    $this->request->data['AdminSettingForUser']['user_id'] = $id;
                }

                if (!empty($this->request->data['AdminSettingForUser']['access_vip_main_data'])) {
                    $this->request->data['AdminSettingForUser']['access_vip_main_data'] = 'N';
                } else {
                    $this->request->data['AdminSettingForUser']['access_vip_main_data'] = 'Y';
                }

                if ($this->request->data['AdminSettingForUser']['access_vip_other_data'] == '') {
                    $this->request->data['AdminSettingForUser']['access_vip_other_data'] = 'N';
                }

                if ($this->request->data['AdminSettingForUser']['allow_ask_to_friendship'] == '') {
                    $this->request->data['AdminSettingForUser']['allow_ask_to_friendship'] = 'N';
                }

                if ($this->request->data['AdminSettingForUser']['allow_visitors_send_mail'] == '') {
                    $this->request->data['AdminSettingForUser']['allow_visitors_send_mail'] = 'N';
                }

                $this->AdminSettingForUser->save($this->request->data);
                /*******Private Setting********/

                if (empty($this->request->data["MemberOtherdetail"]["load_from_vendor"])) {
                    unset($this->request->data["MemberOtherdetail"]["load_from_vendor"]);
                }

                if (empty($this->request->data["MemberOtherdetail"]["load_from_coach"])) {
                    unset($this->request->data["MemberOtherdetail"]["load_from_coach"]);
                }

                if (empty($this->request->data["MemberOtherdetail"]["federation_deadline"])) {
                    unset($this->request->data["MemberOtherdetail"]["federation_deadline"]);
                }

                if (empty($this->request->data["MemberOtherdetail"]["enable_commision"])) {
                    unset($this->request->data["MemberOtherdetail"]["enable_commision"]);
                }

                if ($this->MemberOtherdetail->save($this->request->data)) {

                    if ($this->request->data['User']['image']['name'] != '') {

                        $FileName = $this->request->data['User']['image']['name'];
                        $NewFileName = time();
                        $pos = strrpos($FileName, '.');
                        $extension = substr($FileName, $pos);
                        $NewFileName = $NewFileName . $extension;
                        $path = WWW_ROOT . 'img\profile_images\\';
                        $destination = WWW_ROOT . 'img\profile_images\\' . $NewFileName;

                        if (move_uploaded_file($this->request->data['User']['image']['tmp_name'], $destination)) {
                            $this->request->data['User']['image'] = $NewFileName;
                        }

                        $this->User->id = $id;
                        $this->User->save($this->request->data);
                    }

                    $this->Session->setFlash(__('Record inserted successfully'), 'flash-message', array('type' => 'alert-success'), 'success');
                    return $this->redirect(array('controller' => 'clubs', 'action' => 'new_member_additional_setting', $id));
                }

            } else {

                unset($this->request->data["MemberOtherdetail"]);
                $this->request->data["MemberOtherdetail"]["club_member_id"] = $id;

                $user_id = $this->Session->read('Auth.User.id');
                $club_id = $this->Session->read('Auth.Club.id');

                $this->request->data["MemberOtherdetail"]["club_id"] = $club_id;
                $this->request->data["MemberOtherdetail"]["club_user_id"] = $user_id;
                $this->request->data["MemberOtherdetail"]["user_id"] = $id;

                if ($this->MemberOtherdetail->save($this->request->data)) {

                    $this->Session->setFlash(__('Record inserted successfully'), 'flash-message', array('type' => 'alert-success'), 'success');
                    return $this->redirect(array('controller' => 'clubs', 'action' => 'new_member_additional_setting', $id));
                }
            }
        }
    }

    /*     * *****************swapnil****************************** */

    public function new_member_otherdetails_edit($id = null)
    {
        

        $this->layout = 'club_clubtab';
        $this->loadModel('MemberOtherdetail');
        $this->loadModel('AdminSettingForUser');

        $fields = array("User.image", "User.username");
        $unbindArray = array(
            'belongsTo' => array(
                'Post',
                'Operator',
                'Club',
                'Athlete',
                'Coach',
                'Team',
                'Club_subscription_histories',
                'Banner',
                'SocialProfile'
            )
        );
        $userRecord = $this->getFunctionByUserId($id, $fields, $unbindArray);

        $userImage = !empty($userRecord[0]["User"]["image"]) ? $userRecord[0]["User"]["image"] : "";
        $this->set(compact('userImage', 'id', 'userRecord'));


        if ($this->request->is('post') || $this->request->is('put')) {

            //echo "<br>";
            //echo "if";
           // exit;
            $user_id = $this->Session->read('Auth.User.id');
            $this->request->data["MemberOtherdetail"]["club_user_id"] = $user_id;
            $club_id = $this->Session->read('Auth.Club.id');
            $this->request->data["MemberOtherdetail"]["club_id"] = $club_id;
            $this->request->data["MemberOtherdetail"]["club_member_id"] = $id;

            if (!empty($this->request->data["submit"])) {

                /*******Private Setting********/
                if (empty($this->request->data['MemberOtherdetail']['name_day'])) {
                    unset($this->request->data['MemberOtherdetail']['name_day']);
                } else {
                    $name_day = array();
                    if (!empty($this->request->data['MemberOtherdetail']['name_day']['year'])) {
                        $name_day[] = $this->request->data['MemberOtherdetail']['name_day']['year'];
                    }
                    if (!empty($this->request->data['MemberOtherdetail']['name_day']['month'])) {
                        $name_day[] = $this->request->data['MemberOtherdetail']['name_day']['month'];
                    }
                    if (!empty($this->request->data['MemberOtherdetail']['name_day']['day'])) {
                        $name_day[] = $this->request->data['MemberOtherdetail']['name_day']['day'];
                    }
                    unset($this->request->data['MemberOtherdetail']['name_day']);
                    //print_r( implode('-',$name_day));die;
                    $this->request->data['MemberOtherdetail']['name_day'] = implode('-', $name_day);
                    //print_r($this->request->data['MemberOtherdetail']['name_day']);die;

                }

                $getReferenceData = $this->AdminSettingForUser->getSettingRecordByUserId($id);
                if ($this->request->data['AdminSettingForUser']['allow_display_profile_pic'] == 1) {
                    $this->request->data['AdminSettingForUser']['allow_display_profile_pic'] = 'Y';
                } else {
                    $this->request->data['AdminSettingForUser']['allow_display_profile_pic'] = 'N';
                }

                if ($this->request->data['AdminSettingForUser']['allow_to_modify_data'] == 1) {
                    $this->request->data['AdminSettingForUser']['allow_to_modify_data'] = 'Y';
                } else {
                    $this->request->data['AdminSettingForUser']['allow_to_modify_data'] = 'N';
                }

                if (!empty($this->request->data['AdminSettingForUser']['access_vip_main_data'])) {
                    $this->request->data['AdminSettingForUser']['access_vip_main_data'] = 'N';
                } else {
                    $this->request->data['AdminSettingForUser']['access_vip_main_data'] = 'Y';
                }

                if (!empty($this->request->data['AdminSettingForUser']['access_vip_other_data'])) {
                    $this->request->data['AdminSettingForUser']['access_vip_other_data'] = 'N';
                } else {
                    $this->request->data['AdminSettingForUser']['access_vip_other_data'] = 'Y';
                }

                if (!empty($this->request->data['AdminSettingForUser']['allow_visitors_send_mail'])) {
                    $this->request->data['AdminSettingForUser']['allow_visitors_send_mail'] = 'N';
                } else {
                    $this->request->data['AdminSettingForUser']['allow_visitors_send_mail'] = 'Y';
                }

                if (!empty($this->request->data['AdminSettingForUser']['allow_ask_to_friendship'])) {
                    $this->request->data['AdminSettingForUser']['allow_ask_to_friendship'] = 'N';
                } else {
                    $this->request->data['AdminSettingForUser']['allow_ask_to_friendship'] = 'Y';
                }

                if (!empty($getReferenceData)) {
                    $this->AdminSettingForUser->id = $getReferenceData['AdminSettingForUser']['id'];
                } else {
                    $this->request->data['AdminSettingForUser']['user_id'] = $id;
                }

                $this->AdminSettingForUser->save($this->request->data['AdminSettingForUser']);

                /*******Private Setting********/

                if (empty($this->request->data["MemberOtherdetail"]["load_from_vendor"])) {
                    unset($this->request->data["MemberOtherdetail"]["load_from_vendor"]);
                }

                if (empty($this->request->data["MemberOtherdetail"]["load_from_coach"])) {
                    unset($this->request->data["MemberOtherdetail"]["load_from_coach"]);
                }

                if (empty($this->request->data["MemberOtherdetail"]["federation_deadline"])) {
                    unset($this->request->data["MemberOtherdetail"]["federation_deadline"]);
                }

                if (empty($this->request->data["MemberOtherdetail"]["enable_commision"])) {
                    unset($this->request->data["MemberOtherdetail"]["enable_commision"]);
                }

                if ($this->MemberOtherdetail->save($this->request->data)) {

                    if ($this->request->data['User']['image']['name'] != '') {

                        $FileName = $this->request->data['User']['image']['name'];
                        $NewFileName = time();
                        $pos = strrpos($FileName, '.');
                        $extension = substr($FileName, $pos);
                        $NewFileName = $NewFileName . $extension;
                        $path = WWW_ROOT . 'img\profile_images\\';
                        $destination = WWW_ROOT . 'img\profile_images\\' . $NewFileName;
                        if (move_uploaded_file($this->request->data['User']['image']['tmp_name'], $destination)) {
                            $this->request->data['User']['image'] = $NewFileName;
                        }

                        $this->User->id = $id;
                        $this->User->save($this->request->data);
                    }
                    $this->Session->setFlash(__('Record inserted successfully'), 'flash-message', array('type' => 'alert-success'), 'success');
                    return $this->redirect(array('controller' => 'clubs', 'action' => 'new_member_additional_setting_edit', $id));
                }

            } else {
               

                $result_check = $this->MemberOtherdetail->find(
                    "all", array(
                    "conditions" => array(
                        "AND" => array(
                            "MemberOtherdetail.club_member_id" => $id,
                            "MemberOtherdetail.club_user_id" => $this->Session->read('Auth.User.id')
                        )
                    )
                ));

                if (!empty($result_check)) {

                    $this->MemberOtherdetail->id = $result_check[0]["MemberOtherdetail"]["id"];
                } else {

                    unset($this->request->data["MemberOtherdetail"]);
                    $this->request->data["MemberOtherdetail"]["club_member_id"] = $id;
                    $user_id = $this->Session->read('Auth.User.id');
                    $club_id = $this->Session->read('Auth.Club.id');
                    $this->request->data["MemberOtherdetail"]["club_id"] = $club_id;
                    $this->request->data["MemberOtherdetail"]["club_user_id"] = $user_id;
                    $this->request->data["MemberOtherdetail"]["user_id"] = $id;
                }


                if ($this->MemberOtherdetail->save($this->request->data)) {


                    $this->Session->setFlash(__('Record inserted successfully'), 'flash-message', array('type' => 'alert-success'), 'success');
                    return $this->redirect(array('controller' => 'clubs', 'action' => 'new_member_additional_setting_edit', $id));
                }
            }

        } else {
            //echo "<br>";
           // echo "else";
            //exit;
            $result = $this->MemberOtherdetail->find("all", array("conditions" => array("AND" => array("MemberOtherdetail.club_member_id" => $id, "MemberOtherdetail.club_user_id" => $this->Session->read('Auth.User.id')))));

            $this->request->data = !empty($result[0]) ? $result[0] : "";
            if (!empty($this->request->data['MemberOtherdetail']['name_day'])) {
                $name_day_val = explode('-', $this->request->data['MemberOtherdetail']['name_day']);
                $this->request->data['MemberOtherdetail']['name_day']['day'] = !empty($name_day_val[2]) ? $name_day_val[2] : '';
                $this->request->data['MemberOtherdetail']['name_day']['month'] = !empty($name_day_val[1]) ? $name_day_val[1] : "";
                $this->request->data['MemberOtherdetail']['name_day']['year'] = !empty($name_day_val[0]) ? $name_day_val[0] : '';
            }
        }
       
    }

    public function new_member_additional_setting($id = null)
    {

        $this->layout = 'club_clubtab';
        $this->loadModel('User');
        $this->loadModel('measures');
        $this->loadModel('zones');
        $this->loadModel('weeks');
        $this->loadModel('themes');
        $this->loadModel('ClubMemberAdditionalSetting');
        $this->loadModel('language_value');
        $languageV = $this->language_value->find('list', array('fields' => array('id', 'lang_value'), 'order' => 'lang_value ASC'));
        $zonesList = $this->zones->find('list', array('fields' => array('id', 'zone_name'), 'order' => 'zone_name ASC'));
        $measureList = $this->measures->find('list', array('fields' => array('id', 'measure_unit')));
        $weekList = $this->weeks->find('list', array('fields' => array('id', 'week_name')));
        //$themesList = $this->themes->find('list', array('fields' => array('id', 'theme_name')));
        $themesList = $this->themes->find('all', array('fields' => array('id', 'theme_name', 'theme_type', 'theme_img')));


        $fields = array("zone_id", "measure_id", "theme_id", "week_id");
        $unbindArray = array('belongsTo' => array('Post', 'Operator', 'Club', 'Athlete', 'Coach', 'Team', 'Club_subscription_histories', 'Banner', 'SocialProfile'));
        //$userRecord = $this->getFunctionByUserId($id, $fields, $unbindArray);
        $this->set(compact('id', 'zonesList', 'measureList', 'weekList', 'themesList', 'languageV'));
        $user_record = $this->User->find('all', array('conditions' => array("User.id" => $id)));


        if ($this->request->is('post')) {

            if (!empty($this->request->data["submit"])) {

                if (empty($this->request->data["language_value_id"])) {
                    unset($this->request->data["language_value_id"]);
                }

                $this->User->id = $id;
                $this->User->save($this->request->data);
                $user_id = $this->Session->read('Auth.User.id');

                $this->request->data["ClubMemberAdditionalSetting"]["club_user_id"] = $user_id;
                $club_id = $this->Session->read('Auth.Club.id');
                $this->request->data["ClubMemberAdditionalSetting"]["club_id"] = $club_id;
                $this->request->data["ClubMemberAdditionalSetting"]["club_member_id"] = $id;


                if (empty($this->request->data["ClubMemberAdditionalSetting"]["notifications_and_mails"])) {
                    unset($this->request->data["ClubMemberAdditionalSetting"]["notifications_and_mails"]);
                }

                if ($this->request->data["ClubMemberAdditionalSetting"]["active_block_access"] == "analyzes_all") {
                    $this->request->data["ClubMemberAdditionalSetting"]["active_block_access"] = "analyzes_all";
                } else if ($this->request->data["ClubMemberAdditionalSetting"]["active_block_access"] == "active_block_access_free") {
                    $this->request->data["ClubMemberAdditionalSetting"]["active_block_access"] = "free_access";
                } else {
                    $this->request->data["ClubMemberAdditionalSetting"]["active_block_access"] = "access_from";
                }
                if ($this->ClubMemberAdditionalSetting->save($this->request->data)) {
                    $this->User->id = $user_id;
                    $this->User->save($this->request->data);
                    return $this->redirect(array('controller' => 'clubs', 'action' => 'create_member'));
                }

            } else {


                unset($this->request->data["ClubMemberAdditionalSetting"]);
                $user_id = $this->Session->read('Auth.User.id');
                $club_id = $this->Session->read('Auth.Club.id');
                //print_r($this->request->data);
                //print_r($user_id); exit;
                $this->request->data["ClubMemberAdditionalSetting"]["club_id"] = $club_id;
                $this->request->data["ClubMemberAdditionalSetting"]["club_user_id"] = $user_id;


                $this->request->data["ClubMemberAdditionalSetting"]["club_member_id"] = $id;


                if ($this->ClubMemberAdditionalSetting->save($this->request->data)) {

                    unset($this->request->data['User']['firstname']);
                    unset($this->request->data['User']['lastname']);
                    $this->Session->setFlash(__('Record inserted successfully'), 'flash-message', array('type' => 'alert-success'), 'success');
                    $this->User->id = $user_id;
                    $this->User->save($this->request->data);

                    return $this->redirect(
                        array(
                            'controller' => 'clubs',
                            'action' => 'create_member'
                        ));
                }
            }
        } else {


            $this->request->data = $user_record[0];


        }
    }

    public function new_member_references_edit($id = null)
    {
        $this->layout = 'club_clubtab';
        $this->loadModel('MemberOtherdetail');
        $this->loadModel('AdminSettingForUser');

        $fields = array("User.image", "User.username");
        $unbindArray = array(
            'belongsTo' => array(
                'Post',
                'Operator',
                'Club',
                'Athlete',
                'Coach',
                'Team',
                'Club_subscription_histories',
                'Banner',
                'SocialProfile'
            )
        );
        $userRecord = $this->getFunctionByUserId($id, $fields, $unbindArray);

        $userImage = !empty($userRecord[0]["User"]["image"]) ? $userRecord[0]["User"]["image"] : "";
        $this->set(compact('userImage', 'id', 'userRecord'));


        if ($this->request->is('post') || $this->request->is('put')) {

            $user_id = $this->Session->read('Auth.User.id');
            $this->request->data["MemberOtherdetail"]["club_user_id"] = $user_id;
            $club_id = $this->Session->read('Auth.Club.id');
            $this->request->data["MemberOtherdetail"]["club_id"] = $club_id;
            $this->request->data["MemberOtherdetail"]["club_member_id"] = $id;

            if (!empty($this->request->data["submit"])) {

                /*******Private Setting********/
                if (empty($this->request->data['MemberOtherdetail']['name_day'])) {
                    unset($this->request->data['MemberOtherdetail']['name_day']);
                } else {
                    $name_day = array();
                    if (!empty($this->request->data['MemberOtherdetail']['name_day']['year'])) {
                        $name_day[] = $this->request->data['MemberOtherdetail']['name_day']['year'];
                    }
                    if (!empty($this->request->data['MemberOtherdetail']['name_day']['month'])) {
                        $name_day[] = $this->request->data['MemberOtherdetail']['name_day']['month'];
                    }
                    if (!empty($this->request->data['MemberOtherdetail']['name_day']['day'])) {
                        $name_day[] = $this->request->data['MemberOtherdetail']['name_day']['day'];
                    }
                    unset($this->request->data['MemberOtherdetail']['name_day']);
                    //print_r( implode('-',$name_day));die;
                    $this->request->data['MemberOtherdetail']['name_day'] = implode('-', $name_day);
                    //print_r($this->request->data['MemberOtherdetail']['name_day']);die;

                }

                $getReferenceData = $this->AdminSettingForUser->getSettingRecordByUserId($id);
                if ($this->request->data['AdminSettingForUser']['allow_display_profile_pic'] == 1) {
                    $this->request->data['AdminSettingForUser']['allow_display_profile_pic'] = 'Y';
                } else {
                    $this->request->data['AdminSettingForUser']['allow_display_profile_pic'] = 'N';
                }

                if ($this->request->data['AdminSettingForUser']['allow_to_modify_data'] == 1) {
                    $this->request->data['AdminSettingForUser']['allow_to_modify_data'] = 'Y';
                } else {
                    $this->request->data['AdminSettingForUser']['allow_to_modify_data'] = 'N';
                }

                if (!empty($this->request->data['AdminSettingForUser']['access_vip_main_data'])) {
                    $this->request->data['AdminSettingForUser']['access_vip_main_data'] = 'N';
                } else {
                    $this->request->data['AdminSettingForUser']['access_vip_main_data'] = 'Y';
                }

                if (!empty($this->request->data['AdminSettingForUser']['access_vip_other_data'])) {
                    $this->request->data['AdminSettingForUser']['access_vip_other_data'] = 'N';
                } else {
                    $this->request->data['AdminSettingForUser']['access_vip_other_data'] = 'Y';
                }

                if (!empty($this->request->data['AdminSettingForUser']['allow_visitors_send_mail'])) {
                    $this->request->data['AdminSettingForUser']['allow_visitors_send_mail'] = 'N';
                } else {
                    $this->request->data['AdminSettingForUser']['allow_visitors_send_mail'] = 'Y';
                }

                if (!empty($this->request->data['AdminSettingForUser']['allow_ask_to_friendship'])) {
                    $this->request->data['AdminSettingForUser']['allow_ask_to_friendship'] = 'N';
                } else {
                    $this->request->data['AdminSettingForUser']['allow_ask_to_friendship'] = 'Y';
                }

                if (!empty($getReferenceData)) {
                    $this->AdminSettingForUser->id = $getReferenceData['AdminSettingForUser']['id'];
                } else {
                    $this->request->data['AdminSettingForUser']['user_id'] = $id;
                }

                $this->AdminSettingForUser->save($this->request->data['AdminSettingForUser']);

                /*******Private Setting********/

                if (empty($this->request->data["MemberOtherdetail"]["load_from_vendor"])) {
                    unset($this->request->data["MemberOtherdetail"]["load_from_vendor"]);
                }

                if (empty($this->request->data["MemberOtherdetail"]["load_from_coach"])) {
                    unset($this->request->data["MemberOtherdetail"]["load_from_coach"]);
                }

                if (empty($this->request->data["MemberOtherdetail"]["federation_deadline"])) {
                    unset($this->request->data["MemberOtherdetail"]["federation_deadline"]);
                }

                if (empty($this->request->data["MemberOtherdetail"]["enable_commision"])) {
                    unset($this->request->data["MemberOtherdetail"]["enable_commision"]);
                }

                if ($this->MemberOtherdetail->save($this->request->data)) {

                    if ($this->request->data['User']['image']['name'] != '') {

                        $FileName = $this->request->data['User']['image']['name'];
                        $NewFileName = time();
                        $pos = strrpos($FileName, '.');
                        $extension = substr($FileName, $pos);
                        $NewFileName = $NewFileName . $extension;
                        $path = WWW_ROOT . 'img\profile_images\\';
                        $destination = WWW_ROOT . 'img\profile_images\\' . $NewFileName;
                        if (move_uploaded_file($this->request->data['User']['image']['tmp_name'], $destination)) {
                            $this->request->data['User']['image'] = $NewFileName;
                        }

                        $this->User->id = $id;
                        $this->User->save($this->request->data);
                    }
                    $this->Session->setFlash(__('Record inserted successfully'), 'flash-message', array('type' => 'alert-success'), 'success');
                    return $this->redirect(array('controller' => 'clubs', 'action' => 'new_member_additional_setting_edit', $id));
                }

            } else {

                $result_check = $this->MemberOtherdetail->find(
                    "all", array(
                    "conditions" => array(
                        "AND" => array(
                            "MemberOtherdetail.club_member_id" => $id,
                            "MemberOtherdetail.club_user_id" => $this->Session->read('Auth.User.id')
                        )
                    )
                ));

                if (!empty($result_check)) {

                    $this->MemberOtherdetail->id = $result_check[0]["MemberOtherdetail"]["id"];
                } else {

                    unset($this->request->data["MemberOtherdetail"]);
                    $this->request->data["MemberOtherdetail"]["club_member_id"] = $id;
                    $user_id = $this->Session->read('Auth.User.id');
                    $club_id = $this->Session->read('Auth.Club.id');
                    $this->request->data["MemberOtherdetail"]["club_id"] = $club_id;
                    $this->request->data["MemberOtherdetail"]["club_user_id"] = $user_id;
                    $this->request->data["MemberOtherdetail"]["user_id"] = $id;
                }


                if ($this->MemberOtherdetail->save($this->request->data)) {


                    $this->Session->setFlash(__('Record inserted successfully'), 'flash-message', array('type' => 'alert-success'), 'success');
                    return $this->redirect(array('controller' => 'clubs', 'action' => 'new_member_additional_setting_edit', $id));
                }
            }

        } else {

            $result = $this->MemberOtherdetail->find("all", array("conditions" => array("AND" => array("MemberOtherdetail.club_member_id" => $id, "MemberOtherdetail.club_user_id" => $this->Session->read('Auth.User.id')))));

            $this->request->data = !empty($result[0]) ? $result[0] : "";
            if (!empty($this->request->data['MemberOtherdetail']['name_day'])) {
                $name_day_val = explode('-', $this->request->data['MemberOtherdetail']['name_day']);
                $this->request->data['MemberOtherdetail']['name_day']['day'] = !empty($name_day_val[2]) ? $name_day_val[2] : '';
                $this->request->data['MemberOtherdetail']['name_day']['month'] = !empty($name_day_val[1]) ? $name_day_val[1] : "";
                $this->request->data['MemberOtherdetail']['name_day']['year'] = !empty($name_day_val[0]) ? $name_day_val[0] : '';
            }
        }

    }

    public function checkuser_name_edit()
    {

        $this->layout = '';
        $this->autoRender = false;
        $this->loadmodel('User');
        $username = $this->request->data["user_name"];
        $email = $this->request->data["user_email"];
        $condition = array("fields" => array("username", "email"), "conditions" => array("AND" => array("User.id !=" => $this->request->data["id"]), "OR" => array("User.username" => $username, "User.email" => $email)));
        $userRecord = $this->User->find("all", $condition);
        $condition1 = array("fields" => array("username", "email"), "conditions" => array("AND" => array("User.email" => $email, "User.id !=" => $this->request->data["id"])));
        $userRecord1 = $this->User->find("all", $condition1);


        $array = array();
        if (!empty($userRecord1) && $userRecord[0]["User"]["username"] == $this->request->data["user_name"]) {
            $array[0] = array("status" => "1");
            $array[1] = array("statusResult" => "userenamemail");
            echo json_encode($array);
            exit;
        } else if (!empty($userRecord)) {

            $array[0] = array("status" => "1");
            if ($userRecord[0]["User"]["username"] == $this->request->data["user_name"] && $userRecord[0]["User"]["email"] == $this->request->data["user_email"]) {
                $array[1] = array("statusResult" => "userenamemail");
            } else if ($userRecord[0]["User"]["username"] == $this->request->data["user_name"]) {
                $array[1] = array("statusResult" => "username");
            } else if ($userRecord[0]["User"]["email"] == $this->request->data["user_email"]) {

                $array[1] = array("statusResult" => "email");
            }
            //array_push($array, $array1);
            echo json_encode($array);
            exit;
        } else {

            $array[0] = array("status" => "0");
            echo json_encode($array);
            exit;
            exit;
        }
    }

    public function import_timetable()
    {

        $this->layout = '';
        $this->autoRender = false;
        $this->loadModel("ClubCardTimetable");
        $ClubCardTimetable = $this->ClubCardTimetable->find('all', array('conditions' => array('ClubCardTimetable.typology_message_id !=' => $this->request->data["TypologyMessage"], 'ClubCardTimetable.user_id' => $this->Session->read('Auth.User.id'))));
        $clubcardArray = array();
        $clubcardPusharray = array();

        foreach ($ClubCardTimetable as $row) {
            $clubcardArray["id"] = $row["ClubCardTimetable"]["typology_message_id"];
            $clubcardArray["activity_name"] = $row["ClubSettingSubscriptionTypology"]["activity_name"];
            array_push($clubcardPusharray, $clubcardArray);
        }

        echo json_encode($clubcardPusharray);
        exit;
    }

    public function admin_import_timetable()
    {

        $this->layout = '';
        $this->autoRender = false;
        $this->loadModel("ClubCardTimetable");
        $ClubCardTimetable = $this->ClubCardTimetable->find('all', array('conditions' => array('ClubCardTimetable.typology_message_id !=' => $this->request->data["TypologyMessage"], 'ClubCardTimetable.user_id' => $this->request->data["user_id"])));
        $clubcardArray = array();
        $clubcardPusharray = array();

        foreach ($ClubCardTimetable as $row) {
            $clubcardArray["id"] = $row["ClubCardTimetable"]["typology_message_id"];
            $clubcardArray["activity_name"] = $row["ClubSettingSubscriptionTypology"]["activity_name"];
            array_push($clubcardPusharray, $clubcardArray);
        }

        echo json_encode($clubcardPusharray);
        exit;
    }

    public function load_timetable_block()
    {

        $this->layout = 'ajax';
        $this->autoRender = true;
        $this->loadModel("ClubCardTimetable");
        $result = $this->ClubCardTimetable->find(
            'all',
            array(
                'conditions' => array(
                    'ClubCardTimetable.typology_message_id' => $this->request->data["copy_record_id"],
                    'ClubCardTimetable.user_id' => $this->Session->read('Auth.User.id')
                )
            ));

        if (!empty($result)) {

            $this->request->data = $result[0];
            // print_r($this->request->data['ClubCardTimetable']['enabled']);exit;
            unset($this->request->data["ClubCardTimetable"]["id"]);
            $rangeValue = unserialize($this->request->data["ClubCardTimetable"]["rangValue"]);
            //pr($rangeValue);exit;
            $sliderOne = explode("#", $rangeValue[0]);
            $sliderTwo = explode("#", $rangeValue[1]);
            $sliderThree = explode("#", $rangeValue[2]);
            $sliderFour = explode("#", $rangeValue[3]);
            $sliderFive = explode("#", $rangeValue[4]);
            $sliderSix = explode("#", $rangeValue[5]);
            $sliderSeven = explode("#", $rangeValue[6]);
            $resultAM = unserialize($result[0]["ClubCardTimetable"]["am_time"]);
            $resultPM = unserialize($result[0]["ClubCardTimetable"]["pm_time"]);
            $enableds = array_keys((array)json_decode($this->request->data['ClubCardTimetable']['enabled']));
            $this->set(compact('sliderOne', 'sliderTwo', 'sliderThree', 'sliderFour', 'sliderFive', 'sliderSix', 'sliderSeven', 'resultAM', 'resultPM', 'enableds'));

        }

    }

    public function admin_load_timetable_block()
    {

        $this->layout = 'ajax';
        $this->autoRender = true;
        $this->loadModel("ClubCardTimetable");

        $result = $this->ClubCardTimetable->find('all', array('conditions' => array('ClubCardTimetable.typology_message_id' => $this->request->data["copy_record_id"], 'ClubCardTimetable.user_id' => $this->request->data["user_id"])));

        if (!empty($result)) {

            $this->request->data = $result[0];
            unset($this->request->data["ClubCardTimetable"]["id"]);
            $rangeValue = unserialize($this->request->data["ClubCardTimetable"]["rangValue"]);
            //print_r($rangeValue);exit;
            $sliderOne = explode("#", $rangeValue[0]);

            $sliderTwo = explode("#", $rangeValue[1]);
            $sliderThree = explode("#", $rangeValue[2]);
            $sliderFour = explode("#", $rangeValue[3]);
            $sliderFive = explode("#", $rangeValue[4]);
            $sliderSix = explode("#", $rangeValue[5]);
            $sliderSeven = explode("#", $rangeValue[6]);

            $resultAM = unserialize($result[0]["ClubCardTimetable"]["am_time"]);
            $resultPM = unserialize($result[0]["ClubCardTimetable"]["pm_time"]);
            //print_r($resultAM);exit;
            $this->set(compact('sliderOne', 'sliderTwo', 'sliderThree', 'sliderFour', 'sliderFive', 'sliderSix', 'sliderSeven', 'resultAM', 'resultPM'));
        }
    }

    public function load_member_timetable_block()
    {

        $this->layout = 'ajax';
        $this->autoRender = true;
        $this->loadModel("ClubMembershipTimeTable");

        $result = $this->ClubMembershipTimeTable->find(
            'all', array(
            'conditions' => array(
                'ClubMembershipTimeTable.typology_id' => $this->request->data["copy_record_id"],
                'ClubMembershipTimeTable.user_id' => $this->request->data["user_id"],
                'ClubMembershipTimeTable.subscription_id' => $this->request->data["subscription_id"]
            )));

        if (!empty($result)) {

            $this->request->data = $result[0];
            unset($this->request->data["ClubMembershipTimeTable"]["id"]);
            $rangeValue = unserialize($this->request->data["ClubMembershipTimeTable"]["rangeValue"]);
            //pr($rangeValue);exit;
            $sliderOne = explode("#", $rangeValue[0]);
            $sliderTwo = explode("#", $rangeValue[1]);
            $sliderThree = explode("#", $rangeValue[2]);
            $sliderFour = explode("#", $rangeValue[3]);
            $sliderFive = explode("#", $rangeValue[4]);
            $sliderSix = explode("#", $rangeValue[5]);
            $sliderSeven = explode("#", $rangeValue[6]);
            $resultAM = unserialize($result[0]["ClubMembershipTimeTable"]["am_time"]);
            $resultPM = unserialize($result[0]["ClubMembershipTimeTable"]["pm_time"]);
            $permit_minute_access = $result[0]["ClubMembershipTimeTable"]["permit_minute_access"];
            $blocking_minute_access = $result[0]["ClubMembershipTimeTable"]["blocking_minute_access"];
            $this->set(
                compact(
                    'sliderOne',
                    'sliderTwo',
                    'sliderThree',
                    'sliderFour',
                    'sliderFive',
                    'sliderSix',
                    'sliderSeven',
                    'resultAM',
                    'resultPM',
                    'permit_minute_access',
                    'blocking_minute_access'
                ));
        } else {


            $this->loadModel('club_card_timetables');
            $result = $this->club_card_timetables->find(
                'all',
                array(
                    'conditions' => array(
                        'club_card_timetables.typology_message_id' => $this->request->data["copy_record_id"],
                        'club_card_timetables.user_id' => $_SESSION['Auth']['User']['id']
                    )));

            //print_r($result);exit;

            if (!empty($result)) {

                $this->request->data = $result[0];
                unset($this->request->data["club_card_timetables"]["id"]);
                $rangeValue = unserialize($this->request->data["club_card_timetables"]["rangValue"]);

                //pr($rangeValue);exit;
                $sliderOne = explode("#", $rangeValue[0]);
                $sliderTwo = explode("#", $rangeValue[1]);
                $sliderThree = explode("#", $rangeValue[2]);
                $sliderFour = explode("#", $rangeValue[3]);
                $sliderFive = explode("#", $rangeValue[4]);
                $sliderSix = explode("#", $rangeValue[5]);
                $sliderSeven = explode("#", $rangeValue[6]);
                $resultAM = unserialize($result[0]["club_card_timetables"]["am_time"]);
                $resultPM = unserialize($result[0]["club_card_timetables"]["pm_time"]);
                $permit_minute_access = $result[0]["club_card_timetables"]["permit_minute_access"];
                $blocking_minute_access = $result[0]["club_card_timetables"]["blocking_minute_access"];
                $this->set(
                    compact(
                        'sliderOne',
                        'sliderTwo',
                        'sliderThree',
                        'sliderFour',
                        'sliderFive',
                        'sliderSix',
                        'sliderSeven',
                        'resultAM',
                        'resultPM',
                        'permit_minute_access',
                        'blocking_minute_access'
                    ));

            }

        }
    }

    public function club_timetable_print($id = null)
    {

        $this->layout = 'basic_layout';
        $result = $this->club_timetable_printRecord($id, $this->Session->read('Auth.User.id'));
        if (!empty($result)) {

            $resultAM = unserialize($result[0]["ClubCardTimetable"]["am_time"]);
            $resultPM = unserialize($result[0]["ClubCardTimetable"]["pm_time"]);
            $FinalArray = array();
            $FinalPushArray = array();
            foreach ($resultAM as $key => $am) {
                $FinalArray["am"] = $am;
                $FinalArray["pm"] = $resultPM[$key];
                array_push($FinalPushArray, $FinalArray);
            }
            $DayArray = array("Monday", "Tuesday", "Wenesday", "Thursday", "Friday", "Saturday", "Sunday");
            $permit_minute_access = $result[0]["ClubCardTimetable"]["permit_minute_access"];
            $blocking_minute_access = $result[0]["ClubCardTimetable"]["blocking_minute_access"];
            $activity_name = $result[0]["ClubSettingSubscriptionTypology"]["activity_name"];
            $this->set(compact('FinalPushArray', 'DayArray', 'permit_minute_access', 'blocking_minute_access', 'activity_name'));
        }
    }

    function checkRecordExit()
    {

        $this->layout = 'ajax';
        $this->autoRender = true;
        $this->loadModel("ClubCardTimetable");
        $result = $this->ClubCardTimetable->find('all', array('conditions' => array('ClubCardTimetable.typology_message_id' => $this->request->data["TypologyMessage"], 'ClubCardTimetable.user_id' => $this->Session->read('Auth.User.id'))));
        if (!empty($result)) {
            echo "1";
            exit;
        } else {
            echo "0";
            exit;
        }
    }

    public function check_already_send_request()
    {

        $this->layout = 'ajax';
        $this->autoRender = true;
        $this->loadModel("temp_club_members");
        $result = $this->temp_club_members->find('all', array('conditions' => array('temp_club_members.user_id' => $this->request->data["user_id"], 'temp_club_members.club_id' => $this->Session->read('Auth.Club.id'))));
        if (!empty($result)) {
            echo "1";
            exit;
        } else {

            echo "0";
            exit;
        }
    }

    public function club_operator_security_password()
    {

        $this->layout = 'club_clubtab';
        $this->loadModel('club_subadmins');
        $this->loadModel('club_operators');
        $this->loadModel('ClubOperatorSecurityPassword');
        $this->loadmodel('users');
        $club_subadmin_info = $this->club_subadmins->find('all', array('conditions' => array('club_subadmins.admin_id' => $this->Session->read('Auth.User.id'))));
        foreach ($club_subadmin_info as $club_subadmin_info_result):
            $a[] = $club_subadmin_info_result['club_subadmins']['user_id'];
            $que_id_str1 = implode(',', $a);
        endforeach;
        $data1 = $this->club_operators->find('all', array('fields' => array('id', 'user_id'), 'conditions' => array('club_operators.clubadmin_id IN(' . $this->Session->read('Auth.User.id') . "," . $que_id_str1 . ')')));
        foreach ($data1 as $data2):
            $data4[] = $data2['club_operators']['user_id'];
        endforeach;
        $data3 = $this->users->find('all', array('fields' => array('id', 'username'), 'conditions' => array('users.id IN' => $data4)));
        $this->set('data3', $data3);

        if ($this->request->is('post')) {

            //echo "hello"; exit;
            $operatoruser_id = $this->request->data['User']['operatoruser_id'];
            unset($this->request->data['User']);
            $data6 = $this->club_operators->find('all', array('fields' => array('id'), 'conditions' => array('club_operators.user_id ' => $operatoruser_id)));
            //$this->getLastQuery('club_operators');exit;
            //pr($this->request->data['operator_id']);exit;
            $this->request->data["ClubOperatorSecurityPassword"]["clubuser_id"] = $this->Session->read('Auth.User.id');
            $this->request->data["ClubOperatorSecurityPassword"]["club_id"] = $this->Session->read('Auth.Club.id');
            $this->request->data["ClubOperatorSecurityPassword"]["operator_id"] = $data6['0']['club_operators']['id'];
            $this->request->data["ClubOperatorSecurityPassword"]["operatoruser_id"] = $operatoruser_id;
            $this->request->data["ClubOperatorSecurityPassword"]["password"] = $this->request->data['password'];
            // pr($this->request->data); exit;
            $this->ClubOperatorSecurityPassword->create();
            $this->ClubOperatorSecurityPassword->save($this->request->data);
            $this->Session->setFlash('Club operator security setting insert successfully..');
            return $this->redirect(array('controller' => 'clubs', 'action' => 'club_operator_security_password'));

        }
    }

    public function ajax_club_operator_security_password()
    {

        $this->layout = 'ajax';
        $this->loadmodel('users');
        $pass = AuthComponent::password($this->request['data']['pass']);

        $data3 = $this->users->find('count', array('conditions' => array('users.password' => $pass, 'users.id' => $this->Session->read('Auth.User.id'))));
        echo $data3;
        exit;
    }

    public function ajax_club_operator_security_old_password()
    {

        $this->layout = 'ajax';
        $this->loadModel('ClubOperatorSecurityPassword');
        //pr($this->request['data']['operatoruser1']);
        //pr($this->request['data']['old_pass']);
        $data3 = $this->ClubOperatorSecurityPassword->find('count', array('conditions' => array('operatoruser_id' => $this->request['data']['operatoruser1'], 'password' => $this->request['data']['old_pass'])));
        echo $data3;
        exit;
    }

    public function ajax_check_mail_exit()
    {
        $this->layout = 'ajax';
        $this->loadModel('ClubOperatorSecurityPassword');
        //pr($this->request['data']['operatoruser1']);
        //pr($this->request['data']['new_pass']); exit;
        $data3 = $this->ClubOperatorSecurityPassword->find('count', array('conditions' => array('operatoruser_id' => $this->request['data']['operatoruser1'])));
        echo $data3;
        exit;
    }

    public function ajax_club_operator_security_old_password1()
    {

        $this->layout = 'ajax';
        $this->loadModel('ClubOperatorSecurityPassword');
        $data3 = $this->ClubOperatorSecurityPassword->query("UPDATE club_operator_security_passwords SET password = '" . $this->request['data']['new_pass'] . "' WHERE operatoruser_id=" . $this->request['data']['operatoruser1']);
        echo "Club Security setting saved successfully..";
        exit;
    }

    public function enable_password()
    {
        $this->Common->verifyExpiredSession('management_access_timeout', ['management_access']);

        if (!$this->haveManagementAccess()) {
            $this->Session->setFlash('Teste de mensagem', 'default', [], 'show_pass_modal');
            return $this->redirect(['controller' => 'clubs', 'action' => 'clubindex']);
        }

        $this->layout = 'club_clubtab';

        $this->loadModel('Device');
        $this->loadModel('Club');
        $this->loadModel('User');
        $this->loadModel('SubscriptionSetting');
        $this->loadModel('DateFormatComponent');
        $this->loadModel('DeviceRequest');
        //added by kaushik
        $this->loadModel('DeviceLog');
        $this->loadModel('Countries');
        $this->loadModel('states');

        $clubId = $this->Session->read('Auth.Club.id');

        $cond = array(
            'Device.club_id' => $clubId,
            'Device.delete_status' => 0,
            //'Device.block_status'       => 0,
            'Device.disabled_status !=' => 2
        );

        $limit = (empty($this->request->query['limit']) ? 5 : $this->request->query['limit']);
        $this->paginate = $this->DeviceLog->getDeviceLogDataCakeVersion($limit, $this->request->query);

        $logData = $this->paginate('DeviceLog');
        $deviceGroup = $this->DeviceLog->groupedDeviceLog();

        #region devices to show in screen
        $pag_conditions = [
            'conditions' => $cond,
            'fields' => [
                'Device.id',
                'Device.device_name',
                'Device.ip_address',
                'Device.code',
                'Device.block_status',
                'Device.current_browser',
                'Device.expired_date',
                'Device.disabled_status',
                'Device.disabled_date',
                'User.username',
                'User.official_username',
                'User.official_clubname',
                'State.name',
                'Country.name'
            ],
            'joins' => [
                [
                    'table' => 'clubs',
                    'alias' => 'Club',
                    'type' => 'LEFT',
                    'conditions' => ['Club.id = Device.club_id']
                ],
                [
                    'table' => 'users',
                    'alias' => 'User',
                    'type' => 'INNER',
                    'conditions' => ['User.id = Club.user_id']
                ],
                [
                    'table' => 'countries',
                    'alias' => 'Country',
                    'type' => 'LEFT',
                    'conditions' => ['User.country_id = Country.id']
                ],
                [
                    'table' => 'states',
                    'alias' => 'State',
                    'type' => 'LEFT',
                    'conditions' => ['User.state_id = State.id']
                ]
            ],
            'recursive' => -1
        ];


        $device_data = $this->Device->find('all', $pag_conditions);
        #endregion


        // unused variables
        //$club = $this->Club->getFunctionById($clubId);
        $club_id = $clubId;
        //kaushik end

        $staffEnabled = $this->Session->read("Auth.User.staffPassword");
        /* get s-admin id to send mail */
        $admin_id = $this->User->getAdminId();

        /* get s-admin id to send mail */
        /*****************************for authorize user acess club management section ************************************/
        if ($this->Session->read('Auth.User.role_id') == 8
            || $this->Session->read('Auth.User.role_id') == 11
            || $this->Session->read('Auth.User.role_id') == 12
        ) {

            $auth_user = 1;
            $getRecord = $this->User->getRecordById($this->Session->read('Auth.User.id'));
        }


        /************for authorize user acess club management section **************/
        //$device_details = $this->Device->getDeviceRecordByUserId($clubId);
        $club_details = $this->Club->getFunctionById($clubId);
        $club_enable_count = $this->Device->getEnabledCount($clubId);
        $club_disable_count = $this->Device->getDisabledCount($clubId);
        $club_pending_count = $this->Device->getPendCount($clubId);
        $club_sunpended_count = $this->Device->getCurrentEnableCount($clubId);
        $club_suspended_or_paused_count_devices = $this->Device->getCurrentInPauseOrSuspended($clubId);


        $available_inquires = $club_details['Club']['max_device'] - $club_enable_count - $club_pending_count - $club_disable_count;
        $this->SubscriptionSetting->recursive = -1;
        $subscription_details = $this->SubscriptionSetting->getRecordById($club_details['User']['subscription_setting_id']);

        if (!empty($club_details)) {

            $getExpiredDate = $this->DateFormatComponent->dateFormatValue($club_details['User']['subscription_end_date']);
            $count = $this->Device->getTotalDevice($clubId);
            $this->set(compact('count'));
        }

        $macAddress = $this->Club->getMacAddress();
        $management_cookie = $_COOKIE['management'];
        $deviceMac_details = $this->Device->getMangementCookie($clubId, $management_cookie);
        $club_device_enable_count = $this->Device->getEnabledCountMangementCookie($clubId, $management_cookie);

        /*get device request*/
        $device_request = $this->DeviceRequest->getDeviceTotal();
        $device_amount = $this->DeviceRequest->getDeviceAmountTotal();
        /*get device request*/

        if (!empty($deviceMac_details)) {
            $mac_id = $deviceMac_details['Device']['ip_address'];
            $getSentOnDate = $this->DateFormatComponent->dateFormatValue($deviceMac_details['Device']['request_send_date']);
        }
        //pr($subscription_details); exit;
        $current_date = date('Y-m-d');
        $this->set(compact('club_enable_count', 'club_details', 'subscription_details', 'getSentOnDate', 'getExpiredDate', 'mac_id', 'deviceMac_details', 'admin_id', 'current_date', 'auth_user', 'club_disable_count', 'club_pending_count', 'club_sunpended_count', 'getRecord', 'available_inquires', 'device_request', 'device_amount', 'macAddress', 'management_cookie', 'device_data', 'club', 'country', 'state', 'logData', 'club_id', 'main_data', 'deviceGroup', 'club_suspended_or_paused_count_devices'));

        if ($this->request->is('post')) {

            if (!empty($deviceMac_details) && $management_cookie == $deviceMac_details['Device']['ip_address'] && $deviceMac_details['Device']['expired_date'] >= date('Y-m-d') && $deviceMac_details['Device']['expired_date'] != '0000-00-00') {

                if ($club_device_enable_count != 0) {

                    $club_device_enable = $this->Club->getFunctionById($deviceMac_details['Device']['club_id']);
                    $admin_email = $this->User->getAdminId();
                    $userdata = $deviceMac_details['Device']['code'];
                    $subject = "This is a code for " . $club_device_enable['User']['username'];
                    $Email = new CakeEmail('smtp');
                    //pr($club_device_enable['User']['email']); exit;
                    $Email->from(array($admin_email['User']['email'] => 'MovesBook'))
                        ->viewVars(array('usersdata' => $userdata))
                        ->template('mailsendforcodereminder')
                        //->to('amol@datalogysoftware.com')
                        ->to($club_device_enable['User']['email'])
                        ->subject($subject)
                        ->emailFormat('html');
                    if ($Email->send($userdata)) {
                        $this->Session->setFlash('Sorry you cannot send the request. Your pc is already registered and Email send successfully with password in your mail id');
                        //$this->Session->setFlash('Email send successfully with password');
                        return $this->redirect(array('controller' => 'clubs', 'action' => 'enable_password'));

                    } else {
                        $this->Session->setFlash('Email is not send');
                        return $this->redirect(array('controller' => 'clubs', 'action' => 'enable_password'));

                    }//mail end
                    return $this->redirect(array('controller' => 'clubs', 'action' => 'enable_password'));
                } else if ($deviceMac_details['Device']['expired_date'] == 1) {
                    $this->Session->setFlash('Your device status is pending. Wait until s-admin enable your device tomorrow');
                    return $this->redirect(array('controller' => 'clubs', 'action' => 'enable_password'));
                } else {
                    //working on this condition
                    $this->Session->setFlash('Your device is already register');
                    return $this->redirect(array('controller' => 'clubs', 'action' => 'enable_password'));
                }

            } else {

                if ($subscription_details['SubscriptionSetting']['max_device'] >= $count) {
                    $this->request->data['Device']['re_type_code'] = 1;
                } else {
                    $this->request->data['Device']['re_type_code'] = 2;
                }

                $cookie_name = "management";
                $random_cookie = uniqid();
                setcookie($cookie_name, $random_cookie, time() + (86400 * 30), "/");

                $this->request->data['Device']['ip_address'] = $random_cookie;
                $this->request->data['Device']['club_id'] = $this->Session->read('Auth.Club.id');
                $this->request->data['Device']['request_send_date'] = date('Y-m-d');
                $this->request->data['Device']['disabled_status'] = 2;
                $this->request->data['Device']['expired_date'] = $club_details['User']['subscription_end_date'];
                $this->Club->id = $this->Session->read('Auth.Club.id');
                $club_data['Club']['device_request'] = 'Y';

                if ($this->Device->save($this->request->data)) {

                    $this->Club->save($club_data);

                    $this->loadModel('ClubCardReader');
                    $card_readers = $this->ClubCardReader->find(
                        'list', [
                        'conditions' => [
                            'ClubCardReader.club_id' => $this->Session->read('Auth.Club.id'),
                            'ClubCardReader.control_mode_id' => [1, 2, 3],
                            'ClubCardReader.enable' => 'Y'
                        ],
                        'order' => ['ClubCardReader.num_order ASC'],
                        'fields' => [
                            'ClubCardReader.id'
                        ]
                    ]);

                    $this->loadModel('AccessControlPanel');
                    $this->AccessControlPanel->save(['AccessControlPanel' => ['device_id' => $this->Device->id, 'club_id' => $this->Session->read('Auth.Club.id'), 'readers' => implode(',', $card_readers)]]);
                    $this->Session->setFlash('Device request send successfully.');
                    return $this->redirect(array('controller' => 'clubs', 'action' => 'enable_password'));
                } else {

                    $this->Session->setFlash('Unable to save device');
                    return $this->redirect(array('controller' => 'clubs', 'action' => 'enable_password'));
                }
            }
        }

        $this->set("staffEnabled", $staffEnabled);
    }

    public function exhaustionStatus($id = null, $cardStatus = null)
    {

        $this->layout = "club_clubtab";
        $param1 = $this->decryptUrl($id);
        $exp = explode('_', $param1);
        $userID = $exp[0];
        $this->fetchuserDtaFun($userID);

        $userData = $this->User->find(
            'first', array(
            'conditions' => array('User.id' => $userID),
            'fields' => array(
                'id', 'role_id', 'username', 'firstname', 'lastname',
                'email', 'country_id', 'subscription_setting_id',
                'subscription_start_date', 'subscription_end_date', 'image'
            )
        ));

        $this->loadModel('Subscription_setting');

        $result = $this->Subscription_setting->getRecordById($userData['User']['subscription_setting_id']);

        $current_date = date('Y-m-d');
        $remaining_days = (strtotime($userData['User']['subscription_end_date']) - strtotime($current_date)) / (60 * 60 * 24);
        $this->set(compact('userData', 'result', 'remaining_days'));

        /************************ new code **********************/

        $this->loadModel('users_subscriptionsettings_types');

        $functionData = $this->users_subscriptionsettings_types->find(
            'all', array(
            'conditions' => array(
                'users_subscriptionsettings_types.user_id' => $userID
            ),
            'order' => 'id DESC',
            "limit" => 1
        )); // fetch last subscription record

        if ((isset($functionData[0]['users_subscriptionsettings_types'])) && ($userData[0]['User']['role_id'] == '8')) {

            if ($functionData[0]['users_subscriptionsettings_types']['club_accounts_pay_terms'] != '') {

                $newterm1 = unserialize($functionData[0]['users_subscriptionsettings_types']['club_accounts_pay_terms']);
                $functionData[0]['users_subscriptionsettings_types']['acnt_payterms'] = $newterm1;
            } else {
                /***************************************************************************************************************
                 * IMP Note*
                 * Account terms and days of payment are saved for particular user
                 * ************************************************************************************************************ */

                $this->loadModel('club_acnt_payterms');
                $club_payTerm = $this->club_acnt_payterms->find('all', array('fields' => array('send_before_days', 'msg_enable', 'msg_show_after_days', 'creditcard_status')));

                $functionData[0]['users_subscriptionsettings_types']['acnt_payterms'] = $club_payTerm[0]['club_acnt_payterms'];
                $newpayterm = serialize($club_payTerm[0]['club_acnt_payterms']);
                $subTypeDetailAll123['club_accounts_pay_terms'] = $newpayterm;
                $this->users_subscriptionsettings_types->id = $functionData[0]['users_subscriptionsettings_types']['id'];
                $this->users_subscriptionsettings_types->save($subTypeDetailAll123);

                /************************************************************************************************************* */
            }
        }

        if (isset($functionData[0]['users_subscriptionsettings_types'])) {

            if ($functionData[0]['users_subscriptionsettings_types']['expiration_msg_shown_settings'] != '') {
                $newterm21 = unserialize($functionData[0]['users_subscriptionsettings_types']['expiration_msg_shown_settings']);
                $newterm2 = unserialize($newterm21['message']);
                unset($newterm21['message']);
                $newterm21['message'] = $newterm2;
                $functionData[0]['users_subscriptionsettings_types']['expiration_msg_shown_settings'] = $newterm21;
            } else {

                /***************************************************************************************************************
                 * IMP IMP*
                 * If user subscription is near of expiration or in expiring then this msg are shown and this is setting and msg for display for particular user
                 ************************************************************************************************************ */
                $this->loadModel('user_expiration_msg_settings');
                $user_msgTerm = $this->user_expiration_msg_settings->find('all', array('conditions' => array('user_expiration_msg_settings.subscription_setting_id' => $userData[0]['User']['subscription_setting_id']), 'fields' => array('before_days_expiration', 'msg_enable', 'after_days_expiration', 'message')));
                $newExpiryterm21 = serialize($user_msgTerm[0]['user_expiration_msg_settings']);
                $a_unserzdMsg = unserialize($user_msgTerm[0]['user_expiration_msg_settings']['message']);
                unset($user_msgTerm[0]['user_expiration_msg_settings']['message']);
                $user_msgTerm[0]['user_expiration_msg_settings']['message'] = $a_unserzdMsg;
                $functionData[0]['users_subscriptionsettings_types']['expiration_msg_shown_settings'] = $user_msgTerm[0]['user_expiration_msg_settings'];
                $subTypeDetailAll1231['expiration_msg_shown_settings'] = $newExpiryterm21;
                $this->users_subscriptionsettings_types->id = $functionData[0]['users_subscriptionsettings_types']['id'];
                $this->users_subscriptionsettings_types->save($subTypeDetailAll1231);
                /************************************************************************************************************* */

            }
        }
        $this->request->data['functionData'] = isset($functionData[0]['users_subscriptionsettings_types']) ? $functionData[0]['users_subscriptionsettings_types'] : '';

        /**********Athletes that can be loaded freely,Free accounts assigned,Remaining Free accounts,Days duration of the subscription******/

        $this->loadModel('club_free_purches_accounts');
        $this->loadModel('club_member_accounts');
        $account_assing_data1 = $this->club_free_purches_accounts->find('all', array('joins' => array(array('table' => 'club_member_accounts', 'type' => 'INNER', 'conditions' => 'club_member_accounts.clubuser_id=club_free_purches_accounts.user_id')), 'conditions' => array('AND' => array(array('club_free_purches_accounts.user_id' => $userID), array('club_member_accounts.version' => 'Trial Base'))), 'fields' => array('count(club_member_accounts.id) as account_assing'), 'group' => 'club_member_accounts.clubuser_id', 'order' => 'club_free_purches_accounts.id DESC', 'limit' => 1));
        //pr($this->getLastQuery('club_free_purches_accounts'));exit;
        $account_assing_data = isset($account_assing_data1[0][0]['account_assing']) ? $account_assing_data1[0][0]['account_assing'] : '0';


        $Userbaseversion1 = $this->club_free_purches_accounts->find('all', array('joins' => array(array('table' => 'club_member_accounts', 'type' => 'INNER', 'conditions' => 'club_member_accounts.clubuser_id=club_free_purches_accounts.user_id')), 'conditions' => array('AND' => array(array('club_free_purches_accounts.user_id' => $userID), array('club_member_accounts.version' => 'User- base version'))), 'fields' => array('count(club_member_accounts.id) as account_assing'), 'group' => 'club_member_accounts.clubuser_id', 'order' => 'club_free_purches_accounts.id DESC', 'limit' => 1));

        //$this->getLastQuery('club_free_purches_accounts');
        //print_r( $Userbaseversion1);die;

        $Userbaseversion = isset($Userbaseversion1[0][0]['account_assing']) ? $Userbaseversion1[0][0]['account_assing'] : '0';

        $Userpremium1 = $this->club_free_purches_accounts->find('all', array('joins' => array(array('table' => 'club_member_accounts', 'type' => 'INNER', 'conditions' => 'club_member_accounts.clubuser_id=club_free_purches_accounts.user_id')), 'conditions' => array('AND' => array(array('club_free_purches_accounts.user_id' => $userID), array('club_member_accounts.version' => 'User- premium'))), 'fields' => array('count(club_member_accounts.id) as account_assing'), 'group' => 'club_member_accounts.clubuser_id', 'order' => 'club_free_purches_accounts.id DESC', 'limit' => 1));
        $Userpremium = isset($Userpremium1[0][0]['account_assing']) ? $Userpremium1[0][0]['account_assing'] : '0';


        $Userprofessional1 = $this->club_free_purches_accounts->find('all', array('joins' => array(array('table' => 'club_member_accounts', 'type' => 'INNER', 'conditions' => 'club_member_accounts.clubuser_id=club_free_purches_accounts.user_id')), 'conditions' => array('AND' => array(array('club_free_purches_accounts.user_id' => $userID), array('club_member_accounts.version' => 'User- professional'))), 'fields' => array('count(club_member_accounts.id) as account_assing'), 'group' => 'club_member_accounts.clubuser_id', 'order' => 'club_free_purches_accounts.id DESC', 'limit' => 1));
        $Userprofessional = isset($Userprofessional1[0][0]['account_assing']) ? $Userprofessional1[0][0]['account_assing'] : '0';

        $this->set(compact('account_assing_data', 'Userbaseversion', 'Userpremium', 'Userprofessional'));
        /**************Athletes that can be loaded freely,Free accounts assigned,Remaining Free accounts,Days duration of the subscription***/


        /*********************************************************************************************************************************/
        $this->loadModel('club_purchase_accounts');
        $this->loadModel('club_settings');
        /* calculate buyed accout by club */

        $buy_all_account_base = $this->club_settings->find('all', array('joins' => array(array('table' => 'club_purchase_accounts', 'type' => 'inner', 'conditions' => 'club_settings.id=club_purchase_accounts.club_setting_id')), 'fields' => array('sum(club_purchase_accounts.accounts) as total_accounts', 'club_settings.id'), 'conditions' => array("AND" => array(array('club_purchase_accounts.clubuser_id' => $userID), 'club_settings.name' => 'Base')), 'group' => 'club_settings.name'));

        $buy_all_account_premium = $this->club_settings->find('all', array('joins' => array(array('table' => 'club_purchase_accounts', 'type' => 'inner', 'conditions' => 'club_settings.id=club_purchase_accounts.club_setting_id')), 'fields' => array('sum(club_purchase_accounts.accounts) as total_accounts', 'club_settings.id'), 'conditions' => array("AND" => array(array('club_purchase_accounts.clubuser_id' => $userID), 'club_settings.name' => 'Premium')), 'group' => 'club_settings.name'));
        $buy_all_account_pro = $this->club_settings->find('all', array('joins' => array(array('table' => 'club_purchase_accounts', 'type' => 'inner', 'conditions' => 'club_settings.id=club_purchase_accounts.club_setting_id')), 'fields' => array('sum(club_purchase_accounts.accounts) as total_accounts', 'club_settings.id'), 'conditions' => array("AND" => array(array('club_purchase_accounts.clubuser_id' => $userID), 'club_settings.name' => 'Pro')), 'group' => 'club_settings.name'));
        /* end calculate buyed account by club */

        $day_duration_for_trial = $this->subscription_settings->find('all', array('fields' => array('subscription_settings.days_duration'), 'conditions' => array('OR' => array(array('subscription_settings.subscription_name' => 'User- base version'), array('subscription_settings.subscription_name' => 'User- premium'), array('subscription_settings.subscription_name' => 'User- professional')))));
        $this->set(compact('buy_all_account_base', 'buy_all_account_premium', 'buy_all_account_pro', 'day_duration_for_trial'));

        /*********************************************************************************************************************************/


        /*********************************************************************************************************************************/

        $card_status = $cardStatus;

        $magnetic_cards_count = $this->getCardsCount(
            'card_magnetic_pools',
            $userID
        );

        $rfidbadge_cards_count = $this->getCardsCount(
            'card_rfidbadges_pools',
            $userID
        );

        $rfidbracelet_cards_count = $this->getCardsCount(
            'card_rfidbracelets_pools',
            $userID
        );

        $smartcard_cards_count = $this->getCardsCount(
            'card_smartcards_pools',
            $userID
        );

        $this->set(compact('magnetic_cards_count', 'rfidbadge_cards_count', 'rfidbracelet_cards_count', 'smartcard_cards_count', 'card_status'));

        /*********************************************************************************************************************************/


        /************************************Accounts buyed -Remaining buyed accounts************************************************/
        $this->loadModel('club_member_accounts');
        /***********account account assing to member***********/
        $assing_account_to_member_base = $this->club_member_accounts->find('all', array('joins' => array(array('table' => 'club_purchase_accounts', 'type' => 'inner', 'conditions' => 'club_purchase_accounts.id=club_member_accounts.club_purches_id'), array('table' => 'club_settings', 'type' => 'inner', 'conditions' => 'club_settings.id=club_purchase_accounts.club_setting_id')), 'conditions' => array("AND" => array(array('club_purchase_accounts.clubuser_id' => $userID), 'club_settings.name' => 'Base')), 'fields' => array('club_settings.name  as name', 'count(club_member_accounts.id) as assing_account'), 'group' => 'club_settings.name'));

        $assing_account_to_member_Premium = $this->club_member_accounts->find('all', array('joins' => array(array('table' => 'club_purchase_accounts', 'type' => 'inner', 'conditions' => 'club_purchase_accounts.id=club_member_accounts.club_purches_id'), array('table' => 'club_settings', 'type' => 'inner', 'conditions' => 'club_settings.id=club_purchase_accounts.club_setting_id')), 'conditions' => array("AND" => array(array('club_purchase_accounts.clubuser_id' => $userID), 'club_settings.name' => 'Premium')), 'fields' => array('club_settings.name  as name', 'count(club_member_accounts.id) as assing_account'), 'group' => 'club_settings.name'));

        $assing_account_to_member_pro = $this->club_member_accounts->find('all', array('joins' => array(array('table' => 'club_purchase_accounts', 'type' => 'inner', 'conditions' => 'club_purchase_accounts.id=club_member_accounts.club_purches_id'), array('table' => 'club_settings', 'type' => 'inner', 'conditions' => 'club_settings.id=club_purchase_accounts.club_setting_id')), 'conditions' => array("AND" => array(array('club_purchase_accounts.clubuser_id' => $userID), 'club_settings.name' => 'Pro')), 'fields' => array('club_settings.name  as name', 'count(club_member_accounts.id) as assing_account'), 'group' => 'club_settings.name'));

        if (!empty($assing_account_to_member_base)) {
            $base_account = $assing_account_to_member_base[0][0]['assing_account'];
        } else {
            $base_account = 0;

        }

        if (!empty($assing_account_to_member_Premium)) {
            $Premium_account = $assing_account_to_member_Premium[0][0]['assing_account'];
        } else {
            $Premium_account = 0;

        }
        if (!empty($assing_account_to_member_pro)) {
            $Pro_account = $assing_account_to_member_pro[0][0]['assing_account'];
        } else {
            $Pro_account = 0;

        }

        //fetch member details
        $this->loadModel('clubs');
        $this->loadModel('club_members');
        $this->loadModel('club_subscription_histories');
        $this->loadModel('subscription_settings');

        $user_array = $this->clubs->find(
            'all',
            array(
                "joins" => array(
                    array("table" => "club_members", "type" => "INNER", "conditions" => "clubs.id=club_members.club_id")),
                "fields" => array("clubs.id", "club_members.id", "club_members.club_id", "club_members.id", "club_members.user_id", "club_members.member_type"), "conditions" => array("clubs.user_id" => $_SESSION['Auth']['User']['id'])));

        $totalMembers = $this->club_subscription_histories->find(
            'first',
            array(
                "joins" => array(
                    array("table" => "subscription_settings", "type" => "INNER", "conditions" => "club_subscription_histories.subscription_setting_id=subscription_settings.id")),
                "fields" => array("subscription_settings.*", "club_subscription_histories.id", "club_subscription_histories.subscription_setting_id", "club_subscription_histories.club_id"),
                "conditions" => array("club_subscription_histories.club_id" => $user_array[0]['clubs']['id'], "club_subscription_histories.subscription_end_date >" => date('Y-m-d')),
                "order" => array('club_subscription_histories.id' => 'DESC')));

        $total_member_score = $totalMembers['subscription_settings']['maxusers'];
        $current_member_score = count($user_array);

        $this->set(compact('base_account', 'Premium_account', 'Pro_account', 'current_member_score', 'total_member_score'));


        /******************************************Accounts buyed -Remaining buyed accounts****************************************/

        /*************************************************************** new code ************************************************************/

    }

    private function fetchuserDtaFun($param)
    {

        //this function use for fetch user data to display in all tabs in function settings page for ndividual user
        $this->loadModel('Country');
        $countryList = $this->Country->find('list');

        $this->loadModel('sports');
        $sportList = $this->sports->find('list');

        $this->loadModel('Roles');
        $RoleList = $this->Roles->find('list');

        $user_data = $this->User->findById($param);
        $clmnName = "";
        //pr($user_data);exit;
        if ($user_data['User']['role_id'] == '5') {
            $clmnName = 'Athlete';
        }
        if ($user_data['User']['role_id'] == '6') {
            $clmnName = 'Coach';
        }
        if ($user_data['User']['role_id'] == '7') {
            $clmnName = 'Team';
        }
        if ($user_data['User']['role_id'] == '8') {
            $clmnName = 'Club';
        }
        if (!empty($user_data[$clmnName][0]['dob'])) {
            $age_user = $this->get_age($user_data[$clmnName][0]['dob']);
        } else {
            $age_user = "";
        }


        $this->set(compact('user_data', 'age_user', 'countryList', 'sportList', 'RoleList'));

    }

    public function getCardsCount($tblFtchName)
    {
        $this->loadModel($tblFtchName);

        $global_count = $this->$tblFtchName->find(
            'count', array(
            'conditions' => array(
                $tblFtchName . '.clubuser_id' => $this->Session->read('Auth.User.id'),
            )
        ));

        $noblock_count = $this->$tblFtchName->find(
            'count', array(
            'conditions' => array(
                $tblFtchName . '.clubuser_id' => $this->Session->read('Auth.User.id'),
                $tblFtchName . '.suspended_status' => 'Y'
            )
        ));

        $assign_count = $this->$tblFtchName->find(
            'count', array(
            'conditions' => array(
                $tblFtchName . '.enable' => 'Y',
                $tblFtchName . '.clubuser_id' => $this->Session->read('Auth.User.id'),
                $tblFtchName . '.suspended_status' => 'N'
            )
        ));

        $free_count = $this->$tblFtchName->find(
            'count', array(
            'conditions' => array(
                $tblFtchName . '.enable' => 'N',
                $tblFtchName . '.clubuser_id' => $this->Session->read('Auth.User.id'),
                $tblFtchName . '.suspended_status' => 'N'
            )
        ));

        $total = $global_count + $noblock_count + $assign_count + $free_count;

        $count_collection = array(
            'global' => $global_count,
            'noblock' => $noblock_count,
            'assign' => $assign_count,
            'free' => $free_count,
            'total' => $total
        );
        return $count_collection;
    }

    public function ajax_get_amount()
    {
        $this->loadModel('Club');
        $this->loadModel('User');
        $this->loadModel('SubscriptionSetting');
        $club_detail = $this->Club->getFunctionById($this->Session->read('Auth.Club.id'));
        $sub_detail = $this->SubscriptionSetting->getRecordById($club_detail['User']['subscription_setting_id']);
        $current_date = date("Y-m-d");
        $remaining_days = (strtotime($club_detail['User']['subscription_end_date']) - strtotime($current_date)) / (60 * 60 * 24);
        $price_to_pay = (($remaining_days * $sub_detail['SubscriptionSetting']['pm_price_euro']) / $sub_detail['SubscriptionSetting']['days_duration']);
        $amount = round($price_to_pay * $this->request['data']['device_id'], 2);
        echo $amount;
        exit;
    }

    public function ajax_update_device_enable()
    {
        $this->loadModel('Club');
        $this->loadModel('User');
        $this->loadModel('SubscriptionSetting');
        $this->loadModel('DeviceRequest');
        $this->loadModel('Message');

        $club_detail = $this->Club->getFunctionById($this->Session->read('Auth.Club.id'));
        $sub_detail = $this->SubscriptionSetting->getRecordById($club_detail['User']['subscription_setting_id']);
        $club_data['Club']['id'] = $this->Session->read('Auth.Club.id');
        $club_data['Club']['unpaid_device'] = $club_detail['Club']['unpaid_device'] + $this->request['data']['device_id'];
        $current_date = date("Y-m-d");
        $remaining_days = (strtotime($club_detail['User']['subscription_end_date']) - strtotime($current_date)) / (60 * 60 * 24);

        $price_to_pay = (($remaining_days * $sub_detail['SubscriptionSetting']['pm_price_euro']) / $sub_detail['SubscriptionSetting']['days_duration']);
        $club_data['Club']['unpaid_amount'] = round($club_detail['Club']['unpaid_amount'] + ($price_to_pay * $this->request['data']['device_id']), 2);
        $amount = round($price_to_pay * $this->request['data']['device_id'], 2);
        /*Device request*/
        $device_request_data['DeviceRequest']['club_id'] = $this->Session->read('Auth.Club.id');
        $device_request_data['DeviceRequest']['device_request'] = $this->request['data']['device_id'];
        $device_request_data['DeviceRequest']['amount'] = round($price_to_pay * $this->request['data']['device_id'], 2);
        $device_request_data['DeviceRequest']['date'] = $current_date;
        $device_request_data['DeviceRequest']['paid_status'] = 0;
        if ($club_detail['User']['subscription_end_date'] == "0000-00-00 00:00:00" && (empty($club_detail['Club']['unpaid_device'])) && (empty($club_detail['Club']['unpaid_device']))) {
            $date = strtotime("+" . $club_detail['User']['subscription_end_date'] . " days", strtotime($current_date));
            $club_data['User']['subscription_end_date'] = date("Y-m-d", $date);
            $club_data['Club']['unpaid_amount'] = $this->request['data']['device_id'] * $sub_detail['SubscriptionSetting']['pm_price_euro'];
        }
        /*Device request*/

        /* message*/
        $messageData['message']['sender_id'] = $this->Session->read('Auth.User.id');
        $messageData['message']['reciver_id'] = 1;
        $messageData['message']['message_body'] = "The club request the " . $this->request['data']['device_id'] . " devices and the amount is " . $amount;
        $messageData['message']['sending_time'] = date('Y-m-d H:i:s');
        $messageData['message']['replay_to'] = '0';
        /* message*/
        if ($this->Club->save($club_data)) {
            $this->User->save($club_data);
            $this->DeviceRequest->save($device_request_data);
            $this->Message->save($messageData);
            echo "successfully send the request";
            exit;
        } else {
            echo "Unable to send request";
            exit;
        }
    }

    public function ajax_save_device_data()
    {

    }

    public function enable_security()
    {
        $this->layout = 'club_clubtab';
    }

    public function check_system_password()
    {

        $this->layout = 'ajax';
        $this->autoRender = true;
        $this->loadModel('ClubSecuritySystemPassword');
        $this->loadModel('Club');
        $org_passwrod = $this->request->data["password"];
        $userId = $this->Session->read('Auth.User.id');
        $clubData = $this->Club->getFunctionByUserId($userId);

        $ClubSecurityResult = $this->ClubSecuritySystemPassword->getClubSecuritySystemPassword($this->Session->read('Auth.User.id'));
        //print_r($ClubSecurityResult[0]["ClubSecuritySystemPassword"]["reload_database_password"]);die;
        $reload_database_password = !empty($ClubSecurityResult[0]["ClubSecuritySystemPassword"]["reload_database_password"]) ? $ClubSecurityResult[0]["ClubSecuritySystemPassword"]["reload_database_password"] : "";

        //print_r($reload_database_password);die;
        if ($reload_database_password == $org_passwrod) {
            $response["status"] = 1;
            echo json_encode($response);
            exit;
        } else {
            $response["status"] = 0;
            echo json_encode($response);
            exit;
        }

    }

    //club_password_requests

    public function check_managment_password()
    {

        $this->layout = 'ajax';
        $this->autoRender = true;
        $org_passwrod = $this->request->data["password"];
        $cbs = $this->request->data['cbs'];


        $status_to_put = (int)($cbs == 0 ? 1 : 0);

        $this->loadModel("ClubPasswordMangment");
        $password = $this->ClubPasswordMangment->getRecordInClubPassmangments(
            $this->Session->read('Auth.Club.id'),
            $this->Session->read('Auth.User.id')
        );

        $response = array();
        if ($password == $org_passwrod) {

            $this->loadModel("ManagementDatabase");
            $user_id = $this->Session->read('Auth.User.id');
            $data = $this->ManagementDatabase->getRecordByUserId($user_id);

            $folderNew = "all";
            if ($data['ManagementDatabase']['confirm_reload'] == 2) {
                $folderNew = "member";
            } else if ($data['ManagementDatabase']['confirm_reload'] == 2) {
                $folderNew = "setting";
            }

            $file_database = glob("files/reload-database/user-" . $user_id . "/" . $folderNew . "/*");
            $fileArray = array();
            foreach ($file_database as $key => $value) {
                $explode = explode("files/reload-database/user-" . $user_id . "/" . $folderNew . "/", $value);
                $fileArray[] = $explode[1];
            }
            $response["status"] = 1;
            arsort($fileArray);

            $html = '<div class="listtitle">List of database save</div>';
            $date = date("d-m-Y") . ".sql";

            foreach ($fileArray as $key => $value) {

                $html .= '<div class="listrow" id="delete_db_row' . $key . '"">
                    <div onclick="managementDbase.setDefault(' . str_replace("'", "'", "'" . $value . "','" . $key . "'") . ')">
                        <a href="javascript:void(0)" >' . $value . '</a>
                    </div>
                    <a class="listdelete"  href="javascript:void(0)" onclick="managementDbase.delete_db(' . str_replace("'", "'", "'" . $value . "'") . ',' . str_replace("'", "'", "'" . $key . "'") . ')">
                        <i class="fa fa-times-circle"></i>
                    </a>
                    </div>
                </div>';
            }

            $html .= '<div class="btndefaultrow">
                    <a class="btn-light-gray" style="cursor:pointer;" onclick="managementDbase.getDBName()">Set as default</a>

                    <a class="btn-light-gray" style="cursor:pointer;" id="exitSelectedDb">Exit</a>
                    </div>';

            $response["html"] = $html;

            if ($cbs !== null) {

                $user_id = $this->Session->read('Auth.User.id');
                $this->loadModel('club_access_settings');
                $this->club_access_settings->query("UPDATE club_access_settings SET access_status = {$status_to_put} WHERE club_user_id = '{$user_id}'");
                $this->Session->write('Auth.User.HaveAccssControlToPanel', $status_to_put);


            }

            echo json_encode($response);
            exit;
        } else {
            $response["status"] = 0;
            if ($cbs !== null)
                $this->Session->write('Auth.User.HaveAccssControlToPanel', 0);
            echo json_encode($response);
            exit;
        }
    }

    public function check_managment_password_for_co_admin()
    {

        $this->layout = 'ajax';
        $this->autoRender = true;
        $org_passwrod = $this->request->data["password"];
        $this->loadModel("ClubPasswordMangment");
        $password = $this->ClubPasswordMangment->getRecordInClubPassmangments_for_co_admin($this->Session->read('Auth.User.id'));
        if ($password === $org_passwrod) {
            echo "1";
            exit;
        } else {
            echo "0";
            exit;
        }
    }

    public function club_security_other_settings()
    {

        $this->layout = 'club_clubtab';
        $this->loadModel('ClubSecurityOtherSetting');
        $this->loadmodel('users');
        $userId = $this->Session->read('Auth.User.id');
        $ClubId = $this->Session->read('Auth.Club.id');
        if ($this->request->is('post') || $this->request->is('put')) {

            if ($this->request->data["ClubSecurityOtherSetting"]["discount_blocked_in_members"] == 0) {
                $this->request->data["ClubSecurityOtherSetting"]["discount_blocked_in_members"] = "N";
            } else {
                $this->request->data["ClubSecurityOtherSetting"]["discount_blocked_in_members"] = "Y";
            }
            if ($this->request->data["ClubSecurityOtherSetting"]["discount_blocked_in_table"] == 0) {
                $this->request->data["ClubSecurityOtherSetting"]["discount_blocked_in_table"] = "N";
            } else {
                $this->request->data["ClubSecurityOtherSetting"]["discount_blocked_in_table"] = "Y";
            }

            if ($this->request->data["ClubSecurityOtherSetting"]["discount_blocked_during_payment"] == 0) {
                $this->request->data["ClubSecurityOtherSetting"]["discount_blocked_during_payment"] = "N";
            } else {
                $this->request->data["ClubSecurityOtherSetting"]["discount_blocked_during_payment"] = "Y";
            }
            if ($this->request->data["ClubSecurityOtherSetting"]["allow_own_login"] == 0) {
                $this->request->data["ClubSecurityOtherSetting"]["allow_own_login"] = "N";
            } else {
                $this->request->data["ClubSecurityOtherSetting"]["allow_own_login"] = "Y";
            }

            if ($this->request->data["ClubSecurityOtherSetting"]["allow_other_login"] == 0) {
                $this->request->data["ClubSecurityOtherSetting"]["allow_other_login"] = "N";
            } else {
                $this->request->data["ClubSecurityOtherSetting"]["allow_other_login"] = "Y";
            }

            if ($this->request->data["ClubSecurityOtherSetting"]["block_selection_other_venders"] == 0) {
                $this->request->data["ClubSecurityOtherSetting"]["block_selection_other_venders"] = "N";
            } else {
                $this->request->data["ClubSecurityOtherSetting"]["block_selection_other_venders"] = "Y";
            }

            if ($this->request->data["ClubSecurityOtherSetting"]["vendor_block_members_profile"] == 0) {
                $this->request->data["ClubSecurityOtherSetting"]["vendor_block_members_profile"] = "N";
            } else {
                $this->request->data["ClubSecurityOtherSetting"]["vendor_block_members_profile"] = "Y";
            }

            if ($this->request->data["ClubSecurityOtherSetting"]["enable_member_signature"] == 0) {
                $this->request->data["ClubSecurityOtherSetting"]["enable_member_signature"] = "N";
            } else {
                $this->request->data["ClubSecurityOtherSetting"]["enable_member_signature"] = "Y";
            }

            if ($this->request->data["ClubSecurityOtherSetting"]["allow_edit_own_presence"] == 0) {
                $this->request->data["ClubSecurityOtherSetting"]["allow_edit_own_presence"] = "N";
            } else {
                $this->request->data["ClubSecurityOtherSetting"]["allow_edit_own_presence"] = "Y";
            }

            if ($this->request->data["ClubSecurityOtherSetting"]["allow_to_view_monthly_payment"] == 0) {
                $this->request->data["ClubSecurityOtherSetting"]["allow_to_view_monthly_payment"] = "N";
            } else {
                $this->request->data["ClubSecurityOtherSetting"]["allow_to_view_monthly_payment"] = "Y";
            }


            if ($this->request->data["ClubSecurityOtherSetting"]["max_days"] == "") {
                $this->request->data["ClubSecurityOtherSetting"]["max_days"] == 0;
            }

            if ($this->request->data["ClubSecurityOtherSetting"]["member_block_atleast"] == "") {
                $this->request->data["ClubSecurityOtherSetting"]["member_block_atleast"] == 0;
            }

            if ($this->request->data["ClubSecurityOtherSetting"]["member_block_last_days"] == "") {
                $this->request->data["ClubSecurityOtherSetting"]["member_block_last_days"] == 0;
            }

            if ($this->request->data["ClubSecurityOtherSetting"]["time_spent_members_minutes"] == "") {
                $this->request->data["ClubSecurityOtherSetting"]["time_spent_members_minutes"] == 'm';
            }

            $this->request->data["ClubSecurityOtherSetting"]["club_user_id"] = $userId;
            $this->request->data["ClubSecurityOtherSetting"]["club_id"] = $ClubId;
            $options = array('conditions' => array('ClubSecurityOtherSetting.club_id' => $ClubId));
            $data_fetch = $this->ClubSecurityOtherSetting->find('first', $options);
            // pr($this->request->data);
            //$this->request->data = Set::filter($this->request->data);
            //echo   "************************************************************************************************";

            if (!empty($data_fetch)) {
                // pr($this->request->data); exit;
                $this->ClubSecurityOtherSetting->id = $data_fetch['ClubSecurityOtherSetting']['id'];
                $this->ClubSecurityOtherSetting->save($this->request->data);
                $this->Session->setFlash('Club Security setting saved successfully..');
                return $this->redirect(array('controller' => 'clubSettings', 'action' => 'club_security_other_settings'));
            } else {
                $this->ClubSecurityOtherSetting->create();
                $this->ClubSecurityOtherSetting->save($this->request->data);
                $this->Session->setFlash('Club Security setting update successfully..');
                return $this->redirect(array('controller' => 'clubSettings', 'action' => 'club_security_other_settings'));
            }

        } else {

            $options = array('conditions' => array('ClubSecurityOtherSetting.club_id' => $ClubId));
            $data_fetch = $this->ClubSecurityOtherSetting->find('first', $options);
            if (!empty($data_fetch)) {
                $this->request->data = $data_fetch;
            }
        }
    }

    public function send_request_super_admin()
    {

    }

    public function club_send_password_request()
    {

        $this->layout = 'ajax';
        $this->autoRender = false;
        $this->loadModel("ClubPasswordRequest");
        $this->loadModel("ClubPasswordMangment");
        $result = $this->ClubPasswordRequest->find(
            'all', array(
            'conditions' => array(
                'ClubPasswordRequest.user_id' => $this->Session->read('Auth.User.id'),
                'ClubPasswordRequest.club_id' => $this->Session->read('Auth.Club.id')
            )
        ));

        if (empty($result)) {

            $this->request->data["user_id"] = $this->Session->read('Auth.User.id');
            $this->request->data["club_id"] = $this->Session->read('Auth.Club.id');
            $this->request->data["status"] = "active";

            $this->ClubPasswordRequest->create();

            if ($this->ClubPasswordRequest->save($this->request->data)) {

                $to = $this->Session->read('Auth.User.email');
                $user_name = $this->Session->read('Auth.User.username');
                $Email = new CakeEmail('default');
                $Email->config('default');
                $Email->from(array('swapnilb@datalogysoftware.com' => 'MovesBook'))
                    ->to($to)
                    ->bcc("sheetal@datalogysoftware.com")
                    ->subject('Reset Pasword')
                    ->emailFormat('html')
                    ->template('request_for_password_reset')
                    ->viewVars(array("user_name" => $user_name));
                $Email->send();
                echo "1";
                exit;
            }

        } else {

            //sheetal@datalogysoftware.com
            if ($result[0]["ClubPasswordRequest"]["status"] == "inactive") {

                $this->request->data["status"] = "active";
                $this->ClubPasswordRequest->id = $result[0]["ClubPasswordRequest"]["id"];

                $this->ClubPasswordRequest->save($this->request->data);
                $to = $this->Session->read('Auth.User.email');
                $user_name = $this->Session->read('Auth.User.username');

                $Email = new CakeEmail('default');
                $Email->config('default');
                $Email->from(array('swapnilb@datalogysoftware.com' => 'MovesBook'))
                    ->to($to)
                    ->bcc("sheetal@datalogysoftware.com")
                    ->subject('management security Password')
                    ->emailFormat('html')
                    ->template('request_for_password_reset')
                    ->viewVars(array("user_name" => $user_name));
                $Email->send();

                echo "1";
                exit;

            } else {

                echo "0";
                exit;
            }
        }
    }

    public function club_admin_system_pswd()
    {

        $this->layout = 'club_clubtab';
        $this->loadModel('ClubSecuritySystemPassword');
        $this->loadModel('User');

        $userId = $this->Session->read('Auth.User.id');
        $clubData = $this->Club->getFunctionByUserId($userId);

        $ClubSecurityResult = $this->ClubSecuritySystemPassword->getClubSecuritySystemPassword($this->Session->read('Auth.User.id'));
        $ClubSecurityResult = !empty($ClubSecurityResult) ? $ClubSecurityResult[0] : array();
        $main_old_passwprd = !empty($ClubSecurityResult["ClubSecuritySystemPassword"]["main_password"]) ? $ClubSecurityResult["ClubSecuritySystemPassword"]["main_password"] : "";


        $alternative_password = !empty($clubData[0]['User']['staff_alternative_password']) ? $clubData[0]['User']['staff_alternative_password'] : "";

        $cash_section_password = !empty($ClubSecurityResult["ClubSecuritySystemPassword"]["cash_section_password"]) ? $ClubSecurityResult["ClubSecuritySystemPassword"]["cash_section_password"] : "";

        $subscription_section_password = !empty($ClubSecurityResult["ClubSecuritySystemPassword"]["subscription_section_password"]) ? $ClubSecurityResult["ClubSecuritySystemPassword"]["subscription_section_password"] : "";

        $reload_database_password = !empty($ClubSecurityResult["ClubSecuritySystemPassword"]["reload_database_password"]) ? $ClubSecurityResult["ClubSecuritySystemPassword"]["reload_database_password"] : "";

        $moves_database_password = !empty($clubData[0]['User']['staff_password']) ? $clubData[0]['User']['staff_password'] : "";

        $problem_encoutered = !empty($clubData[0]['Club']['problem_encoutered']) ? $clubData[0]['Club']['problem_encoutered'] : "";

        $this->set(compact('ClubSecurityResult', 'main_old_passwprd', 'alternative_password', 'cash_section_password', 'subscription_section_password', 'reload_database_password', 'moves_database_password', 'problem_encoutered'));

    }

    public function club_setting_for_each_level()
    {

        $this->layout = 'club_clubtab';
        $this->loadModel("ClubSecuritySettingItemFunction");
        $this->loadModel("ClubSecuritySettingItemsButton");
        $this->loadModel("ClubSecuritySettingItemFunctionsOtherSetting");

        $Button = $this->ClubSecuritySettingItemsButton->find(
            'all', array(
            'fields' => array(
                "id",
                "form_button"
            )
        ));

        $this->set(compact('Button'));
        if ($this->request->is('post')) {

            /***************check insert data record ******************** */
            $ClubSecuritySettingItemFunctionsOtherSettings = $this->ClubSecuritySettingItemFunctionsOtherSetting->find(
                'all', array(
                'conditions' => array(
                    "club_user_id" => $this->Session->read('Auth.User.id')
                )
            ));

            if (empty($ClubSecuritySettingItemFunctionsOtherSettings)) {

                $this->request->data["ClubSecuritySettingItemFunctionsOtherSetting"]["club_user_id"] = $this->Session->read('Auth.User.id');
                $this->ClubSecuritySettingItemFunctionsOtherSetting->create();
                $this->ClubSecuritySettingItemFunctionsOtherSetting->save($this->request->data);

            } else {

                $this->ClubSecuritySettingItemFunctionsOtherSetting->id = $ClubSecuritySettingItemFunctionsOtherSettings[0]["ClubSecuritySettingItemFunctionsOtherSetting"]["id"];
                $this->ClubSecuritySettingItemFunctionsOtherSetting->save($this->request->data);
            }
            /***************check insert data record ******************** */

            /***************check insert data record ******************** */
            $insert_data = $this->ClubSecuritySettingItemFunction->find(
                'all', array(
                'conditions' => array(
                    "club_user_id" => $this->Session->read('Auth.User.id'),
                    "club_security_item_id" => 1
                )
            ));

            if (empty($insert_data)) {

                $this->request->data["insert_data"]["club_user_id"] = $this->Session->read('Auth.User.id');
                $this->request->data["insert_data"]["club_security_item_id"] = 1;
                $this->ClubSecuritySettingItemFunction->create();
                $this->ClubSecuritySettingItemFunction->save($this->request->data["insert_data"]);

            } else {

                $this->ClubSecuritySettingItemFunction->id = $insert_data[0]["ClubSecuritySettingItemFunction"]["id"];
                $this->ClubSecuritySettingItemFunction->save($this->request->data["insert_data"]);
            }
            /*************** check insert data record ******************** */
            /*************** check Sales data record ******************** */

            $Sales = $this->ClubSecuritySettingItemFunction->find(
                'all', array(
                'conditions' => array(
                    "club_user_id" => $this->Session->read('Auth.User.id'),
                    "club_security_item_id" => 2
                )
            ));

            if (empty($Sales)) {

                $this->request->data["Sales"]["club_user_id"] = $this->Session->read('Auth.User.id');
                $this->request->data["Sales"]["club_security_item_id"] = 2;
                $this->ClubSecuritySettingItemFunction->create();
                $this->ClubSecuritySettingItemFunction->save($this->request->data["Sales"]);

            } else {

                $this->ClubSecuritySettingItemFunction->id = $Sales[0]["ClubSecuritySettingItemFunction"]["id"];
                $this->ClubSecuritySettingItemFunction->save($this->request->data["Sales"]);
            }
            /*************** check Sales data record *********************/

            /*************** check Access_to_archieves data record ******************/
            $Access_to_archieves = $this->ClubSecuritySettingItemFunction->find(
                'all', array(
                'conditions' => array(
                    "club_user_id" => $this->Session->read('Auth.User.id'),
                    "club_security_item_id" => 3
                )
            ));

            if (empty($Access_to_archieves)) {

                $this->request->data["Access_to_archieves"]["club_user_id"] = $this->Session->read('Auth.User.id');
                $this->request->data["Access_to_archieves"]["club_security_item_id"] = 3;
                $this->ClubSecuritySettingItemFunction->create();
                $this->ClubSecuritySettingItemFunction->save($this->request->data["Access_to_archieves"]);

            } else {

                $this->ClubSecuritySettingItemFunction->id = $Access_to_archieves[0]["ClubSecuritySettingItemFunction"]["id"];
                $this->ClubSecuritySettingItemFunction->save($this->request->data["Access_to_archieves"]);
            }
            /***************check Access_to_archieves data record **************/

            /***************check Archive_of_employees data record **************/

            $Access_to_payments = $this->ClubSecuritySettingItemFunction->find(
                'all', array(
                    'conditions' => array(
                        "club_user_id" => $this->Session->read('Auth.User.id'),
                        "club_security_item_id" => 4
                    )
                )
            );

            if (empty($Access_to_payments)) {

                $this->request->data["Access_to_payments"]["club_user_id"] = $this->Session->read('Auth.User.id');
                $this->request->data["Access_to_payments"]["club_security_item_id"] = 4;
                $this->ClubSecuritySettingItemFunction->create();
                $this->ClubSecuritySettingItemFunction->save($this->request->data["Access_to_payments"]);

            } else {

                $this->ClubSecuritySettingItemFunction->id = $Access_to_payments[0]["ClubSecuritySettingItemFunction"]["id"];
                $this->ClubSecuritySettingItemFunction->save($this->request->data["Archive_of_employees"]);
            }
            /***************check Archive_of_employees data record ****************/

            /***************check Archive_of_employees data record ****************/

            $Archive_of_employees = $this->ClubSecuritySettingItemFunction->find(
                'all', array(
                'conditions' => array(
                    "club_user_id" => $this->Session->read('Auth.User.id'),
                    "club_security_item_id" => 5
                )
            ));

            if (empty($Archive_of_employees)) {

                $this->request->data["Archive_of_employees"]["club_user_id"] = $this->Session->read('Auth.User.id');
                $this->request->data["Archive_of_employees"]["club_security_item_id"] = 5;
                $this->ClubSecuritySettingItemFunction->create();
                $this->ClubSecuritySettingItemFunction->save($this->request->data["Archive_of_employees"]);

            } else {

                $this->ClubSecuritySettingItemFunction->id = $Archive_of_employees[0]["ClubSecuritySettingItemFunction"]["id"];
                $this->ClubSecuritySettingItemFunction->save($this->request->data["Archive_of_employees"]);
            }
            /***************check Archive_of_employees data record *************** */

            /***************check Printing_function data record *************** */

            $Printing_function = $this->ClubSecuritySettingItemFunction->find(
                'all', array(
                    'conditions' => array(
                        "club_user_id" => $this->Session->read('Auth.User.id'),
                        "club_security_item_id" => 6
                    ))
            );

            if (empty($Printing_function)) {

                $this->request->data["Printing_function"]["club_user_id"] = $this->Session->read('Auth.User.id');
                $this->request->data["Printing_function"]["club_security_item_id"] = 6;
                $this->ClubSecuritySettingItemFunction->create();
                $this->ClubSecuritySettingItemFunction->save($this->request->data["Printing_function"]);

            } else {

                $this->ClubSecuritySettingItemFunction->id = $Printing_function[0]["ClubSecuritySettingItemFunction"]["id"];
                $this->ClubSecuritySettingItemFunction->save($this->request->data["Printing_function"]);
            }
            /***************check Printing_function data record ***************** */

            /***************check Statistics data record ***************** */
            $Statistics = $this->ClubSecuritySettingItemFunction->find(
                'all', array(
                'conditions' => array(
                    "club_user_id" => $this->Session->read('Auth.User.id'),
                    "club_security_item_id" => 7
                )
            ));

            if (empty($Statistics)) {

                $this->request->data["Statistics"]["club_user_id"] = $this->Session->read('Auth.User.id');
                $this->request->data["Statistics"]["club_security_item_id"] = 7;
                $this->ClubSecuritySettingItemFunction->create();
                $this->ClubSecuritySettingItemFunction->save($this->request->data["Statistics"]);

            } else {

                $this->ClubSecuritySettingItemFunction->id = $Statistics[0]["ClubSecuritySettingItemFunction"]["id"];
                $this->ClubSecuritySettingItemFunction->save($this->request->data["Statistics"]);
            }
            /***************check Statistics data record **************/

            /***************check Modifies_in_input_masks data record *************/
            $Modifies_in_input_masks = $this->ClubSecuritySettingItemFunction->find(
                'all', array(
                'conditions' => array(
                    "club_user_id" => $this->Session->read('Auth.User.id'),
                    "club_security_item_id" => 8
                )
            ));

            if (empty($Modifies_in_input_masks)) {

                $this->request->data["Modifies_in_input_masks"]["club_user_id"] = $this->Session->read('Auth.User.id');
                $this->request->data["Modifies_in_input_masks"]["club_security_item_id"] = 8;
                $this->ClubSecuritySettingItemFunction->create();
                $this->ClubSecuritySettingItemFunction->save($this->request->data["Modifies_in_input_masks"]);

            } else {

                $this->ClubSecuritySettingItemFunction->id = $Modifies_in_input_masks[0]["ClubSecuritySettingItemFunction"]["id"];
                $this->ClubSecuritySettingItemFunction->save($this->request->data["Modifies_in_input_masks"]);
            }
            /***************check Modifies_in_input_masks data record **************/

            /***************check Deletions data record **************/

            $Deletions = $this->ClubSecuritySettingItemFunction->find(
                'all', array(
                'conditions' => array(
                    "club_user_id" => $this->Session->read('Auth.User.id'),
                    "club_security_item_id" => 9
                )
            ));

            if (empty($Deletions)) {

                $this->request->data["Deletions"]["club_user_id"] = $this->Session->read('Auth.User.id');
                $this->request->data["Deletions"]["club_security_item_id"] = 9;
                $this->ClubSecuritySettingItemFunction->create();
                $this->ClubSecuritySettingItemFunction->save($this->request->data["Deletions"]);

            } else {

                $this->ClubSecuritySettingItemFunction->id = $Deletions[0]["ClubSecuritySettingItemFunction"]["id"];
                $this->ClubSecuritySettingItemFunction->save($this->request->data["Deletions"]);
            }
            /***************check Deletions data record *********************/

            /***************check Settings_section data record **************/
            $Settings_section = $this->ClubSecuritySettingItemFunction->find(
                'all', array(
                    'conditions' => array(
                        "club_user_id" => $this->Session->read('Auth.User.id'),
                        "club_security_item_id" => 10
                    )
                )
            );

            if (empty($Settings_section)) {

                $this->request->data["Settings_section"]["club_user_id"] = $this->Session->read('Auth.User.id');
                $this->request->data["Settings_section"]["club_security_item_id"] = 10;
                $this->ClubSecuritySettingItemFunction->create();
                $this->ClubSecuritySettingItemFunction->save($this->request->data["Settings_section"]);

            } else {

                $this->ClubSecuritySettingItemFunction->id = $Settings_section[0]["ClubSecuritySettingItemFunction"]["id"];
                $this->ClubSecuritySettingItemFunction->save($this->request->data["Settings_section"]);
            }
            /***************check Settings_section data record ******************** */

            /***************check Cash_report data record ******************** */

            $Cash_report = $this->ClubSecuritySettingItemFunction->find(
                'all', array(
                'conditions' => array(
                    "club_user_id" => $this->Session->read('Auth.User.id'),
                    "club_security_item_id" => 11
                )
            ));

            if (empty($Cash_report)) {

                $this->request->data["Cash_report"]["club_user_id"] = $this->Session->read('Auth.User.id');
                $this->request->data["Cash_report"]["club_security_item_id"] = 11;
                $this->ClubSecuritySettingItemFunction->create();
                $this->ClubSecuritySettingItemFunction->save($this->request->data["Cash_report"]);

            } else {

                $this->ClubSecuritySettingItemFunction->id = $Cash_report[0]["ClubSecuritySettingItemFunction"]["id"];
                $this->ClubSecuritySettingItemFunction->save($this->request->data["Cash_report"]);
            }
            /***************check Cash_report data record *********************/

            /***************check Expert_data data record *********************/
            $Expert_data = $this->ClubSecuritySettingItemFunction->find(
                'all', array(
                'conditions' => array(
                    "club_user_id" => $this->Session->read('Auth.User.id'),
                    "club_security_item_id" => 12
                )
            ));

            if (empty($Expert_data)) {

                $this->request->data["Expert_data"]["club_user_id"] = $this->Session->read('Auth.User.id');
                $this->request->data["Expert_data"]["club_security_item_id"] = 12;
                $this->ClubSecuritySettingItemFunction->create();
                $this->ClubSecuritySettingItemFunction->save($this->request->data["Expert_data"]);

            } else {

                $this->ClubSecuritySettingItemFunction->id = $Expert_data[0]["ClubSecuritySettingItemFunction"]["id"];
                $this->ClubSecuritySettingItemFunction->save($this->request->data["Expert_data"]);
            }
            /************check Expert_data data record **************/

            /************check Archive_of_activity_log data record **************/

            $Archive_of_activity_log = $this->ClubSecuritySettingItemFunction->find(
                'all', array(
                    'conditions' => array(
                        "club_user_id" => $this->Session->read('Auth.User.id'),
                        "club_security_item_id" => 13
                    )
                )
            );

            if (empty($Archive_of_activity_log)) {

                $this->request->data["Archive_of_activity_log"]["club_user_id"] = $this->Session->read('Auth.User.id');
                $this->request->data["Archive_of_activity_log"]["club_security_item_id"] = 13;
                $this->ClubSecuritySettingItemFunction->create();
                $this->ClubSecuritySettingItemFunction->save($this->request->data["Archive_of_activity_log"]);

            } else {

                $this->ClubSecuritySettingItemFunction->id = $Archive_of_activity_log[0]["ClubSecuritySettingItemFunction"]["id"];
                $this->ClubSecuritySettingItemFunction->save($this->request->data["Archive_of_activity_log"]);
            }
            /***************check Archive_of_activity_log data record **************/

            /***************check Contact_manager data record **************/

            $Contact_manager = $this->ClubSecuritySettingItemFunction->find(
                'all', array(
                'conditions' => array(
                    "club_user_id" => $this->Session->read('Auth.User.id'),
                    "club_security_item_id" => 14
                )
            ));

            if (empty($Contact_manager)) {

                $this->request->data["Contact_manager"]["club_user_id"] = $this->Session->read('Auth.User.id');
                $this->request->data["Contact_manager"]["club_security_item_id"] = 14;
                $this->ClubSecuritySettingItemFunction->create();
                $this->ClubSecuritySettingItemFunction->save($this->request->data["Contact_manager"]);

            } else {

                $this->ClubSecuritySettingItemFunction->id = $Contact_manager[0]["ClubSecuritySettingItemFunction"]["id"];
                $this->ClubSecuritySettingItemFunction->save($this->request->data["Contact_manager"]);
            }
            /***************check Contact_manager data record *******/

            /***************check Contacts_with_coaches data record *******/
            $Contacts_with_coaches = $this->ClubSecuritySettingItemFunction->find(
                'all', array(
                'conditions' => array(
                    "club_user_id" => $this->Session->read('Auth.User.id'),
                    "club_security_item_id" => 15
                )
            ));

            if (empty($Contacts_with_coaches)) {

                $this->request->data["Contacts_with_coaches"]["club_user_id"] = $this->Session->read('Auth.User.id');
                $this->request->data["Contacts_with_coaches"]["club_security_item_id"] = 15;
                $this->ClubSecuritySettingItemFunction->create();
                $this->ClubSecuritySettingItemFunction->save($this->request->data["Contacts_with_coaches"]);

            } else {

                $this->ClubSecuritySettingItemFunction->id = $Contacts_with_coaches[0]["ClubSecuritySettingItemFunction"]["id"];
                $this->ClubSecuritySettingItemFunction->save($this->request->data["Contacts_with_coaches"]);
            }
            /***************check Contacts_with_coaches data record **************/

            /***************check Network_manager data record ***************/
            $Network_manager = $this->ClubSecuritySettingItemFunction->find(
                'all', array(
                    'conditions' => array(
                        "club_user_id" => $this->Session->read('Auth.User.id'),
                        "club_security_item_id" => 16
                    )
                )
            );

            if (empty($Network_manager)) {

                $this->request->data["Network_manager"]["club_user_id"] = $this->Session->read('Auth.User.id');
                $this->request->data["Network_manager"]["club_security_item_id"] = 16;
                $this->ClubSecuritySettingItemFunction->create();
                $this->ClubSecuritySettingItemFunction->save($this->request->data["Network_manager"]);

            } else {

                $this->ClubSecuritySettingItemFunction->id = $Network_manager[0]["ClubSecuritySettingItemFunction"]["id"];
                $this->ClubSecuritySettingItemFunction->save($this->request->data["Network_manager"]);
            }
            /***************check Network_manager data record **************** */

            /***************check Account_manager data record **************** */

            $Account_manager = $this->ClubSecuritySettingItemFunction->find(
                'all', array(
                'conditions' => array(
                    "club_user_id" => $this->Session->read('Auth.User.id'),
                    "club_security_item_id" => 17
                )
            ));

            if (empty($Account_manager)) {

                $this->request->data["Account_manager"]["club_user_id"] = $this->Session->read('Auth.User.id');
                $this->request->data["Account_manager"]["club_security_item_id"] = 17;
                $this->ClubSecuritySettingItemFunction->create();
                $this->ClubSecuritySettingItemFunction->save($this->request->data["Account_manager"]);

            } else {

                $this->ClubSecuritySettingItemFunction->id = $Account_manager[0]["ClubSecuritySettingItemFunction"]["id"];
                $this->ClubSecuritySettingItemFunction->save($this->request->data["Account_manager"]);
            }

            $this->Session->setFlash('Record save successfully');
            return $this->redirect(array('controller' => 'clubs', 'action' => 'club_setting_for_each_level'));

            /***************check Account_manager data record*************** */

        } else {

            $ClubSecuritySettingItemFunctionsOtherSettings = $this->ClubSecuritySettingItemFunctionsOtherSetting->find(
                'all', array(
                    'conditions' => array(
                        "club_user_id" => $this->Session->read('Auth.User.id')
                    )
                )
            );

            if (!empty($ClubSecuritySettingItemFunctionsOtherSettings)) {
                $this->request->data = $ClubSecuritySettingItemFunctionsOtherSettings[0];
            }

            $insert_data = $this->ClubSecuritySettingItemFunction->find(
                'all', array(
                'conditions' => array(
                    "club_user_id" => $this->Session->read('Auth.User.id'),
                    "club_security_item_id" => 1
                )
            ));

            if (!empty($insert_data)) {
                $this->request->data["insert_data"] = $insert_data[0]["ClubSecuritySettingItemFunction"];
            }

            $Sales = $this->ClubSecuritySettingItemFunction->find(
                'all', array(
                'conditions' => array(
                    "club_user_id" => $this->Session->read('Auth.User.id'),
                    "club_security_item_id" => 2
                )
            ));

            if (!empty($Sales)) {
                $this->request->data["Sales"] = $Sales[0]["ClubSecuritySettingItemFunction"];
            }

            $Access_to_archieves = $this->ClubSecuritySettingItemFunction->find(
                'all', array(
                    'conditions' => array(
                        "club_user_id" => $this->Session->read('Auth.User.id'),
                        "club_security_item_id" => 3
                    )
                )
            );

            if (!empty($Access_to_archieves)) {
                $this->request->data["Access_to_archieves"] = $Access_to_archieves[0]["ClubSecuritySettingItemFunction"];
            }

            $Access_to_payments = $this->ClubSecuritySettingItemFunction->find(
                'all', array(
                    'conditions' => array(
                        "club_user_id" => $this->Session->read('Auth.User.id'),
                        "club_security_item_id" => 4
                    )
                )
            );

            if (!empty($Access_to_payments)) {
                $this->request->data["Access_to_payments"] = $Access_to_payments[0]["ClubSecuritySettingItemFunction"];
            }

            $Archive_of_employees = $this->ClubSecuritySettingItemFunction->find(
                'all', array(
                    'conditions' => array(
                        "club_user_id" => $this->Session->read('Auth.User.id'),
                        "club_security_item_id" => 5
                    )
                )
            );

            if (!empty($Archive_of_employees)) {
                $this->request->data["Archive_of_employees"] = $Archive_of_employees[0]["ClubSecuritySettingItemFunction"];
            }

            $Printing_function = $this->ClubSecuritySettingItemFunction->find(
                'all', array(
                    'conditions' => array(
                        "club_user_id" => $this->Session->read('Auth.User.id'),
                        "club_security_item_id" => 6
                    )
                )
            );

            if (!empty($Printing_function)) {
                $this->request->data["Printing_function"] = $Printing_function[0]["ClubSecuritySettingItemFunction"];
            }

            $Statistics = $this->ClubSecuritySettingItemFunction->find(
                'all', array(
                'conditions' => array(
                    "club_user_id" => $this->Session->read('Auth.User.id'),
                    "club_security_item_id" => 7
                )
            ));

            if (!empty($Statistics)) {
                $this->request->data["Statistics"] = $Statistics[0]["ClubSecuritySettingItemFunction"];
            }

            $Modifies_in_input_masks = $this->ClubSecuritySettingItemFunction->find(
                'all', array(
                    'conditions' => array(
                        "club_user_id" => $this->Session->read('Auth.User.id'),
                        "club_security_item_id" => 8
                    )
                )
            );

            if (!empty($Modifies_in_input_masks)) {
                $this->request->data["Modifies_in_input_masks"] = $Modifies_in_input_masks[0]["ClubSecuritySettingItemFunction"];
            }

            $Deletions = $this->ClubSecuritySettingItemFunction->find(
                'all', array(
                'conditions' => array(
                    "club_user_id" => $this->Session->read('Auth.User.id'),
                    "club_security_item_id" => 9
                )
            ));

            if (!empty($Deletions)) {
                $this->request->data["Deletions"] = $Deletions[0]["ClubSecuritySettingItemFunction"];
            }

            $Settings_section = $this->ClubSecuritySettingItemFunction->find(
                'all', array(
                    'conditions' => array(
                        "club_user_id" => $this->Session->read('Auth.User.id'),
                        "club_security_item_id" => 10
                    )
                )
            );

            if (!empty($Settings_section)) {
                $this->request->data["Settings_section"] = $Settings_section[0]["ClubSecuritySettingItemFunction"];
            }

            $Cash_report = $this->ClubSecuritySettingItemFunction->find(
                'all', array(
                'conditions' => array(
                    "club_user_id" => $this->Session->read('Auth.User.id'),
                    "club_security_item_id" => 11
                )
            ));

            if (!empty($Cash_report)) {
                $this->request->data["Cash_report"] = $Cash_report[0]["ClubSecuritySettingItemFunction"];
            }

            $Expert_data = $this->ClubSecuritySettingItemFunction->find(
                'all', array(
                'conditions' => array(
                    "club_user_id" => $this->Session->read('Auth.User.id'),
                    "club_security_item_id" => 12
                )
            ));

            if (!empty($Expert_data)) {
                $this->request->data["Expert_data"] = $Expert_data[0]["ClubSecuritySettingItemFunction"];
            }

            $Archive_of_activity_log = $this->ClubSecuritySettingItemFunction->find(
                'all', array(
                    'conditions' => array(
                        "club_user_id" => $this->Session->read('Auth.User.id'),
                        "club_security_item_id" => 13
                    )
                )
            );

            if (!empty($Archive_of_activity_log)) {
                $this->request->data["Archive_of_activity_log"] = $Archive_of_activity_log[0]["ClubSecuritySettingItemFunction"];
            }

            $Contact_manager = $this->ClubSecuritySettingItemFunction->find(
                'all', array(
                    'conditions' => array(
                        "club_user_id" => $this->Session->read('Auth.User.id'),
                        "club_security_item_id" => 14
                    )
                )
            );

            if (!empty($Contact_manager)) {
                $this->request->data["Contact_manager"] = $Contact_manager[0]["ClubSecuritySettingItemFunction"];
            }

            $Contacts_with_coaches = $this->ClubSecuritySettingItemFunction->find(
                'all', array(
                    'conditions' => array(
                        "club_user_id" => $this->Session->read('Auth.User.id'),
                        "club_security_item_id" => 15
                    )
                )
            );

            if (!empty($Contacts_with_coaches)) {
                $this->request->data["Contacts_with_coaches"] = $Contacts_with_coaches[0]["ClubSecuritySettingItemFunction"];
            }

            $Network_manager = $this->ClubSecuritySettingItemFunction->find(
                'all', array(
                    'conditions' => array(
                        "club_user_id" => $this->Session->read('Auth.User.id'),
                        "club_security_item_id" => 16
                    )
                )
            );

            if (!empty($Network_manager)) {
                $this->request->data["Network_manager"] = $Network_manager[0]["ClubSecuritySettingItemFunction"];
            }

            $Account_manager = $this->ClubSecuritySettingItemFunction->find(
                'all', array(
                    'conditions' => array(
                        "club_user_id" => $this->Session->read('Auth.User.id'),
                        "club_security_item_id" => 17
                    )
                )
            );

            if (!empty($Account_manager)) {
                $this->request->data["Account_manager"] = $Account_manager[0]["ClubSecuritySettingItemFunction"];
            }
        }
    }

    public function enable_disable_password()
    {

        $this->layout = 'club_clubtab';
        $this->loadModel('ClubStautsSecurity');

        $ClubStautsSecurity = $this->ClubStautsSecurity->getClubStautsSecurityRecord($this->Session->read('Auth.Club.id'), $this->Session->read('Auth.User.id'));

        $ClubStautsSecurity = !empty($ClubStautsSecurity) ? $ClubStautsSecurity[0] : "";

        $enable_status = "";
        $disable_status = "";

        if (!empty($ClubStautsSecurity["ClubStautsSecurity"]["status"])) {

            if ($ClubStautsSecurity["ClubStautsSecurity"]["status"] == "disable_security") {

                $enable_status = "";
                $disable_status = "checked=checked";

            } else if ($ClubStautsSecurity["ClubStautsSecurity"]["status"] == "enable_security") {

                $enable_status = "checked=checked";
                $disable_status = "";

            }
        }

        $this->set(compact('ClubStautsSecurity', 'disable_status', 'enable_status'));
    }

    public function club_reset_password()
    {

        $this->layout = 'ajax';
        $this->autoRender = false;

        $this->loadModel("ClubPasswordMangment");
        $this->loadModel("ClubPasswordRequest");

        $result = $this->ClubPasswordMangment->find(
            'all', array(
            'conditions' => array(
                'ClubPasswordMangment.user_id' => $this->request->data["user_id"]
            )
        ));

        if (empty($result)) {

            $alphabets = range('A', 'Z');
            $numbers = range('0', '9');
            $additional_characters = array('_', '.');
            $final_array = array_merge($alphabets, $numbers, $additional_characters);
            $uniqueReferenceID = '';
            $length = 8;

            while ($length--) {

                $key = array_rand($final_array);
                $uniqueReferenceID .= $final_array[$key];
            }

            $this->request->data["club_id"] = $this->Session->read('Auth.Club.id');
            $this->request->data["club_manage_password"] = $uniqueReferenceID;
            $this->ClubPasswordMangment->save($this->request->data);
        }

        $result12 = $this->ClubPasswordMangment->find(
            'all', array(
            'conditions' => array(
                'ClubPasswordMangment.user_id' => $this->request->data["user_id"]
            )
        ));

        $resultClubPasswordRequest = $this->ClubPasswordRequest->find(
            'all', array(
            'conditions' => array(
                'ClubPasswordRequest.user_id' => $this->request->data["user_id"]
            )
        ));

        $user_name = $this->User->find(
            'all', array(
            'conditions' => array(
                'User.id' => $this->request->data["user_id"]
            )
        ));

        $name = !empty($user_name[0]["User"]["username"]) ? $user_name[0]["User"]["username"] : "";

        if (!empty($result12)) {

            $alphabets = range('A', 'Z');
            $numbers = range('0', '9');
            $additional_characters = array('_', '.');
            $final_array = array_merge($alphabets, $numbers, $additional_characters);
            $uniqueReferenceID_admin_reset = '';
            $length = 8;

            while ($length--) {
                $key = array_rand($final_array);
                $uniqueReferenceID_admin_reset .= $final_array[$key];
            }

            $this->request->data["club_manage_password"] = $uniqueReferenceID_admin_reset;
            $this->ClubPasswordMangment->id = $result12[0]["ClubPasswordMangment"]["id"];

            if ($this->ClubPasswordMangment->save($this->request->data)) {

                $this->ClubPasswordRequest->id = $resultClubPasswordRequest[0]["ClubPasswordRequest"]["id"];
                $this->request->data["status"] = "inactive";
                $this->ClubPasswordRequest->save($this->request->data);
                $to = $this->request->data["email_id"];
                $Email = new CakeEmail('default');
                $Email->config('default');
                $Email->from(array('sunil@datalogysoftware.com' => 'MovesBook'))
                    ->to($to)
                    ->bcc("amol@datalogysoftware.com")
                    ->subject('New Club management security Password')
                    ->emailFormat('html')
                    ->template('request_for_password_reset_by_admin')
                    ->viewVars(array('uniqueReferenceID_admin_reset' => $uniqueReferenceID_admin_reset, 'name' => $name));
                $Email->send();

                echo "1";
                exit;
            }

        } else {

            echo "0";
            exit;
        }
    }

    public function club_operator_list()
    {

        $this->layout = 'club_clubtab';
        $this->loadModel("ClubOperator");
        $club_operator_list = $this->ClubOperator->find(
            'all', array(
            'conditions' => array(
                'ClubOperator.clubadmin_id' => $this->Session->read('Auth.User.id')
            )
        ));
        $this->set('club_operator_list', $club_operator_list);
    }

    public function club_operator_list_edit($cid = null)
    {

        $this->layout = 'club_clubtab';

        ///////////////////////////////////////////////////////////////
        $this->loadmodel('User');
        $this->loadmodel('club_operators');
        $this->loadModel('ClubSettingEmpOccupation');
        $this->loadModel('ClubOperatorAssignAccessLevel');
        $this->unbindUser();

        /*call function if image upload start*/
        if (empty($this->request->data['User']['image']['name'])) {
            unset($this->request->data['User']['image']);
        } else {
            $file_name = $this->upload_image($this->request->data['User']['image'], "profile_images");
            // pass image path to upload file function define in app controller
            $this->request->data['User']['image'] = $file_name;
        }

        /*call function if image upload start */
        $clopinfo = $this->club_operators->find(
            'all', array(
            'conditions' => array(
                'club_operators.id' => $cid
            )
        ));

        $clopuserinfo = $this->User->find(
            'all', array(
            'conditions' => array(
                'User.id' => $clopinfo[0]['club_operators']['user_id']
            )
        ));

        $this->set('clopinfo', $clopinfo[0]);
        $this->set('clopuserinfo', $clopuserinfo[0]);

        $club_password = $this->ClubOperatorAssignAccessLevel->find(
            'all', array(
            'conditions' => array(
                'ClubOperatorAssignAccessLevel.operator_id' => $clopuserinfo[0]['ClubOperatorAssignAccessLevel'][0]['operator_id']
            )
        ));

        $this->set('club_password', $club_password[0]);

        if ($this->request->is('post')) {

            $username = $this->User->find(
                'count', array(
                'conditions' => array(
                    'User.username' => $this->request->data['User']['username'],
                    'User.id !=' => $this->request->data['User']['id']
                )
            ));

            $emailVal = $this->User->find(
                'count', array(
                'conditions' => array(
                    'User.email' => $this->request->data['User']['email'],
                    'User.id !=' => $this->request->data['User']['id']
                )
            ));

            if ($username == 0 && $emailVal == 0) {

                $this->User->id = $this->request->data['User']['id'];
                $this->User->save($this->request->data['User']);

                $this->club_operators->id = $this->request->data['club_operators']['id'];

                $this->request->data['club_operators']["user_id"] = $this->request->data['User']['id'];

                $this->club_operators->save($this->request->data['club_operators']);

                $this->Session->setFlash('Operator of club updated successfully.');
                $this->redirect(array('action' => 'club_operator_edit', $this->request->data['club_operators']['id']));

            } else {

                $this->Session->setFlash(__('Username or Email already exists, Please try again.'));
            }

        } else {
            // $this->redirect(array('action' => 'club_co_admin', $cid));
        }

    }

    public function club_operator_list_view($cid = null)
    {

        $this->layout = 'club_clubtab';

        ///////////////////////////////////////////////////////////////
        $this->loadmodel('User');
        $this->loadmodel('club_operators');
        $this->unbindUser();

        /*call function if image upload start*/
        if (empty($this->request->data['User']['image']['name'])) {

            unset($this->request->data['User']['image']);
        } else {

            $file_name = $this->upload_image($this->request->data['User']['image'], "profile_images");
            // pass image path to upload file function define in app controller
            $this->request->data['User']['image'] = $file_name;
        }

        /*call function if image upload start */
        $clopinfo = $this->club_operators->find(
            'all', array(
            'conditions' => array(
                'club_operators.id' => $cid
            )
        ));

        $clopuserinfo = $this->User->find(
            'all', array(
            'conditions' => array(
                'User.id' => $clopinfo[0]['club_operators']['user_id']
            )
        ));

        $this->set('clopinfo', $clopinfo[0]);
        $this->set('clopuserinfo', $clopuserinfo[0]);

        if ($this->request->is('post')) {

            $username = $this->User->find(
                'count', array(
                'conditions' => array(
                    'User.username' => $this->request->data['User']['username'],
                    'User.id !=' => $this->request->data['User']['id']
                )
            ));

            $emailVal = $this->User->find(
                'count', array(
                'conditions' => array(
                    'User.email' => $this->request->data['User']['email'],
                    'User.id !=' => $this->request->data['User']['id']
                )
            ));

            if ($username == 0 && $emailVal == 0) {

                $this->User->id = $this->request->data['User']['id'];
                $this->User->save($this->request->data['User']);
                $this->club_operators->id = $this->request->data['club_operators']['id'];
                $this->request->data['club_operators']["user_id"] = $this->request->data['User']['id'];
                $this->club_operators->save($this->request->data['club_operators']);
                $this->Session->setFlash('Operator of club updated successfully.');
                //$this->redirect(array('action' => 'club_co_admin', $this->request->data['club_operators']['id']));
                $this->redirect(array('action' => 'club_operator_edit', $this->request->data['club_operators']['id']));

            } else {

                $this->Session->setFlash(__('Username or Email already exists, Please try again.'));
            }
        } else {
            // $this->redirect(array('action' => 'club_co_admin', $cid));
        }


    }

    public function club_operator_list_delete($cid = null)
    {

        $this->layout = 'club_clubtab';
        $this->loadModel("ClubOperator");
        $this->loadModel("User");
        $user_club = $this->ClubOperator->find('all', array('fields' => array('user_id'), 'conditions' => array('ClubOperator.id' => $cid)));
        $this->ClubOperator->id = $cid;
        if ($this->ClubOperator->delete()) {
            $this->User->id = $user_club[0]["ClubOperator"]["user_id"];
            $this->User->delete();
            $this->Session->setFlash(__('Delete Successfully'));
            $this->redirect(array('action' => 'club_operator_list'));
        } else {
            $this->Session->setFlash(__('Please try again.'));
        }
    }

    public function club_operator_list_print($user_idString)
    {
        $this->layout = '';
        $this->loadModel("ClubOperator");
        $user_id = explode("_", $user_idString);
        $club_operator_list = $this->ClubOperator->find('all', array('conditions' => array('ClubOperator.user_id' => $user_id)));
        $this->set('club_operator_list', $club_operator_list);
    }

    public function club_coadmin_list()
    {

        $this->layout = 'club_clubtab';
        $this->loadModel("ClubSubadmin");
        $club_coadmin_list = $this->ClubSubadmin->find('all', array('conditions' => array('ClubSubadmin.admin_id' => $this->Session->read('Auth.User.id'))));
        // pr($club_coadmin_list); exit;
        $this->set('club_coadmin_list', $club_coadmin_list);

    }


    public function club_coadmin_list_edit($cid = null)
    {


        ////////////////////////////////////////////////////////////////
        $this->unbindUser();
        $this->layout = 'club_clubtab';
        $this->loadmodel('User');
        $this->loadmodel('club_operators');
        $this->loadModel("ClubSubadmin");
        $this->loadModel('ClubSettingEmpOccupation');
        $this->loadModel('ClubOperatorAssignAccessLevel');

        /*call function if image upload start*/
        if (empty($this->request->data['User']['image']['name'])) {
            unset($this->request->data['User']['image']);
        } else {

            $file_name = $this->upload_image($this->request->data['User']['image'], "profile_images"); // pass image path to upload file            function define in app controller
            $this->request->data['User']['image'] = $file_name;
        }

        /*call function if image upload start */


        $clopinfo = $this->ClubSubadmin->getClubSubadmin(array('conditions' => array('ClubSubadmin.id' => $cid)));

        $cid_user = $clopinfo[0]['ClubSubadmin']['user_id'];
        //pr($this->getLastQuery('club_subadmins'));exit;
        $clopuserinfo = $this->User->getUserRecordByCondtions(array('conditions' => array('User.id' => $cid_user)));

        $this->set('clopinfo', $clopinfo[0]);
        $this->set('clopuserinfo', $clopuserinfo[0]);
        //  pr($clopuserinfo[0]['ClubOperatorAssignAccessLevel']);
        // exit;
        $club_password = $this->ClubOperatorAssignAccessLevel->find('all', array('conditions' => array('ClubOperatorAssignAccessLevel.operator_id' => $clopuserinfo[0]['ClubOperatorAssignAccessLevel'][0]['operator_id'])));

        $this->set('club_password', $club_password[0]);


        if ($this->request->is('post')) {

            $username = $this->User->find('count', array('conditions' => array('User.username' => $this->request->data['User']['username'], 'User.id !=' => $this->request->data['User']['id'])));
            $emailVal = $this->User->find('count', array('conditions' => array('User.email' => $this->request->data['User']['email'], 'User.id !=' => $this->request->data['User']['id'])));
            if ($username == 0 && $emailVal == 0) {

                $this->User->id = $this->request->data['User']['id'];
                if (empty($this->request->data['User']['image']['name'])) {
                    unset($this->request->data['User']['image']);
                } else {
                    $file_name = $this->upload_image($this->request->data['User']['image'], "profile_images");
                    $this->request->data['User']['image'] = $file_name;
                }
                $this->User->save($this->request->data['User']);
                $this->club_operators->id = $this->request->data['club_operators']['id'];
                $this->club_operators->save($this->request->data['club_operators']);
                $this->ClubSubadmin->id = $clopinfo[0]["ClubSubadmin"]["id"];
                $this->ClubSubadmin->save($this->request->data);
                $this->Session->setFlash('Operator of club updated successfully.');
                $this->redirect(array('action' => 'club_coadmin_list', $cid));

            } else {

                $this->Session->setFlash(__('Username or Email already exists, Please try again.'));
            }
        }

        ///////////////////////////////////////////////////////////////


    }

    public function club_coadmin_list_view($cid = null)
    {

        ////////////////////////////////////////////////////////////////
        $this->unbindUser();
        $this->layout = 'club_clubtab';
        $this->loadmodel('User');
        $this->loadmodel('club_operators');
        $this->loadModel("ClubSubadmin");
        $clopinfo = $this->ClubSubadmin->getClubSubadmin(array('conditions' => array('ClubSubadmin.id' => $cid)));

        //$clopinfo=$this->club_subadmins->find('all',array('conditions'=>array('club_subadmins.id'=>$cid)));
        $cid_user = $clopinfo[0]['ClubSubadmin']['user_id'];
        //pr($this->getLastQuery('club_subadmins'));exit;
        $clopuserinfo = $this->User->getUserRecordByCondtions(array('conditions' => array('User.id' => $cid_user)));
        //$clopuserinfo=$this->User->find('all',array('conditions'=>array('User.id'=>$cid)));
        //pr($clopuserinfo);exit;
        $this->set('clopinfo', $clopinfo[0]);
        $this->set('clopuserinfo', $clopuserinfo[0]);
        if ($this->request->is('post')) {
            //if(empty($this->request->data['User']['image']['name'])) {
            //  $this->request->data['User']['image'] = "no_image_found.jpg";
            //}else{
            //      $file_name = $this->upload_image($this->request->data['User']['image'], "profile_images");
            //  $this->request->data['User']['image'] = $file_name;
            //}
            //pr($this->request->data['club_operators']['id']);exit;
            $username = $this->User->find('count', array('conditions' => array('User.username' => $this->request->data['User']['username'], 'User.id !=' => $this->request->data['User']['id'])));
            $emailVal = $this->User->find('count', array('conditions' => array('User.email' => $this->request->data['User']['email'], 'User.id !=' => $this->request->data['User']['id'])));
            if ($username == 0 && $emailVal == 0) {

                $this->User->id = $this->request->data['User']['id'];
                if (empty($this->request->data['User']['image']['name'])) {
                    unset($this->request->data['User']['image']);
                } else {
                    $file_name = $this->upload_image($this->request->data['User']['image'], "profile_images");
                    $this->request->data['User']['image'] = $file_name;
                }
                $this->User->save($this->request->data['User']);
                $this->club_operators->id = $this->request->data['club_operators']['id'];
                $this->club_operators->save($this->request->data['club_operators']);
                $this->ClubSubadmin->id = $clopinfo[0]["ClubSubadmin"]["id"];
                $this->ClubSubadmin->save($this->request->data);
                $this->Session->setFlash('Operator of club updated successfully.');
                $this->redirect(array('action' => 'club_coadmin_list', $cid));

            } else {

                $this->Session->setFlash(__('Username or Email already exists, Please try again.'));
            }
        }

        ///////////////////////////////////////////////////////////////

    }

    public function club_coadmin_list_delete($cid = null)
    {

        $this->loadModel("ClubSubadmin");
        $id = $this->ClubSubadmin->find('all', array('fields' => array('user_id'), 'conditions' => array('ClubSubadmin.id' => $cid)));

        $this->ClubSubadmin->id = $cid;
        if ($this->ClubSubadmin->delete()) {
            $this->User->id = $id[0]['ClubSubadmin']['user_id'];
            $this->User->delete();
            $this->Session->setFlash(__('Record has been deleted successfully'), 'flash-message', array('type' => 'alert-success'), 'success');
            $this->redirect(array('action' => 'club_coadmin_list'));
        } else {
            $this->Session->setFlash(__('Record not deleted'), 'flash-message', array('type' => 'alert-success'), 'success');
            $this->redirect(array('action' => 'club_coadmin_list'));

        }
    }

    public function club_coadmin_list_print($user_idString)
    {
        $this->layout = '';
        $this->loadModel("ClubSubadmin");
        $user_id = explode("_", $user_idString);
        $club_coadmin_list = $this->ClubSubadmin->find('all', array('conditions' => array('ClubSubadmin.user_id' => $user_id)));
        $this->set('club_coadmin_list', $club_coadmin_list);
    }

    public function show_days_duration()
    {

        $this->layout = '';
        if ($this->request->data["version"] == "base") {
            $club_setting_id = 1;
        } else if ($this->request->data["version"] == "Premium") {
            $club_setting_id = 2;
        } else if ($this->request->data["version"] == "Pro") {
            $club_setting_id = 3;
        }
        $this->loadModel("ClubPurchaseAccount");
        $account_days_duration = $this->ClubPurchaseAccount->find('all', array('fields' => array('ClubPurchaseAccount.id', 'ClubPurchaseAccount.accounts', 'ClubPurchaseAccount.randm_key', 'ClubPurchaseAccount.day_duration', 'ClubPurchaseAccount.club_setting_id', 'ClubPurchaseAccount.total_amount', 'ClubPurchaseAccount.accounts', 'ClubPurchaseAccount.status'), 'conditions' => array('ClubPurchaseAccount.clubuser_id' => $_SESSION["Auth"]["User"]["id"], 'ClubPurchaseAccount.club_setting_id ' => $club_setting_id)));
        // pr($account_days_duration);exit;


        $this->set(compact('account_days_duration'));

    }

    public function show_all_subscription()
    {
        $this->layout = 'ajax';
        $this->autoRender = true;
        $this->loadModel('club_subscription_histories');
        $this->loadModel('subscription_settings');
        $this->loadModel('athlete_subscription_histories');
        $user_sub_name = $this->request->data["user_sub_name"];
        $start = $this->request->data["start"];
        $end = $this->request->data["end"];
        if ($this->request->data["role_id"] == 5) {
            $table_name = "athlete_subscription_histories";
        } else {
            $table_name = "club_subscription_histories";
        }
        $result = $this->$table_name->query("SELECT (select subscription_settings.`subscription_name` from subscription_settings where subscription_settings.id=$table_name.subscription_setting_id) as sub_name,`subscription_start_date`,`subscription_end_date` FROM `$table_name`  WHERE $table_name.user_id=" . $this->request->data["user_id"] . "");
        $this->set(compact('result', 'table_name', 'user_sub_name', 'start', 'end'));
    }

    public function history_account_purchased($numParam = NULL)
    {

        $this->layout = "club_clubtab";
        $cndmake = '';
        if (!isset($numParam)) {
            $numParam = 'all';
        }
        $this->loadmodel('temp_subscriptionuserlist');
        $data1 = $this->temp_subscriptionuserlist->find(
            'all', array(
            'conditions' => array(
                'temp_subscriptionuserlist.admin_id' => $this->Session->read('Auth.User.id')
                , 'temp_subscriptionuserlist.random_id' => $this->Session->read('Auth.User.random_id')
                , 'temp_subscriptionuserlist.user_type' => 'admin_club_account_purchase')));
        $chknewuserID = array();
        $newid1 = array();
        foreach ($data1 as $key => $value) {
            foreach ($value as $key => $value1) {
                $chknewuserID[] = $value1['user_id'];
            }
        }
        $this->loadmodel('club_purchase_account');
        $this->loadmodel('Country');
        $this->loadmodel('State');
        $this->loadmodel('Sports');
        $this->loadmodel('subscription_settings');
        $subscription_settingsData = array();
        $CountryList = $this->Country->find('list', array('fields' => array('id', 'name')));
        $StateList = $this->State->find('list', array('fields' => array('id', 'name')));
        $sportData = $this->Sports->find('list', array('fields' => array('id', 'name')));
        $subscription_Data = $this->subscription_settings->find('list', array('conditions' => array('role_id' => '8'), 'fields' => array('id', 'subscription_name')));
        /*************************************************************
         *
         */
        if ($this->request->is(array('post', 'put'))) {
            //  $this->User->find('all');
            // print_r($this->request->data);echo '<br><br>'; exit;
            if (isset($this->request->data['search_order'])) {
                if ($this->request->data['search_order']['searchUser'] != '') {
                    //$Usrdata = $this->news->find('all',array('conditions'=>array('news.searching_keywords LIKE'=>'%'.$key.'%')));
                    $cndmake .= "((`users`.`username`  LIKE '%" . $this->request->data['search_order']['searchUser'] . "%')OR (`users`.`firstname`  LIKE '%" . $this->request->data['search_order']['searchUser'] . "%')OR (`users`.`lastname`  LIKE '%" . $this->request->data['search_order']['searchUser'] . "%'))";
                }
                if ($this->request->data['search_order']['orderby'] != '') {
                    $ordMake = 'Y';
                    $options['order'] = array('users.' . $this->request->data['search_order']['orderby'] . ' ASC');
                }
            }

            if (isset($this->request->data['search'])) {

                if ($this->request->data['search']['country_id'] != '') {
                    $cndmake .= "`users`.`country_id` = '" . $this->request->data['search']['country_id'] . "' AND ";

                }
                if ($this->request->data['search']['sport_id'] != '') {
                    $cndmake .= "`users`.`sport_id` = '" . $this->request->data['search']['sport_id'] . "' AND ";


                }
                if ($this->request->data['search']['subscription_setting_id'] != '') {
                    $cndmake .= "`users`.`subscription_setting_id` = '" . $this->request->data['search']['subscription_setting_id'] . "' AND ";


                }
                if ($this->request->data['search']['range'] != '') {
                    $range = $this->request->data['search']['year'] . '-' . $this->request->data['search']['month'];
                    if ($this->request->data['search']['range'] == 'start') {

                        $range = $range . '-01';
                        $cndmake .= "`users`.`subscription_start_date` >= '" . $range . "' AND ";
                    } else {
                        $range = $range . '-31';
                        $cndmake .= "`users`.`subscription_end_date` <= '" . $range . "' AND ";
                    }

                }
                if ($this->request->data['search']['online_status'] != '') {
                    $cndmake .= "`users`.`online_status` = '" . $this->request->data['search']['online_status'] . "' AND ";

                }
                if ($this->request->data['search']['pay_status'] != '') {

                    $cndmake .= "`club_purchase_account`.`payment_status` = '" . $this->request->data['search']['pay_status'] . "' AND ";


                }
                $cndmake = substr($cndmake, 0, -4);
            }

        }
        //  pr($cndmake);exit;

        /**************************************************************
         *
         */


        if (!isset($ordMake)) {
            $options['order'] = array('club_purchase_account.created  DESC');
        }


        if ($numParam == 'all') {
            $options['conditions'] = array(
                $cndmake,
                'users.delete_status' => 'N',
                'users.verification_status' => 'T',
                'users.block' => 'N',
                'club_purchase_account.randm_key !=' => '',
                'clubuser_id' => $this->Session->read('Auth.User.id')

            );
        } else if ($numParam == 'last') {

            /*********************************************************
             * MIMP Query:-  select * from (select * from club_purchase_accounts ORDER BY id DESC) AS x GROUP BY `clubuser_id`
             */


            $IDDataOP = $this->club_purchase_account->query("select id from (select * from club_purchase_accounts ORDER BY id DESC) AS ids GROUP BY `clubuser_id`");

            foreach ($IDDataOP as $valueIds) {
                $collIds[] = $valueIds['ids']['id'];
            }
            $options['conditions'] = array(
                $cndmake,
                'users.delete_status' => 'N',
                'users.verification_status' => 'T',
                'users.block' => 'N',
                'club_purchase_account.randm_key !=' => '',
                'club_purchase_account.id =' => $collIds

            );


        }
        $options['joins'] = array(
            array(
                'table' => 'users',
                'alias' => 'users',
                'type' => 'INNER',
                'conditions' => array(
                    'club_purchase_account.clubuser_id = users.id'
                )
            ),
            array(
                'table' => 'club_settings',
                'alias' => 'club_settings',
                'type' => 'INNER',
                'conditions' => array(
                    'club_purchase_account.club_setting_id = club_settings.id'
                )
            ),


            array(
                'table' => 'user_payments',
                'alias' => 'user_payments',
                'type' => 'LEFT',
                'conditions' => array(
                    'club_purchase_account.randm_key = user_payments.randm_key',
                )
            ),
        );

        $options['fields'] = array(
            'club_purchase_account.id', 'club_purchase_account.randm_key', 'club_purchase_account.clubuser_id',
            'club_purchase_account.club_setting_id', 'club_purchase_account.accounts',
            'club_purchase_account.payment_status', 'club_purchase_account.mode_of_purchase', 'club_purchase_account.disable_accounts',
            'club_purchase_account.total_balance', 'club_purchase_account.invoice_no',
            'club_purchase_account.created', 'users.id', 'users.username', 'users.firstname',
            'users.lastname', 'users.email', 'users.country_id', 'users.state_id', 'users.image',
            'users.subscription_setting_id', 'users.subscription_start_date', 'users.subscription_end_date',
            'users.online_status', 'users.verification_status', 'users.delete_status', 'users.block', 'club_settings.id',
            'club_settings.name', 'club_settings.200_total', 'club_settings.300_total', 'club_settings.500_total',
            'club_settings.1000_total',
            'user_payments.id', 'user_payments.randm_key', 'user_payments.user_id',
            'user_payments.pay_for', 'user_payments.amount', 'user_payments.date'
        );

        $fetchAll = $this->club_purchase_account->find('all', $options);
        //$this->getLastQuery('club_purchase_account'); exit;
        // pr($fetchAll);echo'<br><br><br><br>';exit;
        $this->set(compact('CountryList', 'StateList', 'sportData', 'subscription_Data', 'fetchAll', 'numParam', 'chknewuserID'));
    }

    public function search_by_staff_log()
    {

        $this->layout = 'ajax';
        $this->loadModel('ClubOperatorAssignAccessLevel');
        $this->loadModel('User');
        $this->loadModel('userlogins');
        $this->loadModel('club_operator_assign_access_levels');
        // $result=$this->User->find('all');

        $allData1 = $this->ClubOperatorAssignAccessLevel->getUserList($this->Session->read('Auth.User.id'));
        if ($this->request->data["value"] == "current_log") {

            $conditions["conditions"] = array('User.id' => $allData1, 'User.online_status' => 'Y');

        } else if ($this->request->data["value"] == "logged_today") {

            $dateToday = Date('Y-m-d');
            $conditions["conditions"] = array('User.id' => $allData1, 'userlogins.created' => $dateToday);

        } else if ($this->request->data["value"] == "logged_three_day") {
            $dateToday = Date('Y-m-d', strtotime("-3 days"));
            $conditions["conditions"] = array('User.id' => $allData1, 'userlogins.created >=' => $dateToday);
        } else if ($this->request->data["value"] == "logged_last_week") {

            $dateToday = Date('Y-m-d', strtotime("-7 days"));
            $conditions["conditions"] = array('User.id' => $allData1, 'userlogins.created >=' => $dateToday);

        } else if ($this->request->data["value"] == "all_staff") {

            $conditions["conditions"] = array('User.id' => $allData1);
        }

        $userId = $this->User->getSearchStaffLog($conditions);
        $club_co_admin = array();
        $club_operator = array();
        $club_operator_Pusharray = array();
        $club_co_admin_Pusharray = array();
        foreach ($userId as $row) {

            $club_operator["image"] = $row["User"]["image"];
            $club_operator["firstname"] = $row["User"]["firstname"];
            $club_operator["lastname"] = $row["User"]["lastname"];
            $club_operator["name"] = $row["User"]["username"];
            $club_operator["user_id"] = $row["User"]["id"];
            $club_co_admin["image"] = $row["User"]["image"];
            $club_co_admin["name"] = $row["User"]["username"];
            $club_co_admin["firstname"] = $row["User"]["firstname"];
            $club_co_admin["lastname"] = $row["User"]["lastname"];
            $club_co_admin["user_id"] = $row["User"]["id"];
            $club_co_admin["club_subadmins_id"] = $row["club_operator_assign_access_levels"]["id"];
            array_push($club_operator_Pusharray, $club_operator);
            array_push($club_co_admin_Pusharray, $club_co_admin);
        }

        $UserListArray["club_operator"] = $club_operator_Pusharray;
        $UserListArray["club_co_admin"] = $club_co_admin_Pusharray;
        $this->set(compact('UserListArray'));

    }

    public function search_by_staff_log_comment()
    {

        $this->layout = 'ajax';
        $this->autoRender = false;
        $this->loadModel('ClubOperatorAssignAccessLevel');
        $this->loadModel('User');
        $allData = $this->ClubOperatorAssignAccessLevel->getUserList($this->Session->read('Auth.User.id'));
        $club_co_admin = array();
        $club_operator = array();
        $club_operator_Pusharray = array();
        $club_co_admin_Pusharray = array();
        foreach ($allData as $row) {

            $club_operator["image"] = $row["User"]["image"];
            $club_operator["name"] = $row["User"]["username"];
            $club_operator["id"] = $row["User"]["id"];
            $club_co_admin["image"] = $row["User"]["image"];
            $club_co_admin["name"] = $row["User"]["username"];
            $club_co_admin["id"] = $row["User"]["id"];

            array_push($club_operator_Pusharray, $club_operator);
            array_push($club_co_admin_Pusharray, $club_co_admin);
        }

        $UserListArray["club_operator"] = $club_operator_Pusharray;
        $UserListArray["club_co_admin"] = $club_co_admin_Pusharray;
        $this->set(compact('UserListArray'));
    }

    public function identificationDevice($id = null)
    {

        $this->layout = "country_basic_layout";
        $this->loadmodel('card_colornames');
        $this->loadmodel('card_pricelists');
        $this->loadmodel('card_types');
        $this->loadmodel('language_values');

        $languageDetl = $this->language_values->find('list', array('fields' => array('id', 'lang_name')));
        $this->set(compact('languageDetl'));

        $chk = $this->club_pricelist_identification_cards_checkdata();
        if ($chk) {

            $card_clr = $this->card_colornames->find('list', array('fields' => array('id', 'var_name')));
            $card_type = $this->card_types->find('list', array('fields' => array('id', 'name')));
            $newMainAry = array();
            $newClrAry = array();
            $card_priceList = $this->card_pricelists->find('all');
            foreach ($card_priceList as $key2 => $value2) {
                // pr($value2);echo'<br><br>***************<br><Br>';//exit;
                $nmeClr = $card_clr[$value2['card_pricelists']['card_colorname_id']];
                $nmeTyp = $card_type[$value2['card_pricelists']['card_type_id']];
                //  pr($nmeClr);echo'<br><br>***************<br><Br>';//exit;
                //  pr($nmeTyp);echo'<br><br>***************<br><Br>';exit;
                $newMainAry[$nmeClr][$nmeTyp] = $value2['card_pricelists'];
            }
            //pr($newMainAry);exit;
            $card_priceList = $newMainAry;
            $this->request->data = $card_priceList;
            // pr($card_priceList);exit;
            $this->set(compact('card_priceList'));

            /******************** Third Party pricelist data ****************************/
            $this->loadmodel('ClubThirdpartyMessage');
            $third_party_msgDta = $this->ClubThirdpartyMessage->find('all');
            //pr($third_party_msgDta[0]['ClubThirdpartyMessage']);exit;
            $this->request->data['club_third_party']['message'] = unserialize($third_party_msgDta[0]['ClubThirdpartyMessage']['message']);
            $this->request->data['club_third_party']['club_third_party_enable_msg'] = $third_party_msgDta[0]['ClubThirdpartyMessage']['enable_msg'];
            $this->request->data['club_third_party']['id'] = $third_party_msgDta[0]['ClubThirdpartyMessage']['id'];

            //  pr($third_party_msgDta);exit;
            // $this->loadmodel('ThirdpartyPricelist');
            $this->loadmodel('ThirdpartyPricelist');
            $third_priceList = $this->ThirdpartyPricelist->find('all');
            foreach ($third_priceList as $key_third => $value_third) {
                $nmeTyp_third = $card_type[$value_third['ThirdpartyPricelist']['card_type_id']];
                $newMainAry_third[$nmeTyp_third] = $value_third['ThirdpartyPricelist'];
            }
            //   pr($third_priceList);exit;
            $third_priceList = $newMainAry_third;
            $this->request->data['thirdPartyPriceListDta'] = $third_priceList;
            $this->set(compact('third_priceList'));
            $this->set('club_id', $id);
        }

    }

    public function otherPriceVesions($id, $sName = null)
    {

        $this->layout = 'basic_layout';
        $this->loadModel('Club');
        $singleSubsData = $this->Club->getClubPriceVesions($sName);
        $this->request->data = $singleSubsData;
        $this->set('singleSubsData', $singleSubsData);
        $this->set('sName', $sName);
        $this->set('club_id', $id);
    }

    public function optionalModules($id = null)
    {

        $this->layout = 'country_basic_layout';

        $this->loadmodel('ManagementInfo');
        $this->loadmodel('ManagementLanguage');
        $this->loadmodel('Language_value');
        $mangInfo = $this->ManagementInfo->getManagementInfo();
        $language_id = $this->getLangId();
        $langValue = $this->Language_value->getLanguageListById($language_id);
        for ($i = 0; $i < count($mangInfo); $i++) {
            //            $cryID = $this->cryptUrl($mangInfo[$i]['ManagementInfo']['id']);
            //            $mangInfo[$i]['ManagementInfo']['enc_ID'] = $cryID;
            $langDetails = $this->ManagementLanguage->getlanguageInfo($mangInfo[$i]['ManagementInfo']['id'], $langValue[0]['Language_value']['lang_name']);
            if ($langDetails[0]['ManagementLanguage'][$langValue[0]['Language_value']['lang_name']] != '') {
                $mangInfo[$i]['ManagementInfo']['feature_value'] = $langDetails[0]['ManagementLanguage'][$langValue[0]['Language_value']['lang_name']];
            } else {
                $mangInfo[$i]['ManagementInfo']['feature_value'] = '';
            }
        }
        $this->set(compact('mangInfo'));
        $this->set('club_id', $id);
    }

    public function priceAccount($id = null)
    {

        $this->layout = 'country_basic_layout';
        $this->loadModel('ClubSetting');
        $AllData = $this->ClubSetting->getAllClubPriceVesions();
        $this->request->data = $AllData;
        $this->set('AllData', $AllData);
        $this->set('club_id', $id);
        //pr($AllData); exit;

        // $this->loadModel('Subscription_setting');

    }

    public function clubFeature($id = null)
    {

        $this->layout = 'country_basic_layout';
        $this->loadModel('Subscription_setting');
        $getQuery = $this->Subscription_setting->getClubFeatureRecord($id);

        $this->set('getQuery', $getQuery);
        $this->set('club_id', $id);
    }

    public function device_info_club()
    {

        //if($this->RequestHandler->isAjax()) {

        $this->layout = 'club_clubtab';
        $this->loadModel('Club');
        $this->loadModel('User');
        $this->loadModel('Device');
        $this->loadModel('DeviceLog');
        $this->loadModel('Countries');
        $this->loadModel('states');

        $cond = array(
            'Device.club_id' => $this->Session->read('Auth.Club.id'),
            'Device.delete_status' => 0,
            //'Device.block_status'       => 0,
            'Device.disabled_status !=' => 2
        );
        //pr($cond);exit;

        $this->Device->Club->User->unbindModel(
            array(
                'belongsTo' => array('Role', 'Sport', 'SubscriptionSetting', 'Race'),
                'hasMany' => array(
                    'admin_setting_for_users', 'Post', 'trackVisitor', 'Operator', 'Club', 'Athlete', 'Coach',
                    'Team', 'Club_subscription_histories', 'Banner', 'SocialProfile', 'ClubMember',
                    'ClubOperatorAssignAccessLevel', 'userlogin'),
                'hasOne' => array('Profile')
            ));
        $logData = $this->DeviceLog->getDeviceLogData($this->Session->read('Auth.Club.id'));
        $device_data = $this->Device->find(
            'all', array(
            'conditions' => $cond,
            'recursive' => 3
        ));
        //monika 0/8/05/2020
        $main_data = $this->Device->find(
            'all', array(
            'conditions' => $cond,
            'recursive' => 3,
            'limit' => 1,
        ));


        $club = $this->Club->getFunctionById($this->Session->read('Auth.Club.id'));

        $country = $this->Countries->find(
            "first", array(
            "fields" => array("Countries.name"),
            "conditions" => array("Countries.id" => $club['User']['country_id'])
        ));

        $state = $this->states->find(
            "first", array(
            "fields" => array("states.name"),
            "conditions" => array("states.id" => $club['User']['state_id'])
        ));
        $club_id = $this->Session->read('Auth.Club.id');

        if ($this->request->is('post')) {


            $user_id = $this->Session->read('Auth.User.id');
            $data = $this->request->data;

            //print_r($data);
            $access_control = '0';
            if ($data['access_control']) {
                $access_control = '1';
            }

            $access_contol_secondary = '0';
            if ($data['access_contol_secondary']) {
                $access_contol_secondary = '1';
            }

            $reader = json_encode($data['reader']);
            if ($this->User->saveAccessControl($user_id, $access_control, $access_contol_secondary, $reader))
                // $this->Session->setFlash('Access control data Added successfully..');


                // echo '<pre>';
                // print_r($data);
                // die;
                $user_id = $this->Session->read('Auth.User.id');
            $getrecord = $this->User->getAccessControlPanel($user_id);
            $getrecord[0]['access_control_panel']['reader'] = json_decode($getrecord[0]['access_control_panel']['reader']);
        }

        $this->set(compact('device_data', 'club', 'country', 'state', 'logData', 'club_id', 'main_data', 'getrecord'));
        //}
    }

    public function suspendClubDevice()
    {
        $this->loadModel('Device');
        if ($this->RequestHandler->isAjax()) {

            $this->layout = 'ajax';
            $this->Device->updateAll(array('Device.delete_status' => 'status'), array('Device.id' => $this->request->data['device_id']));
            echo "1";
            exit;
        }

        //        var enable_value=$('#enable_value_id').val();
        //           alert(enable_value);
        //           return false;
    }

    public function ajax_enable_device()
    {
        $this->layout = "ajax";
        $this->autoRender = false;
        $this->loadModel('Device');
        $data['Device']['id'] = $this->request['data']['current_device_id'];
        $data['Device']['disabled_status'] = 1;

        if ($this->Device->save($data)) {
            echo "successfully enable";

        } else {
            echo "fail to enable";

        }
        exit;

    }

    public function ajax_send_message()
    {

        $this->layout = "ajax";
        $this->autoRender = false;
        if ($this->request->is('post')) {

            $postData = $this->request->data;

            if (!empty($postData['message_text'])) {

                // Save mail for club admin
                $this->loadModel('message');
                $this->request->data['message']['sender_id'] = $this->Session->read('Auth.User.id');
                $this->request->data['message']['reciver_id'] = $postData['admin_id'];
                $this->request->data['message']['message_body'] = $postData['message_text'];
                $this->request->data['message']['sending_time'] = date('Y-m-d H:i:s');
                $this->request->data['message']['replay_to'] = '0';
                //pr($this->request->data); exit;
                $this->message->create();

                if ($this->message->save($this->request->data['message'])) {

                    echo '1';
                    exit;
                }
            }


            echo '0';
            exit;
        }
    }

    public function ajax_enable_current_pc()
    {
        $this->layout = "ajax";
        $this->autoRender = false;
        $this->loadModel('Device');
        $data['Device']['id'] = $this->request['device_id'];
        $data['Device']['disabled_status'] = 1;

        if ($this->Device->save($data)) {
            echo "successfully enable";

        } else {
            echo "fail to enable";

        }
        exit;

    }

    public function manage_cards()
    {

        $this->layout = 'club_clubtab';
        $magnetic_cards_count = $this->getCardsCount(
            'card_magnetic_pools'
        );

        $rfidbadge_cards_count = $this->getCardsCount(
            'card_rfidbadges_pools'
        );

        $rfidbracelet_cards_count = $this->getCardsCount(
            'card_rfidbracelets_pools'
        );

        $smartcard_cards_count = $this->getCardsCount(
            'card_smartcards_pools'
        );

        $this->set(compact('magnetic_cards_count', 'rfidbadge_cards_count', 'rfidbracelet_cards_count', 'smartcard_cards_count'));

    }

    public function ajaxManagementInfo()
    {
        $this->layout = 'ajax';
        if ($this->request->is('post')) {

            $postData = $this->request->data;
            $langId = $postData['lang_id'];
            $page_name = $postData['section_name'];
            $page_value = $postData['section_value'];

            $this->loadModel('language_values');
            $langs = $this->language_values->find(
                'list', array(
                'fields' => array('id', 'lang_name')
            ));

            $langText = (!empty($langs[$langId])) ? $langs[$langId] : 'en';

            $this->set('all_lang', $this->viewVars['languages']);

            $this->loadModel('ManagementInformationSection');
            $this->loadModel('ManagementInformation');

            $fetch_data = $this->ManagementInformationSection->find(
                'all', array(
                'conditions' => array(
                    'language_id' => $langId
                ),
                'order' => array('ManagementInformationSection.id ASC')
            ));

            $first_data = $this->ManagementInformationSection->find(
                'first', array(
                'conditions' => array(
                    'language_id' => $langId
                ),
                'order' => array('ManagementInformationSection.id ASC'),
                'fields' => array('ManagementInformationSection.section_name', 'ManagementInformationSection.id')
            ));

            $description_data = $this->ManagementInformation->find(
                'first', array(
                'conditions' => array(
                    'module' => $page_value,
                    'management_information_section_id' => $first_data['ManagementInformationSection']['id']
                ),
                'fields' => array('ManagementInformation.info')
            ));
            $data_extract = unserialize(base64_decode($description_data['ManagementInformation']['info']));
            $description = $data_extract[$langText];
            $section_name = $first_data['ManagementInformationSection']['section_name'];
            $section_id = $first_data['ManagementInformationSection']['id'];


            $this->set(compact('fetch_data', 'description', 'section_name', 'section_id', 'page_name'));
        }
    }

    public function ajax_management_info_data()
    {
        $this->layout = "ajax";
        $this->autoRender = false;
        if ($this->request->is('post')) {

            $postData = $this->request->data;
            $infoid = $postData['infoid'];
            $page_value = $postData['section_value'];
            $lang_id = $postData['lang_id'];

            $this->loadModel('language_values');
            $langs = $this->language_values->find(
                'list', array(
                'fields' => array('id', 'lang_name')
            ));

            $langText = (!empty($langs[$lang_id])) ? $langs[$lang_id] : 'en';

            $this->loadModel('ManagementInformationSection');
            $this->loadModel('ManagementInformation');

            $description_data = $this->ManagementInformation->find(
                'first', array(
                'conditions' => array(
                    'module' => $page_value,
                    'management_information_section_id' => $infoid
                ),
                'fields' => array('ManagementInformation.info')
            ));

            $data_extract = unserialize(base64_decode($description_data['ManagementInformation']['info']));
            $description = $data_extract[$langText];
            if (!empty($description)) {
                echo $description;
                exit;
            }
        }

        echo '0';
        exit;
    }

    public function cardToAssign($page = null, $type = null)
    {
        $this->layout = 'club_clubtab';
        if (!isset($page)) {
            $prm_page = 'members';
        } else {
            $prm_page = $page;
        }

        if (!isset($type)) {
            $prm_type = 'magnetic';
        } else {
            $prm_type = $type;
        }

        $userid = $this->Session->read('Auth.User.id');

        switch ($prm_type) {

            case 'magnetic' :
                $tblFtchName = 'card_magnetic_pools';
                if ($prm_page == "operators") {
                    $secndTblFetch = 'cards_operater_pool_allocations';
                    $cnd_id_name = 'card_type_id';
                } else {
                    $secndTblFetch = 'card_magnetic_pool_allocations';
                    $cnd_id_name = 'card_magneticpool_id';
                }
                $optfields = array(
                    'block_magnetic', 'block_magneticbadge_date', 'block_magneticbadge_range_from1',
                    'block_magneticbadge_range_to1', 'block_magneticbadge_range_from2',
                    'block_magneticbadge_range_to2');
                break;


            case 'rfidbadge' :
                $tblFtchName = 'card_rfidbadges_pools';
                if ($prm_page == "operators") {
                    $secndTblFetch = 'cards_operater_pool_allocations';
                    $cnd_id_name = 'card_type_id';
                } else {
                    $secndTblFetch = 'card_rfidbadges_pool_allocations';
                    $cnd_id_name = 'card_rfidbadgespool_id';
                }

                $optfields = array(
                    'block_rfidbadges', 'block_rfidbadge_date', 'block_rfidbadge_range_from1',
                    'block_rfidbadge_range_to1', 'block_rfidbadge_range_from2',
                    'block_rfidbadge_range_to2');
                break;

            case 'rfidbracelet' :
                $tblFtchName = 'card_rfidbracelets_pools';
                if ($prm_page == "operators") {
                    $secndTblFetch = 'cards_operater_pool_allocations';
                    $cnd_id_name = 'card_type_id';
                } else {
                    $secndTblFetch = 'card_rfidbracelets_pool_allocations';
                    $cnd_id_name = 'card_rfidbraceletspool_id';
                }

                $optfields = array(
                    'block_rfidbracelets',
                    'block_rfidbracelets_date',
                    'block_rfidbracelets_range_from1',
                    'block_rfidbracelets_range_to1',
                    'block_rfidbracelets_range_from2',
                    'block_rfidbracelets_range_to2'
                );
                break;

            case 'smartcard' :
                $tblFtchName = 'card_smartcards_pools';
                if ($prm_page == "operators") {
                    $secndTblFetch = 'cards_operater_pool_allocations';
                    $cnd_id_name = 'card_type_id';
                } else {
                    $secndTblFetch = 'card_smartcards_pool_allocations';
                    $cnd_id_name = 'card_smartcardspool_id';
                }
                $optfields = array(
                    'block_smartcards', 'block_smartcards_date', 'block_smartcards_range_from1',
                    'block_smartcards_range_to1', 'block_smartcards_range_from2',
                    'block_smartcards_range_to2');
                break;
        }

        $this->loadModel($tblFtchName);
        $this->loadModel($secndTblFetch);

        $tblcnd = '';
        $expirecondi = '';
        $curdate = date('Y-m-d');


        $members_list = $operators_list = array();
        if ($prm_page == "operators") {

            $club_operators = $this->club_operators->find(
                "list", array(
                'conditions' => array(
                    'club_operators.clubadmin_id' => $this->Session->read('Auth.User.id'),
                ),
                'fields' => array('id', 'user_id')
            ));

            $operators_list = $this->users->find(
                'list', array(
                'conditions' => array(
                    "users.id" => $club_operators,
                ),
                'fields' => array('id', 'username')
            ));

        } else {

            $club_members = $this->club_members->find(
                "list", array(
                'conditions' => array(
                    'club_members.club_id' => $this->Session->read('Auth.Club.id'),
                ),
                'fields' => array('id', 'user_id')
            ));

            $members_list = $this->users->find(
                'list', array(
                'conditions' => array(
                    "users.id" => $club_members,
                ),
                'fields' => array('id', 'username')
            ));
        }

        $assignCardLists = array();
        switch ($prm_page) {

            case 'card_replace' :

                $assignCardLists = $this->$secndTblFetch->find(
                    "list", array(
                    "conditions" => array(
                        $secndTblFetch . '.expiry_date < ' => $curdate,
                        $secndTblFetch . '.user_id ' => $club_members,
                    ),
                    "fields" => array("user_id", "unique_id")
                ));

                $assignCardLists = array_unique($assignCardLists);
                $expirecondi = $secndTblFetch . '.expiry_date < ' . $curdate;
                $tblcnd = $tblFtchName . '.enable = "Y"';
                break;
        }

        $limts = array('limit' => 10);
        $options = array(
            'conditions' => array(
                $tblFtchName . '.clubuser_id' => $this->Session->read('Auth.User.id'),
                $tblFtchName . '.assigned_status' => "N",
                $tblcnd
            ),
            'joins' => array(
                array(
                    'table' => $secndTblFetch,
                    'alias' => $secndTblFetch,
                    'type' => 'LEFT',
                    'conditions' => array(
                        $tblFtchName . '.id = ' . $secndTblFetch . '.' . $cnd_id_name,
                        $tblFtchName . '.unique_id = ' . $secndTblFetch . '.unique_id',
                        $expirecondi,
                    )
                ),
                array(
                    'table' => 'users',
                    'alias' => 'users',
                    'type' => 'LEFT',
                    'conditions' => array(
                        $secndTblFetch . '.user_id = users.id',
                    )
                )
            ),
            'fields' => array(
                $tblFtchName . '.id', $tblFtchName . '.unique_id', $tblFtchName . '.card_colorname_id', $tblFtchName . '.clubuser_id',
                $tblFtchName . '.user_id', $tblFtchName . '.invoice_no', $tblFtchName . '.randm_key', $tblFtchName . '.card_purchase_id',
                $tblFtchName . '.enable', $tblFtchName . '.assigned_status', $tblFtchName . '.suspended_status', $tblFtchName . '.suspended_date',
                $tblFtchName . '.created', $tblFtchName . '.modified',
                $secndTblFetch . '.id', $secndTblFetch . '.user_id', $secndTblFetch . '.start_date', $secndTblFetch . '.expiry_date',
                'users.id', 'users.username', 'users.firstname', 'users.lastname'
            )
        );

        $optionWithLimit = array_merge($options, $limts);
        $this->Paginator->settings = $optionWithLimit;
        $fetch_details = $this->Paginator->paginate($tblFtchName);
        foreach ($fetch_details as $key => $value) {

            $clubUserId = $value[$tblFtchName]['clubuser_id'];
            $getUserSubType = $this->User->getUserSubscriptionsettingType($clubUserId);
            $fetch_details[$key]['club_idcard_payterms'] = $getUserSubType['club_idcard_payterms'];
        }

        $cardAssign = array();

        $this->loadModel("admin_setting_for_users");
        $fetch_admin_settings = $this->admin_setting_for_users->find(
            'first', array(
            'conditions' => array(
                'admin_setting_for_users.user_id' => $this->Session->read('Auth.User.id')
            ),
            'fields' => $optfields,
            'limit' => '1',
            "order" => array('admin_setting_for_users.id  DESC')
        ));
        $fetch_block_Dtail = $fetch_admin_settings['admin_setting_for_users'];
        $block_by_admin = 'N';
        $block_admin_date = '';
        $block_admin_from1 = '0';
        $block_admin_to1 = '0';
        $block_admin_from2 = '0';
        $block_admin_to2 = '0';

        if ($fetch_block_Dtail[$optfields[0]] == 'Y' && !empty($fetch_details)) {
            $block_by_admin = 'Y';
            $block_admin_date = $fetch_block_Dtail[$optfields[1]];
            $block_admin_from1 = empty($fetch_block_Dtail[$optfields[2]]) ? '0' : $fetch_block_Dtail[$optfields[2]];
            $block_admin_to1 = empty($fetch_block_Dtail[$optfields[3]]) ? '0' : $fetch_block_Dtail[$optfields[3]];
            $block_admin_from2 = empty($fetch_block_Dtail[$optfields[4]]) ? '0' : $fetch_block_Dtail[$optfields[4]];
            $block_admin_to2 = empty($fetch_block_Dtail[$optfields[5]]) ? '0' : $fetch_block_Dtail[$optfields[5]];
        }

        $this->set(compact("prm_page", "prm_type", "fetch_details", "tblFtchName", "secndTblFetch"));
        $this->set(compact("block_by_admin", "block_admin_date", "block_admin_to1", "block_admin_from2", "block_admin_to2", "block_admin_from1", "cardAssign", "members_list", "userid", "assignCardLists", "operators_list"));
    }

    public function ajax_get_member_data()
    {
        $this->layout = "ajax";

        if ($this->request->is("post")) {

            $postData = $this->request->data;

            switch ($postData['param']) {

                case 'magnetic' :
                    $secndTblFetch = 'card_magnetic_pool_allocations';
                    $cnd_id_name = 'card_magneticpool_id';
                    break;

                case 'rfidbadge' :
                    $secndTblFetch = 'card_rfidbadges_pool_allocations';
                    $cnd_id_name = 'card_rfidbadgespool_id';
                    break;

                case 'rfidbracelet' :
                    $secndTblFetch = 'card_rfidbracelets_pool_allocations';
                    $cnd_id_name = 'card_rfidbraceletspool_id';
                    break;

                case 'smartcard' :
                    $secndTblFetch = 'card_smartcards_pool_allocations';
                    $cnd_id_name = 'card_smartcardspool_id';
                    break;
            }
            $this->loadModel($secndTblFetch);

            $curdate = date('Y-m-d');
            $cardData = $this->$secndTblFetch->find(
                "first", array(
                'conditions' => array(
                    "user_id" => $postData['user_id'],
                    "unique_id" => $postData['card_id'],
                    "expiry_date <" => $curdate
                ),
                'fields' => array("start_date", "expiry_date", "user_id", "unique_id")
            ));

            $unique_id = $startDate = $expireDate = "";
            $userData = array();

            if (!empty($cardData)) {


                $unique_id = $cardData[$secndTblFetch]['unique_id'];
                $startDate = $cardData[$secndTblFetch]['start_date'];
                $expireDate = $cardData[$secndTblFetch]['expiry_date'];
                $userData = $this->User->fetchLimitedFields($cardData[$secndTblFetch]['user_id']);

                $Idpayterms = $this->User->getUserSubscriptionsettingType($this->Session->read('Auth.User.id'));

                $userData = $userData["User"];
            }
            $this->set(compact("startDate", "expireDate", "userData", "unique_id", "Idpayterms"));

        }


    }

    public function feedbacks()
    {
        $this->layout = 'basic_layout';
    }

    public function closeManagementSection()
    {
        $this->layout = "ajax";
        $this->autoRender = false;

        if ($this->request->is(array("put", "post"))) {

            if ($this->Session->check('management_section_open')) {

                unset($_SESSION['management_section_open']);
                echo "1";
                exit;
            } else if (!empty($_COOKIE['management'])) {

                $mgCode = $_COOKIE['management'];
                $cbID = $this->Session->read('Auth.Club.id');
                $this->loadModel("Device");
                $deviceCount = $this->Device->getEnableDeviceFirst($cbID, $mgCode);
                $this->Device->id = $deviceCount['Device']['id'];
                if ($this->Device->save(array("code_status" => 0))) {

                    echo "1";
                    exit;
                }

            }

            echo "0";
            exit;
        }
    }

    public function show_ajax_document_index_list()
    {
        $this->layout = "ajax";
        $this->loadModel("HtmlPageChapter");

        if ($this->request->is("post")) {

            $postData = $this->request->data;
            $pagename = $postData['pagename'];
            $pageid = $postData['pg_id'];

            $languageDetl = $this->language_values->find(
                'first', array(
                'conditions' => array(
                    'id' => $postData['lang_id']
                ),
                'fields' => array('id', 'lang_name')
            ));

            $this->loadModel("help_html_pages");
            $helpHtmlPages = $this->help_html_pages->find(
                'first', array(
                'conditions' => array(
                    'id' => $pageid,
                    'lang_id' => $postData['lang_id']
                ),
                'fields' => array('id', 'content', 'enable_document')
            ));

            $enabled = $helpHtmlPages['help_html_pages']['enable_document'];
            $content = $helpHtmlPages['help_html_pages']['content'];
            $documentsIndex = $this->HtmlPageChapter->getByHtmlPageId($pageid);

            $this->set(compact("languageDetl", "pagename", "pageid", "documentsIndex", "enabled", "content"));
        }
    }

    public function ajaxDeleteChapter()
    {
        $this->layout = "ajax";
        $this->autoRender = false;
        $this->loadModel("HtmlPageChapter");
        $this->loadModel("HtmlPageChapterLink");

        if ($this->request->is("post")) {
            $postId = $this->request->data['id'];

            if (!empty($postId)) {

                $links = $this->HtmlPageChapterLink->getByIds($postId);

                $this->HtmlPageChapter->id = $postId;
                if ($this->HtmlPageChapter->delete()) {

                    if (!empty($links)) {
                        $this->HtmlPageChapterLink->deleteAll($links);
                    }

                    echo "1";
                    exit;
                }
            }

            echo "0";
            exit;
        }
    }

    public function ajaxEnableDocumentIndex()
    {
        $this->layout = "ajax";
        $this->autoRender = false;
        $this->loadModel("help_html_pages");

        if ($this->request->is("post")) {

            $postData = $this->request->data;

            $htmlpage = $this->help_html_pages->find(
                "first", array(
                'conditions' => array(
                    "help_html_pages.id" => $postData['pageid']
                )
            ));

            $this->help_html_pages->id = $htmlpage['help_html_pages']['id'];
            if ($this->help_html_pages->save(array('enable_document' => $postData['enabled']))) {
                echo "1";
                exit;
            }

            echo "0";
            exit;

        }
    }

    public function ajaxDeleteChapterLink()
    {
        $this->layout = "ajax";
        $this->autoRender = false;
        $this->loadModel("HtmlPageChapterLink");

        if ($this->request->is("post")) {

            $postId = $this->request->data['id'];

            if (!empty($postId)) {

                $this->HtmlPageChapterLink->id = $postId;
                if ($this->HtmlPageChapterLink->delete()) {
                    echo "1";
                    exit;
                }
            }

            echo "0";
            exit;
        }
    }

    public function addHtmlPageChapter()
    {
        $this->layout = "ajax";
        $this->autoRender = false;
        $this->loadModel("HtmlPageChapter");

        if ($this->request->is("post")) {

            $postData = $this->request->data;

            //Check if image has been uploaded
            if (!empty($postData['HtmlPageChapter']['upload_icon']['name'])) {
                $file = $postData['HtmlPageChapter']['upload_icon']; //put the data into a var for easy use

                $ext = substr(strtolower(strrchr($file['name'], '.')), 1);
                //get the extension

                $arr_ext = array('jpg', 'jpeg', 'gif', 'png', 'PNG'); //set allowed extensions

                //only process if the extension is valid
                if (in_array($ext, $arr_ext)) {

                    $baseFile = basename($file['name'], "." . $ext);
                    $orgFileName = $baseFile . "_" . time() . "." . $ext;

                    //do the actual uploading of the file. First arg is the tmp name, second arg is
                    //where we are putting it
                    $path = WWW_ROOT . 'img/html_document_image/';
                    move_uploaded_file($file['tmp_name'], $path . $orgFileName);

                    //prepare the filename for database entry
                    $postData['HtmlPageChapter']['upload_icon'] = $orgFileName;
                }
            } else {
                $postData['HtmlPageChapter']['upload_icon'] = "";
            }

            if ($this->HtmlPageChapter->save($postData)) {
                echo "1";
                exit;
            }

            echo "0";
            exit;
        }
    }

    public function addHtmlPageChapterLink()
    {
        $this->layout = "ajax";
        $this->autoRender = false;
        $this->loadModel("HtmlPageChapterLink");

        if ($this->request->is("post")) {

            $postData = $this->request->data;

            if (!empty($postData['HtmlPageChapterLink']['links'])) {

                $postData['HtmlPageChapterLink']['link'] = $postData['HtmlPageChapterLink']['links'];
                unset($postData['HtmlPageChapterLink']['links']);
            }

            if ($this->HtmlPageChapterLink->save($postData)) {
                echo "1";
                exit;
            }

            echo "0";
            exit;
        }
    }

    public function ajax_edit_chapter_data()
    {
        $this->layout = "ajax";
        $this->loadModel("HtmlPageChapter");
        $postData = $this->request->data;

        if (!empty($postData)) {

            $documentIndex = $this->HtmlPageChapter->getById($postData['id']);
            $this->set(compact("documentIndex"));
        }
    }

    public function ajax_edit_chapter_link_data()
    {
        $this->layout = "ajax";
        $this->loadModel("HtmlPageChapterLink");
        $postData = $this->request->data;


        if (!empty($postData)) {

            $documentIndex = $this->HtmlPageChapterLink->getById($postData['id']);

            $this->set(compact("documentIndex"));
        }
    }

    public function updateHtmlPageChapter($id = null)
    {
        $this->autoRender = false;
        $this->loadModel("HtmlPageChapter");
        $postData = $this->request->data;

        if (!empty($postData)) {

            $documentIndex = $this->HtmlPageChapter->getById($id);

            if (!empty($documentIndex)) {

                $this->HtmlPageChapter->id = $documentIndex['HtmlPageChapter']['id'];

                if (!empty($postData['HtmlPageChapter']['upload_icon']['name'])) {

                    $file = $postData['HtmlPageChapter']['upload_icon']; //put the data into a var for easy use

                    $ext = substr(strtolower(strrchr($file['name'], '.')), 1); //get the extension
                    $arr_ext = array('jpg', 'jpeg', 'gif', 'png', 'PNG'); //set allowed extensions

                    //only process if the extension is valid
                    if (in_array($ext, $arr_ext)) {
                        $path1 = 'img/html_document_image/';
                        $icon = $documentIndex['HtmlPageChapter']['upload_icon'];
                        if (!empty($icon) && (file_exists($path1 . $icon))) {
                            unlink($path1 . $icon);
                        }

                        $baseFile = basename($file['name'], "." . $ext);
                        $orgFileName = $baseFile . "_" . time() . "." . $ext;

                        //do the actual uploading of the file. First arg is the tmp name, second arg is
                        //where we are putting it
                        $path = WWW_ROOT . 'img/html_document_image/';
                        move_uploaded_file($file['tmp_name'], $path . $orgFileName);

                        //prepare the filename for database entry
                        $postData['HtmlPageChapter']['upload_icon'] = $orgFileName;
                    }
                } else {
                    $postData['HtmlPageChapter']['upload_icon'] = "";
                }

                if ($this->HtmlPageChapter->save($postData)) {
                    echo "1";
                    exit;
                }
            }

            echo "0";
            exit;

        }
    }

    public function updateHtmlPageChapterLink($id = null)
    {
        $this->autoRender = false;
        $this->loadModel("HtmlPageChapterLink");
        $postData = $this->request->data;


        if (!empty($postData)) {

            $documentIndex = $this->HtmlPageChapterLink->getById($id);

            if (!empty($documentIndex)) {

                if (!empty($postData['HtmlPageChapterLink']['links'])) {

                    $postData['HtmlPageChapterLink']['link'] = $postData['HtmlPageChapterLink']['links'];
                    unset($postData['HtmlPageChapterLink']['links']);
                }


                $this->HtmlPageChapterLink->id = $documentIndex['HtmlPageChapterLink']['id'];
                if ($this->HtmlPageChapterLink->save($postData)) {
                    echo "1";
                    exit;
                }
            }

            echo "0";
            exit;

        }
    }

    /**************expiring page****************************/
    public function expiring($params = 'last', $param = null)
    {

        $this->layout = 'club_clubtab';
        $this->loadModel("User");
        $this->loadModel("Renewal_requests");
        $this->loadModel("ClubMember");

        $criteria = array();
        $options = array();
        $criteria1 = array();

        if (isset($this->params['pass'][1])) {
            $mode = $this->params['pass'][1];
        } else {
            $mode = 'image';
        }

        if (!empty($this->params['pass'][0])) {
            $pageType = $this->params['pass'][0];
        } else {
            $pageType = "all";
        }
        $this->set(compact('mode'));
        $this->set(compact('params'));
        $clubId = $this->Session->read('Auth.Club.id');
        $usersIds = $this->ClubMember->getRecordByClubId($clubId);

        if ($this->request->is('post')) {

            if (!empty($this->request->data['search_order']['searchname'])) {
                $searchname = $this->request->data['search_order']['searchname'];
                $criteria1 = array('User.firstname  LIKE' => '%' . $this->request->data['search_order']['searchname'] . '%');

            }

            $orderingData = "";
            if (!empty($this->request->data['User']['ordering'])) {
                $orderingData = $this->request->data['User']['ordering'];
                if ($this->request->data['User']['ordering'] == "recent_post") {
                    $options = array('User.created' => 'DESC');
                } else if ($this->request->data['User']['ordering'] == "older_post") {
                    $options = array('User.created' => 'ASC');
                }
            }
        }

        if ($param == '30') {
            $criteria = array(
                'User.role_id !=' => array('1', '2', '3', '10'), 'User.delete_status' => 'N',
                'User.id IN' => $usersIds,
                "AND" => array(
                    'User.subscription_end_date <=' => date('Y-m-d', strtotime("+30 days")),
                    "AND" => array('User.subscription_end_date >=' => date('Y-m-d'),)
                ));
        } elseif ($param == '14') {
            $criteria = array(
                'User.role_id !=' => array('1', '2', '3', '10'), 'User.delete_status' => 'N',
                'User.id IN' => $usersIds,
                "AND" => array(
                    'User.subscription_end_date <=' => date('Y-m-d', strtotime("+14 days")),
                    "AND" => array('User.subscription_end_date >=' => date('Y-m-d'),)
                ));
        } elseif ($param == '7') {

            $criteria = array(
                'User.role_id !=' => array('1', '2', '3', '10'), 'User.delete_status' => 'N',
                'User.id IN' => $usersIds,
                "AND" => array(
                    'User.subscription_end_date <=' => date('Y-m-d', strtotime("+7 days")),
                    "AND" => array('User.subscription_end_date >=' => date('Y-m-d'),)
                ));

        } else {


            if (!empty($usersIds) && is_array($usersIds)) {

                $criteria = array(
                    'User.id IN' => $usersIds, 'User.role_id !=' => array('1', '2', '3', '10'), 'User.delete_status' => 'N',
                    "AND" => array(
                        'User.subscription_end_date <=' => date('Y-m-d', strtotime("+30 days")),
                        "AND" => array('User.subscription_end_date >=' => date('Y-m-d'),)
                    ));

            } else {

                $criteria = array(
                    'User.id' => $usersIds, 'User.role_id !=' => array('1', '2', '3', '10'), 'User.delete_status' => 'N',
                    "AND" => array(
                        'User.subscription_end_date <=' => date('Y-m-d', strtotime("+30 days")),
                        "AND" => array('User.subscription_end_date >=' => date('Y-m-d'),)
                    ));
            }

            //print_r($criteria);exit;

        }
        $criteria = array_merge($criteria, $criteria1);

        if (!empty($this->request->data['User']['form_date'])) {
            $criteria = array_merge($criteria, array("User.subscription_start_date >= " => $this->request->data['User']['form_date']));
        }

        if (!empty($this->request->data['User']['to_date'])) {
            $criteria = array_merge($criteria, array("User.subscription_end_date <= " => $this->request->data['User']['to_date']));
        }

        if (!empty($this->request->data['User']['country_id'])) {
            $criteria = array_merge($criteria, array("User.country_id" => $this->request->data['User']['country_id']));
        }

        $totalCount = $this->User->getTotalsCount($criteria);
        $this->Paginator->settings = array('conditions' => $criteria, 'order' => $options, 'limit' => 10);
        $ClubUser = $this->Paginator->paginate('User');

        $ClubUserStatatic = $this->User->find('all', array('conditions' => $criteria));

        $country_id = Hash::combine($ClubUserStatatic, '{n}.User.id', '{n}.User.country_id');
        $countryRec = $this->Country->getCountryById($country_id);
        foreach ($countryRec as $key => $value) {
            $user_id = $this->getIdUserId($key, $country_id);
            $tempArray = array();
            $result = $this->ClubMember->getStatistRecord($user_id);
            $tempArray["allDay"] = $result;
            $tempArray[$key] = $value;
            $statisticArray[$key] = $tempArray;
        }

        $this->set(compact('statisticArray', 'totalCount', 'orderingData'));

        $this->set('clubuserdetails', $ClubUser);
        $this->set('searchname', $searchname);
    }

    public function remove_post()
    {
        if ($this->RequestHandler->isAjax()) {
            $this->loadModel('User');
            $this->layout = 'ajax';
            $delete_status = "'Y'";
            $this->User->updateAll(array('User.delete_status' => $delete_status), array('User.id' => $this->request->data['user_id']));
            echo "1";
            exit;
        }
    }

    public function ajax_multiple_delete_post()
    {
        if ($this->RequestHandler->isAjax()) {
            $this->loadModel('User');
            $this->layout = 'ajax';
            $disable_count = count($this->request->data['array_delete']);
            if ($disable_count == 1) {
                $this->User->updateAll(array('User.delete_status' => 1), array('User.id' => $this->request->data['array_delete']));
            } else {
                $this->User->updateAll(array('User.delete_status' => 1), array('User.id IN' => $this->request->data['array_delete']));
            }
            echo "1";
            exit;
        }
    }


    ///////////////////////////////////////////////////////////////

    public function help_page($id = null)
    {
        $this->layout = 'club_clubtab';
        $this->loadModel('Language_value');
        $this->loadmodel('ClubHelpEdit');
        if (!empty($id)) {
            $getRecord = $this->ClubHelpEdit->findRecordByLandId($id);

        } else {
            $id = '1';
            //$getRecord = $this->ClubHelpEdit->findRecord();
            //$getAllRecord = $this->ClubHelpEdit->findAllRecord();
            $getRecord = $this->ClubHelpEdit->findRecordByLandId($id);
        }
        $lang_list = $this->Language_value->getLanguageList();
        //pr($getRecord['ClubHelpEdit']['lang_id']); exit;
        //pr($getAllRecord); exit;
        if ($getRecord['ClubHelpEdit']['lang_id'] != '1') {
            $getRecord['ClubHelpEdit']['lang_id'] = 1;
            $getRecord['ClubHelpEdit']['content'] = "Record not found";
            $getRecord['ClubHelpEdit']['title'] = "";
        }

        $this->set(compact("lang_list", "getRecord"));
    }

    public function ajax_data_by_lang_id()
    {

        if ($this->RequestHandler->isAjax()) {
            $this->layout = 'ajax';
            $this->autoRender = false;
            $this->loadmodel('ClubHelpEdit');
            $getRecordByLangId = $this->ClubHelpEdit->findRecordByLandId($this->request->data['lang_id']);
            echo json_encode($getRecordByLangId);
        }
    }

    ///////////////////////////////////////////////////////////////////
    public function comment_suggestion()
    {

        $this->layout = 'club_clubtab';
    }

    public function comments_list($main_tab = "all", $sub_tab = "all", $lang_id = null)
    {

        $this->layout = 'club_clubtab';
        $this->loadModel('Assistance');
        $sessionUID = $this->Session->read('Auth.User.id');

        $loginStatus = false;
        if (!empty($sessionUID)) {
            $loginStatus = true;
        }

        $postData = $this->request->data;
        $postData["session_uID"] = $sessionUID;

        $startedCount = $this->Assistance->getCountByStatus('S');
        $completedCount = $this->Assistance->getCountByStatus('C');
        $declineCount = $this->Assistance->getCountByStatus('D');

        $this->Paginator->settings = $this->Assistance->getOptions($main_tab, $sub_tab, $postData, $lang_id);
        $records = $this->Paginator->paginate('Assistance');
        foreach ($records as $key => $record) {


            $created = $record['Assistance']['created'];
            $records[$key]['Assistance']['created_ago'] = $this->Assistance->timeElapsedString($created);
            // Get assistance users
            foreach ($record['AssistanceReply'] as $key1 => $reply) {
                //pr($reply); exit;
                // Get assistance users
                $rUser = $this->User->find(
                    "first", array(
                    'conditions' => array(
                        'User.id' => $reply['user_id']
                    ),
                    'fields' => array('id', 'logo', 'image', 'firstname', 'lastname', 'username', 'role_id'),
                    'recursive' => 0
                ));

                $records[$key]['AssistanceReply'][$key1]['User'] = $rUser['User'];
                $records[$key]['AssistanceReply'][$key1]['message'] = $reply['message'];
                $records[$key]['AssistanceReply'][$key1]['created_ago'] = $this->Assistance->timeElapsedString($reply['created']);
            }

            $records[$key]['AssistanceComment']['comment_html'] = $this->commentDisplayHtml($record['AssistanceComment']);
            // Get assistance comments
            $records[$key]['Assistance']['comment_count'] = 0;
            foreach ($record['AssistanceComment'] as $comment) {

                if ($comment['parent_id'] == 0) {
                    $records[$key]['Assistance']['comment_count'] += 1;
                }

                //$records[$key]['AssistanceReply'][$key1]['User']      = $rUser['User'];
                //$records[$key]['AssistanceReply'][$key1]['created_ago'] = $this->Assistance->timeElapsedString($reply['created']);
            }
        }
        $this->set(
            compact(
                "records",
                'loginStatus',
                'postData',
                'startedCount',
                'completedCount',
                'declineCount',
                'main_tab',
                'sub_tab',
                'lang_id'
            )
        );
    }

    public function commentDisplayHtml(array $elements, $marginleft = 0)
    {
        $this->loadModel('Role');
        $this->loadModel('User');
        $getRole = $this->Role->getAllRolesList();

        foreach ($elements as $element) {

            $rUser1 = $this->User->find(
                "first", array(
                'conditions' => array(
                    'User.id' => $element['user_id']
                ),
                'fields' => array('id', 'logo', 'image', 'firstname', 'lastname', 'username', 'role_id'),
                'recursive' => 0
            ));

            $marginleft = 0;
            if ($element['parent_id'] > 0) {
                $marginleft = $marginleft + 60;
            }

            $imageUrl = $this->webroot . 'img/profile_images/no_profile2.jpg';
            if (!empty($rUser1['User']['logo']) && (file_exists("img/logo/" . $rUser1['User']['logo']))) {
                $imageUrl = $this->webroot . 'img/logo/' . $rUser1['User']['logo'];
            }

            $roleId = $rUser1['User']['role_id'];
            $roleName = "";
            if (!empty($getRole[$roleId])) {
                $roleName = $getRole[$roleId];
            }

            if ($element['parent_id'] > 0) {

                $name = ucfirst($rUser1['User']['username']);
                if (!empty($rUser1['User']['firstname'])) {
                    $name = ucfirst($rUser1['User']['firstname']) . " " . ucfirst($rUser1['User']['lastname']);
                }
                $orgDate = "";

            } else {

                $name = "<a href='' style='color:#1e98c5'>" . ucfirst($rUser1['User']['username']) . "</a> commented";
                if (!empty($rUser1['User']['firstname'])) {
                    $name = "<a href='' style='color:#1e98c5'>" . ucfirst($rUser1['User']['firstname']) . " " . ucfirst($rUser1['User']['lastname']) . "</a>  commented  &nbsp;&nbsp; - &nbsp; &nbsp;";
                }

                $dateTime = strtotime($element['created']);
                $orgDate = date('F d, Y h:i', $dateTime);

            }
            //pr("hello4564765"); exit;

            $created_ago = $this->Assistance->timeElapsedString($element['created']);

            $html .= '<div>';
            $html .= '<div class="reviews" style="margin-left:' . $marginleft . 'px;border:none">';
            $html .= '<div class="review-img">';
            $html .= '<img src="' . $imageUrl . '" align="">';
            $html .= '</div>';
            $html .= '<div class="review-content">';
            $html .= '<div style="padding:4px 0;">';
            $html .= '<strong>' . $name . '</strong>';
            $html .= '<span>' . $orgDate . '</span> ';
            $html .= '</div>';
            $html .= '<div>' . $element['description'] . '</div>';
            $html .= '</div>';
            $html .= '</div>';

            if ($element['parent_id'] > 0) {
                $html .= '<div style="margin-left:' . $marginleft . 'px;margin-top: -7px;font-size:12px;">Posted by ' . $roleName . ' - ' . $created_ago . '</div>';
            }
            $html .= '</div>';

            $html .= $this->commentDisplayHtml($element['reply'], $marginleft + 20);
        }
        return $html;
    }
    /////////////////////////////////////////////////////////////////

    ///////////////////////////////////////////////////////
    public function bugs_error()
    {
        $this->layout = 'club_clubtab';
    }

    public function htmlpage_advance_mode($main_tab = "all", $sub_tab = "all")
    {

        $this->layout = 'club_clubtab';
        $this->loadModel('Assistance');
        $this->loadModel('User');
        $sessionUID = $this->Session->read('Auth.User.id');

        $loginStatus = false;
        if (!empty($sessionUID)) {
            $loginStatus = true;

        }

        $postData = $this->request->data;
        $postData["session_uID"] = $sessionUID;

        $startedCount = $this->Assistance->getCountByStatus('S');
        $completedCount = $this->Assistance->getCountByStatus('C');
        $declineCount = $this->Assistance->getCountByStatus('D');

        $this->Paginator->settings = $this->Assistance->getOptions($main_tab, $sub_tab, $postData);
        //pr($this->Paginator->settings); exit;
        $records = $this->Paginator->paginate('Assistance');
        //pr($records); exit;
        foreach ($records as $key => $record) {

            $created = $record['Assistance']['created'];
            $records[$key]['Assistance']['created_ago'] = $this->Assistance->timeElapsedString($created);

            // Get assistance users
            foreach ($record['AssistanceReply'] as $key1 => $reply) {

                // Get assistance users
                $rUser = $this->User->find(
                    "first", array(
                    'conditions' => array(
                        'User.id' => $reply['user_id']
                    ),
                    'fields' => array('id', 'logo', 'image', 'firstname', 'lastname', 'username', 'role_id'),
                    'recursive' => 0
                ));

                $records[$key]['AssistanceReply'][$key1]['User'] = $rUser['User'];
                $records[$key]['AssistanceReply'][$key1]['created_ago'] = $this->Assistance->timeElapsedString($reply['created']);
            }

            $records[$key]['AssistanceComment']['comment_html'] = $this->commentDisplayHtml($record['AssistanceComment']);

            // Get assistance comments
            $records[$key]['Assistance']['comment_count'] = 0;
            foreach ($record['AssistanceComment'] as $comment) {

                if ($comment['parent_id'] == 0) {
                    $records[$key]['Assistance']['comment_count'] += 1;
                }

                $records[$key]['AssistanceReply'][$key1]['User'] = $rUser['User'];
                $records[$key]['AssistanceReply'][$key1]['created_ago'] = $this->Assistance->timeElapsedString($reply['created']);
            }
        }

        $this->set(
            compact(
                "records",
                'loginStatus',
                'postData',
                'startedCount',
                'completedCount',
                'declineCount',
                'main_tab',
                'sub_tab'
            )
        );
    }

    public function commentDisplayHtml1(array $elements, $marginleft = 25)
    {

        $userid = $this->Session->read('Auth.User.id');
        $roleid = $this->Session->read('Auth.User.role_id');

        foreach ($elements as $element) {

            $staffRoleId = $element['User']['role_id'];
            $roles = array(2, 3, 10, 11, 12);
            $bgColor = "ocb-blue";
            if (in_array($staffRoleId, $roles)) {
                $bgColor = "ocb-yellow";
            }
            $color = null;

            $html .= '<div  style="margin-left:' . $marginleft . 'px" class="opp-comment-block ' . $bgColor . ' ' . $color . ' comment-content' . $element['html_page_comments']['id'] . '" id="' . $element['html_page_comments']['id'] . '">';
            $html .= '<span class="comment-image"><img src="' . $this->webroot . 'img/profile_images/' . $element['User']['image'] . '"></span>';

            $html .= '<div class="opp-comment-title">';
            $html .= $element['User']['virtualfullname'];
            $html .= '<span class="opp-comment-date">';
            $html .= date("jS M Y", strtotime($element['html_page_comments']['created']));
            if ($element['html_page_comments']['user_id'] == $userid) {
                $html .= '<a class="cross comment-remove" href="#" data-id="' . $element['html_page_comments']['id'] . '"><i class="fa fa-times-circle"></i></a>';
            }
            $html .= '</span></div>';
            $html .= '<div class="comment-description">' . $element['html_page_comments']['comment'] . '</div>';

            //if ($element['html_page_comments']['notify_me'] == 'Y') {}
            $html .= '<div class="delete"><a href="#" class=" notify-alert" data-id="' . $element['html_page_comments']['id'] . '"> &cross;</a></div>';


            if ($userid) {
                $html .= '<div class="delete"><a href="" class="show_reply_action"  data-action="reply" data-id="' . $element['html_page_comments']['id'] . '">Reply</a></div>';
                $html .= '<div id="show_reply_input' . $element['html_page_comments']['id'] . '"></div>';
            }
            $html .= '</div>';


            $html .= $this->commentDisplayHtml1($element['reply'], $marginleft + 20);
        }
        return $html;
    }

    public function help_editing()
    {

        $this->layout = 'club_clubtab';
        $this->loadmodel('language_values');
        $this->loadmodel('ClubHelpEdit');
        $languageDetl = $this->language_values->find(
            'list', array(
            'fields' => array('id', 'lang_name')
        ));

        $getRecord = $this->ClubHelpEdit->findRecord();

        //$value = '1';
        //$this->Cookie->write('lang_storage', $value, false);
        //echo $this->Cookie->read('lang_storage'); exit;
        if ($this->request->is('post')) {


            // print_r($this->request->data); exit;

            $getRecordByLangId = $this->ClubHelpEdit->findRecordByLandId($this->request->data['Club']['lang_id']);

            if (!empty($getRecordByLangId)) {
                $this->request->data['ClubHelpEdit']['id'] = $this->request->data['Club']['id'];
            }

            if ($this->request->data['Club']['Content'] == "") {
                $this->Session->setFlash(__('content section cannot be null'), 'flash-message', array('type' => 'alert-success'), 'success');
                return $this->redirect(array('controller' => 'clubs', 'action' => 'help_editing'));
            }

            if ($this->request->data['Club']['lang_id'] == "") {
                $this->request->data['Club']['lang_id'] = '1';
            }
            if ($this->request->data['Club']['title'] == "") {
                $this->request->data['Club']['title'] = "";
            }

            $this->request->data['ClubHelpEdit']['content'] = $this->request->data['Club']['Content'];
            $this->request->data['ClubHelpEdit']['lang_id'] = $this->request->data['Club']['lang_id'];
            $this->request->data['ClubHelpEdit']['title'] = $this->request->data['Club']['title'];
            $this->request->data['ClubHelpEdit']['page_url'] = $this->request->data['Club']['document_linked_url'];

            //pr($this->request->data['ClubHelpEdit']); exit;
            if ($this->ClubHelpEdit->save($this->request->data['ClubHelpEdit'])) {
                $this->Session->setFlash(__('Succesfully saved!'), 'flash-message', array('type' => 'alert-success'), 'success');
                return $this->redirect(array('controller' => 'clubs', 'action' => 'help_editing'));
            }
        }
        $this->set(compact('languageDetl', 'getRecord'));
    }

    ////////////////////////////////////////////////////////////////////

    public function ajax_delete_help_edit()
    {

        if ($this->RequestHandler->isAjax()) {
            $this->layout = 'ajax';
            $this->loadModel('ClubHelpEdit');
            $this->ClubHelpEdit->id = $this->request->data['help_edit_id'];
            //print_r($this->request->data['help_edit_id']); exit;
            if ($this->ClubHelpEdit->delete()) {

                echo "1";
                exit;
            } else {
                echo "0";
                exit;
            }
        }
    }

    public function ajax_pwd_check()
    {
        if ($this->RequestHandler->isAjax()) {
            $this->layout = 'ajax';
            $this->loadModel('User');
            $this->loadModel('helppasswords');
            $password = $this->request->data['password'];

            $hashedPassword = Security::hash($password, null, true);
            //$id = $this->Session->read("Auth.User.id");
            //echo $id; exit;
            $this->unbindUserSocialBanner();
            $login_true = 0;
            $result = $this->User->find('all', array('fields' => array("User.id"), 'conditions' => array('AND' => array(array('User.password' => $hashedPassword), array('User.id' => 1)))));
            if (!empty($result)) {
                $login_true = 1;
            }
            $dirhelppass = $this->helppasswords->find('count', array('fields' => 'normal_help_pass', 'conditions' => array('lang_id' => $this->request->data['lngID'], 'html_lang_pass' => $password)));
            if ($dirhelppass == 1) {
                $login_true = 1;
            }
            if ($login_true == 1) {
                echo "1";
                exit;
            } else {
                echo "0";
                exit;
            }
        }
    }

    /**************Not Renewed****************************/
    public function checkstatus_notrenewed($params = 'last', $param = null)
    {

        $this->layout = 'club_clubtab';
        $this->loadModel('User');
        $this->loadModel('messages');
        $this->loadModel('menu_settings');
        $this->loadModel("ClubMember");
        $criteria = array();
        $options = array();
        $t_day = date('Y-m-d', strtotime("-1 days"));
        $clubId = $this->Session->read('Auth.Club.id');
        $usersIds = $this->ClubMember->getRecordByClubId($clubId);
        $criteria1 = array();
        if ($this->request->is('post')) {

            if (!empty($this->request->data['username'])) {
                $searchname = $this->request->data['username'];
                $criteria1 = array('User.firstname  LIKE' => '%' . $this->request->data['username'] . '%');

            }

            $orderingData = "";
            if (!empty($this->request->data['orderbing'])) {
                $orderingData = $this->request->data['orderbing'];
                if ($this->request->data['orderbing'] == "recent_post") {
                    $options = array('User.created' => 'DESC');
                } else if ($this->request->data['orderbing'] == "older_post") {
                    $options = array('User.created' => 'ASC');
                }
            }
        }

        if (isset($this->params['pass'][0]) && $this->params['pass'][0] == '30') {

            $prv_day = date('Y-m-d', strtotime("-30 days"));
            $criteria = array(
                'User.id IN' => $usersIds,
                'User.role_id !=' => array('1', '2', '3', '10'),
                'User.delete_status' => 'N',
                'User.subscription_end_date BETWEEN ? and ?' => array($prv_day, $t_day)
            );

        }
        if (isset($this->params['pass'][0]) && $this->params['pass'][0] == '60') {

            $prv_day = date('Y-m-d', strtotime("-60 days"));
            $criteria = array(
                'User.id IN' => $usersIds,
                'User.role_id !=' => array('1', '2', '3', '10'),
                'User.delete_status' => 'N',
                'User.subscription_end_date BETWEEN ? and ?' => array($prv_day, $t_day)
            );

        }
        if (isset($this->params['pass'][0]) && $this->params['pass'][0] == '90') {

            $prv_day = date('Y-m-d', strtotime("-90 days"));
            $criteria = array(
                'User.id IN' => $usersIds,
                'User.role_id !=' => array('1', '2', '3', '10'),
                'User.delete_status' => 'N',
                'User.subscription_end_date BETWEEN ? and ?' => array($prv_day, $t_day)
            );

        } else {


            if (!empty($usersIds)) {
                $prv_day = date('Y-m-d', strtotime("-90 days"));
                $criteria = array(
                    'User.id IN' => $usersIds,
                    'User.role_id !=' => array('1', '2', '3', '10'),
                    'User.delete_status' => 'N',
                    'User.subscription_end_date BETWEEN ? and ?' => array($prv_day, $t_day)
                );
            }

        }

        if (!empty($this->request->data['User']['form_date'])) {
            $criteria = array_merge($criteria, array("User.subscription_start_date >= " => $this->request->data['User']['form_date']));
        }

        if (!empty($this->request->data['User']['to_date'])) {
            $criteria = array_merge($criteria, array("User.subscription_end_date <= " => $this->request->data['User']['to_date']));
        }

        if (!empty($this->request->data['User']['country_id'])) {
            $criteria = array_merge($criteria, array("User.country_id" => $this->request->data['User']['country_id']));
        }

        $criteria = array_merge($criteria, $criteria1);

        $totalCount = $this->User->getTotalsCount($criteria);

        $this->Paginator->settings = array('conditions' => $criteria, 'order' => $options, 'limit' => 10);

        $ClubUser = $this->Paginator->paginate('User');


        $ClubUserStatatic = $this->User->find('all', array('conditions' => $criteria));

        $country_id = Hash::combine($ClubUserStatatic, '{n}.User.id', '{n}.User.country_id');
        $countryRec = $this->Country->getCountryById($country_id);
        foreach ($countryRec as $key => $value) {
            $user_id = $this->getIdUserId($key, $country_id);
            $tempArray = array();
            $result = $this->ClubMember->getStatistRecord($user_id);
            $tempArray["allDay"] = $result;
            $tempArray[$key] = $value;
            $statisticArray[$key] = $tempArray;
        }

        $this->set(compact('statisticArray', 'searchname', 'orderingData', 'totalCount'));


        //pr($ClubUser); exit;
        $this->set('clubuserdetails', $ClubUser);
        $this->set(compact('serachUname'));


    }

    /**************expiring page****************************/

    /**************expiring_member****************************/
    public function expiring_member($param = 'all', $mode = "image")
    {

        $this->layout = 'club_clubtab';
        $this->loadModel("User");
        $this->loadModel("ClubMember");

        $username = "";
        $postData = $this->request->data;
        $clubId = $this->Session->read('Auth.Club.id');
        $usersIds = $this->ClubMember->getRecordByClubId($clubId);

        if (!empty($postData['username'])) {

            $usersIds = $this->User->find(
                'list', array(
                'fields' => array("User.id"),
                'conditions' => array(
                    'User.id' => $usersIds,
                    "and" => array(
                        'or' => array(
                            'User.firstname like ' => "%" . $postData['username'] . "%"
                        )
                    )
                )
            ));

            $username = $postData['username'];
        }

        $conditions = array(
            'User.id' => $usersIds,
            'User.role_id !=' => array('1', '2', '3', '10'),
            'User.delete_status' => 'N'
        );


        $order_condition = array('User.id' => 'DESC');
        $orderName = "";
        if (!empty($postData['orderbing'])) {

            $orderBy = $postData['orderbing'];

            if ($orderBy == "recent") {
                $order_condition = array('User.created' => 'DESC');
            } else {
                $order_condition = array('User.created' => 'ASC');
            }
            $orderName = $postData['orderbing'];
        }

        if (!empty($postData['User']['form_date'])) {
            $conditions = array_merge($conditions, array("User.subscription_start_date >= " => $postData['User']['form_date']));
        }

        if (!empty($postData['User']['to_date'])) {
            $conditions = array_merge($conditions, array("User.subscription_end_date <= " => $postData['User']['to_date']));
        }

        if (!empty($postData['User']['country_id'])) {
            $conditions = array_merge($conditions, array("User.country_id" => $postData['User']['country_id']));
        }


        $totalCount = $this->User->getTotalsCount($conditions);

        if ($param == 'Current') {
            $currentDate = date('Y-m-d H:i:s');
            $conditions = array_merge($conditions, array("User.created" => $currentDate));
        } else if ($param == 'Last') {
            $conditions = array_merge($conditions, array('User.created BETWEEN ? AND ?' => array(date('Y-m-d', strtotime('-1 months')), date('Y-m-d'))));
        }

        $this->Paginator->settings = array(
            'fields' => $commonFetch_Fields_User,
            'conditions' => $conditions,
            'limit' => 10,
            'recursive' => -1,
            'order' => $order_condition
        );

        $ClubUser = $this->Paginator->paginate('User');
        $ClubUserStatatic = $this->User->find('all', array('conditions' => $conditions));
        $country_id = Hash::combine($ClubUserStatatic, '{n}.User.id', '{n}.User.country_id');
        $countryRec = $this->Country->getCountryById($country_id);

        foreach ($countryRec as $key => $value) {
            $user_id = $this->getIdUserId($key, $country_id);
            $tempArray = array();
            $result = $this->ClubMember->getStatistRecord($user_id);
            $tempArray["allDay"] = $result;
            $tempArray[$key] = $value;
            $statisticArray[$key] = $tempArray;
        }

        $this->set(compact('statisticArray', 'mode', 'totalCount', 'param'));

        /*Create by prinynka*/
        $newarry = array();
        $ki = 0;
        $mki = 0;
        foreach ($ClubUser as $v_user) {

            if ($v_user['User']['role_id'] == '5') {
                $table_sel = "athlete_subscription_histories";
            } elseif ($v_user['User']['role_id'] == '6') {
                $table_sel = 'coach_subscription_histories';
            } elseif ($v_user['User']['role_id'] == '7') {
                $table_sel = 'team_subscription_histories';
            } elseif ($v_user['User']['role_id'] == '8') {
                $table_sel = 'club_subscription_histories';
            } elseif ($v_user['User']['role_id'] == '9') {
                $table_sel = 'group_subscription_histories';
            }

            $this->loadModel($table_sel);
            $all_subdata = $this->$table_sel->find('all', array('conditions' => array($table_sel . '.user_id' => $v_user['User']['id'], $table_sel . '.delete_status' => 'N'), 'order' => array($table_sel . '.subscription_start_date' => 'DESC')));
            array_shift($all_subdata);


            $ClubUser[$mki]['User']['old_subscription'] = 'N';
            $newarry[$ki] = $ClubUser[$mki];
            $m = 1;
            foreach ($all_subdata as $key => $value) {

                $newarry[$ki + $m] = $ClubUser[$mki];
                $newarry[$ki + $m]['User']['subscription_setting_id'] = $value[$table_sel]['subscription_setting_id'];
                $newarry[$ki + $m]['User']['subscription_start_date'] = $value[$table_sel]['subscription_start_date'];
                $newarry[$ki + $m]['User']['subscription_end_date'] = $value[$table_sel]['subscription_end_date'];
                $newarry[$ki + $m]['User']['payment_status'] = $value[$table_sel]['payment_status'];
                $newarry[$ki + $m]['User']['delete_status'] = $value[$table_sel]['delete_status'];
                $newarry[$ki + $m]['User']['created'] = $value[$table_sel]['created'];
                $newarry[$ki + $m]['User']['old_subscription'] = 'Y';
                $newarry[$ki + $m]['User']['old_subscription_history_id'] = $value[$table_sel]['id'];

                $m++;
            }
            $ki = $ki + $m;
            $mki++;
        }

        $this->set(compact("username", "orderName"));
        $this->set('clubuserdetails', $ClubUser);
    }
    /**************Not Renewed****************************/

    /**************expiring_member****************************/


    public function terminate()
    {

        $this->layout = 'club_clubtab';

    }

    public function member_terminate($param = 'image', $limit = 10)
    {

        //  $_SESSION['Auth']['Club']['id']
        $param = $param;
        $this->loadModel('ClubMember');
        $clubUserId = $this->ClubMember->getClubUserId($_SESSION['Auth']['Club']['id']);

        $extractUserId = Hash::extract($clubUserId, '{n}.ClubMember.user_id');
        $country_id = Hash::combine($clubUserId, '{n}.User.id', '{n}.User.country_id');
        $countryRec = $this->Country->getCountryById($country_id);
        foreach ($countryRec as $key => $value) {
            $user_id = $this->getIdUserId($key, $country_id);
            $tempArray = array();
            $result = $this->ClubMember->getStatistRecord($user_id);
            $tempArray["allDay"] = $result;
            $tempArray[$key] = $value;
            $statisticArray[$key] = $tempArray;
        }


        $this->set(compact('statisticArray'));

        $this->layout = 'club_clubtab';
        $this->loadModel('User');
        $clubId = $this->Session->read('Auth.Club.id');
        $usersIds = $this->ClubMember->getRecordByClubId($clubId);
        $criteria1 = array();
        $conditions = array();
        if ($this->request->is('post')) {

            if (!empty($this->request->data['username'])) {
                $searchname = $this->request->data['username'];
                $criteria1 = array('User.firstname  LIKE' => '%' . $this->request->data['username'] . '%');
            }

            $orderingData = "";
            if (!empty($this->request->data['orderbing'])) {
                $orderingData = $this->request->data['orderbing'];
                if ($this->request->data['orderbing'] == "recent") {
                    $options = array('User.created' => 'DESC');
                } else if ($this->request->data['orderbing'] == "old") {
                    $options = array('User.created' => 'ASC');
                }
            }
        }

        $conditions = array('User.delete_status' => 'N', "User.role_id !=" => array('1', '2', '3', '10'));

        if (isset($this->params['pass'][0]) && $this->params['pass'][1] == '7') {

            $t_day = date('Y-m-d', strtotime("-7 days"));
            $conditions = array_merge($conditions, array('User.subscription_end_date < ' => $t_day));

        } else if (isset($this->params['pass'][0]) && $this->params['pass'][1] == '14') {


            $t_day = date('Y-m-d', strtotime("-14 days"));
            $conditions = array_merge($conditions, array('User.subscription_end_date < ' => $t_day));

        } else if (isset($this->params['pass'][0]) && $this->params['pass'][1] == '30') {

            $t_day = date('Y-m-d', strtotime("-30 days"));
            $conditions = array_merge($conditions, array('User.subscription_end_date < ' => $t_day));
        } else {

            $t_day = date('Y-m-d', strtotime("-1 days"));
            $conditions = array_merge($conditions, array('User.subscription_end_date < ' => $t_day));
        }

        if (!empty($usersIds)) {
            $conditions = array_merge($conditions, array('User.id' => $usersIds));
        }

        if (!empty($this->request->data['User']['form_date'])) {
            $conditions = array_merge($conditions, array("User.subscription_start_date >= " => $this->request->data['User']['form_date']));
        }

        if (!empty($this->request->data['User']['to_date'])) {
            $conditions = array_merge($conditions, array("User.subscription_end_date <= " => $this->request->data['User']['to_date']));
        }

        if (!empty($this->request->data['User']['country_id'])) {
            $conditions = array_merge($conditions, array("User.country_id" => $this->request->data['User']['country_id']));
        }

        $conditions = array_merge($conditions, $criteria1);

        $totalCount = $this->User->getTotalsCount($conditions);

        $limit = 10;
        $data = array(
            'conditions' => $conditions,
            'order' => $options,
            'limit' => $limit
        );

        $this->Paginator->settings = $data;
        $clubResult = $this->Paginator->paginate('User');
        $this->set(compact('clubResult', 'param', 'limit', 'orderingData', 'searchname', 'totalCount'));

    }

    public function checkstatus_expiring()
    {

        $this->layout = 'club_clubtab';

    }

    public function print_terminate($user_id = null, $param)
    {

        $userId = explode(',', $user_id);
        $this->layout = '';
        $this->loadModel('User');
        $condition = array('conditions' => array("User.id" => $userId), 'order' => 'User.id ASC');
        $userRecord = $this->User->getAllRecordById($condition);

        $this->set(compact('userRecord', 'param'));

    }

    public function send_msg()
    {
        Configure::write('debug', 1);
        if ($this->RequestHandler->isAjax()) {
            $this->loadModel('message');
            // $commonMethods = new CommonfunctionComponent();
            $this->layout = 'ajax';
            $to_email = $this->request->data['send_msg_form']['email'];
            $message = $this->request->data['send_msg_form']['message'];

            $subject = "Mail from SPortsbook";
            $Email = new CakeEmail('smtp');

            /* $Email->from(array($commonMethods->authorEmail() => 'MovesBook'))
            ->viewVars(array('usersdata' => $message))
            ->template('mailsendformat')
            ->to($to_email)
            ->subject($subject)
            ->emailFormat('html');
             */
            $Email->from(array('kunjdhara14@gmail.com' => 'MovesBook'))
                ->viewVars(array('usersdata' => $message))
                ->template('mailsendformat')
                ->to($to_email)
                ->subject($subject)
                ->emailFormat('html');

            if (!empty($attachments)) {
                $Email->attachments($attachments);
            }
            if ($Email->send($message)) {
                echo "1";
                exit;
            } else {

                echo "0";
                exit;
            }//mail end

        }

        exit;

    }

    public function send_mail()
    {

        if ($this->RequestHandler->isAjax()) {

            $this->loadModel('message');
            $this->layout = 'ajax';
            $send_msg = $this->request->data['send_msg'];
            $commonMethods = new CommonfunctionComponent();
            $usersdata = $this->request->data['sub'];
            $array = array();

            foreach ($this->request->data['val1'] as $key => $value) {
                if (!empty($value)) {
                    $array[] = $value;
                }

            }
            //$array1=array("swapnilb@datalogysoftware.com","sunil@datalogysoftware.com");

            $subject = "Mail from admin";
            $Email = new CakeEmail('smtp');
            $Email->from(array($commonMethods->authorEmail() => 'MovesBook'))
                ->viewVars(array('usersdata' => $usersdata))
                ->template('mailsendformat')
                ->to($array)
                ->subject($subject)
                ->emailFormat('html');

            if ($Email->send($usersdata)) {
                echo "1";
                exit;
            } else {
                echo "0";
                exit;
            }//mail end

        }
    }

    public function subscription($page = "all", $mode = "image", $type = "")
    {

        $this->layout = "club_clubtab";
        $this->loadModel('ClubMemberSubscription');
        $this->loadModel('ClubOperator');
        $this->loadModel('ClubSettingTypologyListprice');
        $this->loadModel('ClubSettingSubscriptionTypology');
        $clubId = $this->Session->read('Auth.Club.id');
        $UserID = $this->Session->read('Auth.User.id');
        $conditions = array(
            'ClubMemberSubscription.club_id' => $clubId,
            'ClubMemberSubscription.delete_status' => "0"
        );
        $vendors = $this->ClubOperator->getVendorsByClubId($UserID);
        //filter order
        $order_condition = array('ClubMemberSubscription.id' => 'DESC');
        if (!empty($this->request->data['orderbing'])) {
            $orderBy = $this->request->data['orderbing'];
            switch ($orderBy) {

                case 'fullname':
                    $order_condition = array('User.firstname' => 'DESC');
                    # code...
                    break;
                case 'email':
                    $order_condition = array('User.email' => 'DESC');
                    break;
                case 'start_date_new':
                    $order_condition = array('ClubMemberSubscription.membership_start_date' => 'DESC');
                    break;
                case 'start_date_old':
                    $order_condition = array('ClubMemberSubscription.membership_start_date' => 'ASC');
                    break;
                case 'end_date_new':
                    $order_condition = array('ClubMemberSubscription.membership_until_date' => 'DESC');
                    break;
                case 'end_date_old':
                    $order_condition = array('ClubMemberSubscription.membership_until_date' => 'ASC');
                    break;
                default:
                    # code...
                    break;
            }
            $orderName = $orderBy;

        }

        if (!empty($this->request->data['User']['form_date'])) {
            $conditions = array_merge($conditions, array("ClubMemberSubscription.start_date >= " => $this->request->data['User']['form_date']));
        }
        if (!empty($this->request->data['User']['to_date'])) {
            $conditions = array_merge($conditions, array("ClubMemberSubscription.end_date <= " => $this->request->data['User']['to_date']));
        }
        $t_day = date('Y-m-d', strtotime("-1 days"));
        switch ($page) {

            case 'all':
                switch ($type) {
                    case 'current':
                        $cDate = date('Y-m-d');
                        $endDt = date('Y-m-d 11:59:59');
                        $conditions = array_merge(
                            $conditions, array(
                            'ClubMemberSubscription.start_date =' => $cDate
                        ));
                        break;
                    case 'last':
                        $cDate = date('Y-m-d');
                        $lDate = date('Y-m-d', strtotime('-15 day', strtotime($cDate)));
                        $conditions = array_merge(
                            $conditions, array(
                            'ClubMemberSubscription.start_date >=' => $lDate
                        ));
                        break;
                }

                break;

            case 'expire':

                switch ($type) {

                    case '7':
                        $conditions = array_merge(
                            $conditions, array(
                            "AND" => array(
                                'ClubMemberSubscription.end_date <=' => date(
                                    'Y-m-d', strtotime(
                                    "+7 days"
                                )),
                                "AND" => array('ClubMemberSubscription.end_date >=' => date('Y-m-d'),)
                            )));
                        break;

                    case '15':
                        $conditions = array_merge(
                            $conditions, array(
                            "AND" => array(
                                'ClubMemberSubscription.end_date <=' => date(
                                    'Y-m-d', strtotime(
                                    "+15 days"
                                )),
                                "AND" => array('ClubMemberSubscription.end_date >=' => date('Y-m-d'),)
                            )));
                        break;

                    default :
                        $conditions = array_merge(
                            $conditions, array(
                            "AND" => array(
                                'ClubMemberSubscription.end_date <=' => date(
                                    'Y-m-d', strtotime(
                                    "+30 days"
                                )),
                                "AND" => array('ClubMemberSubscription.end_date >=' => date('Y-m-d'),)
                            )));
                        break;
                }

                break;

            case 'not_renew':

                switch ($type) {

                    case '30':
                        $prv_day = date('Y-m-d', strtotime("-30 days"));
                        $conditions = array_merge(
                            $conditions, array(
                            'ClubMemberSubscription.end_date BETWEEN ? and ?' => array($prv_day, $t_day)
                        ));
                        break;

                    case '60':
                        $prv_day = date('Y-m-d', strtotime("-60 days"));
                        $conditions = array_merge(
                            $conditions, array(
                            'ClubMemberSubscription.end_date BETWEEN ? and ?' => array($prv_day, $t_day)
                        ));
                        break;

                    default :
                        $prv_day = date('Y-m-d', strtotime("-15 days"));
                        $conditions = array_merge(
                            $conditions, array(
                            'ClubMemberSubscription.end_date BETWEEN ? and ?' => array($prv_day, $t_day)
                        ));
                        break;
                }

                break;

        }

        $fieldbox = $username = "";

        if (!empty($this->request->data['username'])) {

            if ($this->request->data['search_field'] == "start_date") {


                $conditions = array_merge(
                    $conditions, array(
                    'ClubMemberSubscription.start_date' => $this->request->data['username']
                ));


            } else if ($this->request->data['search_field'] == "end_date") {

                $conditions = array_merge(
                    $conditions, array(
                    'ClubMemberSubscription.end_date' => $this->request->data['username']
                ));

            }

            $mUserIds = $this->ClubMemberSubscription->find(
                'list', array(
                'fields' => array("ClubMemberSubscription.id", "ClubMemberSubscription.user_id"),
                'conditions' => $conditions,
            ));

            $fieldsname = "firstname";
            $userCondtion["conditions"] = array();
            $userCondtion["conditions"] = array('User.id' => $mUserIds);

            if (!empty($this->request->data['search_field'])) {

                $fieldsname = $this->request->data['search_field'];
                $fieldbox = $this->request->data['search_field'];
                if ($this->request->data['search_field'] == "fullname") {

                    $userFieldValue = explode(' ', $this->request->data['username']);
                    $userCondtion['conditions'] = array_merge(
                        $userCondtion['conditions'],
                        array(
                            "AND" => array(
                                "OR" => array(
                                    array('User.firstname like' => "%" . $userFieldValue[0] . "%"),
                                    array('User.lastname like' => "%" . $userFieldValue[1] . "%")
                                ))));
                } else if ($this->request->data['search_field'] == "email") {
                    $userCondtion['conditions'] = array_merge(
                        $userCondtion['conditions'],
                        array('User.id' => $mUserIds, 'User.' . $fieldsname . ' like' => "%" . $this->request->data['username'] . "%")
                    );

                }

            }


            $usersIds = $this->User->find(
                'list', array(
                'fields' => array("User.id"),
                'conditions' => array($userCondtion['conditions'])
            ));

            $conditions = array_merge(
                $conditions, array(
                "ClubMemberSubscription.user_id" => $usersIds
            ));

            $username = $this->request->data['username'];
        }

        $totalCount = $this->ClubMemberSubscription->getTotalsCount($conditions);

        $this->paginate = array(
            'conditions' => $conditions,
            'contain' => array('User'),
            'recursive' => 1,
            'limit' => 10,
            'order' => $order_condition,
            'fields' => array(
                'ClubMemberSubscription.id', 'ClubMemberSubscription.user_id',
                'ClubMemberSubscription.typology_id',
                'ClubMemberSubscription.delete_status', 'ClubMemberSubscription.club_id',
                'ClubMemberSubscription.start_date', 'ClubMemberSubscription.end_date',
                'ClubMemberSubscription.typology_id',
                'ClubMemberSubscription.amount', 'ClubMemberSubscription.installments',
                'ClubMemberSubscription.vendor', 'ClubMemberSubscription.contract',
                'User.id', 'User.firstname', 'User.lastname', 'User.username',
                'User.email', 'User.country_id', 'User.image'
            )
        );

        $clubRecord = $this->Paginator->paginate('ClubMemberSubscription');

        foreach ($clubRecord as $key => $data) {
            $id = base64_encode($data['ClubMemberSubscription']['id']);
            $ecptID = base64_encode("subscription") . "*" . $id;
            $clubRecord[$key]['ClubMemberSubscription']['encr_id'] = $ecptID;
        }


        $this->ClubSettingSubscriptionTypology->unbindModel(
            array('hasMany' => array('ClubSettingTypologyListprice'))
        );


        $category = $this->ClubSettingSubscriptionTypology->find(
            "all", array(
            'conditions' => array(
                'ClubSettingSubscriptionTypology.club_id' => $clubId,
                'ClubSettingSubscriptionTypology.user_id' => $UserID
            ),
            'fields' => array('ClubSettingSubscriptionTypology.id', 'ClubSettingArea.area')
        ));
        //echo "<pre>";
        //print_r($category); exit;
        $categories = array();
        foreach ($category as $key => $cate) {
            $typologyId = $cate['ClubSettingSubscriptionTypology']['id'];
            $area = $cate['ClubSettingArea']['area'];
            $categories[$typologyId] = $area;
        }

        foreach ($clubRecord as $key => $value) {

            $tipologyId = $value['ClubMemberSubscription']['typology_id'];
            $priceList = $this->ClubSettingTypologyListprice->getActiveByTypologyId($tipologyId);
            $priceMonth = "";
            if (!empty($priceList['ClubSettingTypologyListprice']['subscription_name'])) {
                $priceMonth = $categories[$tipologyId] . " " . $priceList['ClubSettingTypologyListprice']['sale_duration_months'] . " month";
            }

            $clubRecord[$key]['ClubMemberSubscription']['subscription'] = $priceMonth;

            $typology_category = $this->ClubSettingSubscriptionTypology->find(
                "all", array(
                'conditions' => array(
                    'ClubSettingSubscriptionTypology.id' => $tipologyId
                ),
                'fields' => array('ClubSettingSubscriptionTypology.id', 'ClubSettingSubscriptionTypology.activity_name', 'ClubSettingArea.id', 'ClubSettingArea.area')
            ));
            $clubRecord[$key]['ClubMemberSubscription']['activity_name'] = $typology_category[$key]['ClubSettingSubscriptionTypology']['activity_name'];

            $clubRecord[$key]['ClubMemberSubscription']['area_id'] = $typology_category[$key]['ClubSettingArea']['id'];

            $clubRecord[$key]['ClubMemberSubscription']['area'] = $typology_category[$key]['ClubSettingArea']['area'];
        }

        $country_id = Hash::combine($clubRecord, '{n}.User.id', '{n}.User.country_id');
        $countryRec = $this->Country->getCountryById($country_id);

        foreach ($countryRec as $key => $value) {
            $user_id = $this->getIdUserId($key, $country_id);
            $tempArray = array();
            $result = $this->ClubMemberSubscription->getStatistRecord($user_id);
            $tempArray["allDay"] = $result;
            $tempArray[$key] = $value;
            $statisticArray[$key] = $tempArray;
        }
        $this->set(compact("page", "clubRecord", "mode", "type", "orderName", "fieldbox", "username", "totalCount", "statisticArray", "vendors"));
    }


    public function html1_page($pgname = null)
    {

        $this->loadmodel('help_html_pages');
        $this->loadModel('html_page_comments');
        $this->loadModel('News');

        $this->layout = "club_clubtab";

        $userid = $this->Session->read('Auth.User.id');
        $userlang = $this->Session->read('Auth.User.language_value_id');

        $this->set(compact('userid', 'userlang'));
        if (isset($_COOKIE['setLang'])) {
            $comment_lang_id = $_COOKIE['setLang'];
        } else {
            $comment_lang_id = '1';
        }

        //pr(SITE_BASE_URL.$this->webroot);exit;
        if (isset($_COOKIE['lg']) && $_COOKIE['lg'] != '') {
            $language = $_COOKIE['lg'];
        } else {
            $language = 'en';
        }

        $dtalngID = $this->language_values->find(
            'all', array(
            'conditions' => array(
                'lang_name' => $language
            ),
            'fields' => array('id')
        ));

        $data = $this->help_html_pages->find(
            'all', array(
            'conditions' => array(
                'lang_id' => $dtalngID[0]['language_values']['id'],
                'page_title' => $pgname
            )
        ));

        $commonMethods = new CommonfunctionComponent();
        $displayCmnt = array();

        if (count($data) > 0) {

            $comment_status = $this->Session->read('coment_status');
            $myid = "all";
            if ($comment_status == "my_reply") {
                $myid = $userid;
            }

            // All Comments
            $pgIDSet = $data[0]['help_html_pages']['id'];
            $content = $data[0]['help_html_pages']['content'];

            $displayCmnt = $this->User->userHtmlPageComments($data[0]['help_html_pages']['id'], $myid, $comment_lang_id);
            $displayCmnt = $this->buildCommentsTree($displayCmnt);
            $commentCollection = $this->commentDisplayHtml($displayCmnt);
            $display_count = $this->User->userCommentCount($data[0]['help_html_pages']['id'], $myid, $comment_lang_id);

            $this->html_page_comments->bindModel(
                array(
                    'belongsTo' => array(
                        'User' => array(
                            'foreignKey' => false,
                            'conditions' => array(
                                'html_page_comments.user_id = User.id'
                            )
                        )
                    )
                ));


            $displayCmntMail = $this->html_page_comments->find('all', array('conditions' => array('html_page_comments.html_page_id' => $data[0]['help_html_pages']['id'], 'html_page_comments.lang_id' => $comment_lang_id), 'order' => 'html_page_comments.created DESC'));
            $totalCommentsCount = count($displayCmntMail);

        } else {

            $content = '';
            $notSet = '0';
        }

        //Add banner rotation time
        $this->loadModel('home_banner_settings');
        $this->loadModel('sportbanners');
        $data101 = $this->home_banner_settings->find(
            'all', array(
            'conditions' => array(
                'home_banner_settings.id' => '1'
            )
        ));

        $bner_rotate_tme = $data101[0]['home_banner_settings']['banner_rotate_time'];
        $bner_img = unserialize($data101[0]['home_banner_settings']['sportbanner_id']);

        $bner_rotate_img = $this->sportbanners->find(
            'list', array(
            'fields' => array(
                'sportbanners.banner'
            ),
            'conditions' => array(
                'sportbanners.id' => $bner_img
            )
        ));
        //Add banner rotation time

        //Language list
        $lang_list = $this->Language_value->getLanguageList();
        $newsPost = $this->News->find('all', array('conditions' => array('News.news_category_id' => 13), 'fields' => array('News.id,News.title,News.news_category_id,News.created'), 'order' => 'News.id DESC'));
        $this->set(compact('comment_lang_id', 'content', 'commentCollection', 'comment_status', 'display_count', 'notSet', 'pgIDSet', 'totalCommentsCount', 'bner_rotate_tme', 'bner_rotate_img', 'lang_list', 'newsPost'));

        $this->set("html_page_id", $data[0]['help_html_pages']['id']);
        if ($this->request->is(array('post', 'put'))) {

            if ($this->request->data['cmnt']['notify_me'] != 'Y') {
                $savedata['notify_me'] = 'N';
            } else {
                $savedata['notify_me'] = 'Y';
            }

            $savedata['comment'] = $this->request->data['cmnt']['addcontent'];
            $savedata['lang_id'] = $this->request->data['cmnt']['lang_id'];
            $savedata['user_id'] = $this->Session->read('Auth.User.id');
            $savedata['html_page_id'] = $data[0]['help_html_pages']['id'];

            if ($this->html_page_comments->save($savedata)) {

                $this->Session->setFlash(__('Comment Posted Sucessfully.'));
                //***************************************************************

                foreach ($displayCmntMail as $key => $value) {

                    $dataCmnt['fullname'] = $value['User']['virtualfullname'];
                    $dataCmnt['comment'] = $savedata['comment'];
                    $dataCmnt['pglink'] = SITE_BASE_URL . $this->webroot . "users/htmlpage/" . $pgname;

                    if ($value['html_page_comments']['notify_me'] == 'Y') {

                        $Useremail = $value['User']['email'];
                        $Email = new CakeEmail('smtp');
                        $Email->from(array($commonMethods->authorEmail() => 'MovesBook'))
                            ->to($Useremail)
                            ->subject('Movesbook Page commented by other')
                            ->template('comment_notification')
                            ->viewVars(array('dataCmnt' => $dataCmnt))
                            ->emailFormat('html');
                        $Email->send();
                        //============EndEmail=============//
                    }
                }

                //**************************************************************
                $this->redirect(array("controller" => "users", "action" => "htmlpage", $pgname));
            } else {
                $this->Session->setFlash(__('Not Posted, Please try again....'));
            }
        }
    }

    private function buildCommentsTree(array $elements, $parentId = '0')
    {

        $branch = array();
        foreach ($elements as $element) {

            if ($element['html_page_comments']['reply_user_id'] == $parentId) {

                $children = $this->buildCommentsTree($elements, $element['html_page_comments']['id']);

                if ($children) {
                    $element['reply'] = $children;
                }

                $branch[] = $element;
            }

        }

        return $branch;
    }

    public function sendPasswordsForAdmin($value = '')
    {
        $this->layout = "ajax";
        $this->autorender = false;
        $users = $this->Session->read('Auth.User');
        $user_id = $this->Session->read('Auth.User.id');
        $club_id = $this->Session->read('Auth.Club.id');
        $email = $this->Session->read('Auth.User.email');
        $username = $this->Session->read('Auth.User.username');

        $main_password = rand(100000, 1000000);
        $alternate_pass = rand(100000, 1000000);
        $directAccess = rand(100000, 1000000);

        // Club admin passwords start
        $adminPassword = $alterPassword = $managementSectionPassword = $passwordAccessCash = $passwordAccessSubscription = $requestPassword = $movesbook_staff_pass = "";

        if (!empty($user_id)) {

            $this->User->id = $user_id;
            $updatePassword = array(
                'password' => $main_password,
                'alternate_pass' => $alternate_pass,
                'alternate_club_pass' => $directAccess,
            );

            if ($this->User->save($updatePassword)) {
                $adminPassword = $main_password;
                $alterPassword = $alternate_pass;
                $direct_access = $directAccess;
            }

            $this->loadModel("ClubSecuritySystemPassword");
            $cS = $this->ClubSecuritySystemPassword->getFirstRecordByUserID($user_id);
            $managementSectionPassword = $cS['ClubSecuritySystemPassword']['main_password'];
            $managementSectionAlternativePassword = $cS['ClubSecuritySystemPassword']['alternative_password'];
            $passwordAccessCash = $cS['ClubSecuritySystemPassword']['cash_section_password'];
            $passwordAccessSubscription = $cS['ClubSecuritySystemPassword']['subscription_section_password'];
            $requestPassword = $cS['ClubSecuritySystemPassword']['reload_database_password'];
            $movesbook_staff_pass = $cS['ClubSecuritySystemPassword']['movesbook_staff_password'];
        }

        $clubAdmin = array(
            'main_password' => $adminPassword,
            'alt_password' => $alterPassword,
            'direct_access' => $direct_access,
            'management_password' => $managementSectionPassword,
            'management_alternative_password' => $managementSectionAlternativePassword,
            'pass_access_cash' => $passwordAccessCash,
            'pass_access_subscription' => $passwordAccessSubscription,
            'request_password' => $requestPassword,
            'movesbook_staff_pass' => $movesbook_staff_pass
        );

        // Admin section password
        if (!empty($email)) {

            $commonMethods = new CommonfunctionComponent();

            $Email = new CakeEmail('smtp');
            $Email->from(array($commonMethods->authorEmail() => 'MovesBook'))
                ->to($email)
                ->subject('All Password for club admin')
                ->emailFormat('html')
                ->template('send_club_admin_password')
                ->viewVars(array('clubAdmin' => $clubAdmin, 'username' => $username));
            $Email->send();

            if ($Email->send()) {

                // COadmin section password start
                $this->loadModel("ClubSubadmin");
                $coAdminEmails = array();
                $clubADmins = $this->ClubSubadmin->getRecordByUserID($user_id);

                if (!empty($clubADmins)) {

                    foreach ($clubADmins as $key => $value) {

                        $id = $value['ClubSubadmin']['id'];
                        if (!empty($value['User']['email'])) {

                            $aEmail = $commonMethods->authorEmail();
                            if (!empty($email)) {
                                $aEmail = $email;
                            }

                            $Email2 = new CakeEmail('smtp');
                            $Email2->from(array($aEmail => 'MovesBook'))
                                ->to($value['User']['email'])
                                ->subject('Management section security password')
                                ->emailFormat('html')
                                ->template('send_co_admin_password')
                                ->viewVars(array('password' => $managementSectionPassword, 'username' => $value['User']['username']));

                            $Email2->send();
                        }
                    }
                }
                // COadmin section password end

                $this->loadModel("ClubOperator");
                $coAdminEmails = array();
                $this->ClubOperator->contain("User");
                $clubOperators = $this->ClubOperator->getClubOperatorId($user_id);

                $newData = array();
                $this->loadModel("ClubPasswordMangment");
                $this->loadModel("ClubOperatorSecurityPassword");

                $opt_password = $opt_main_password = $opt_password_management = "";
                foreach ($clubOperators as $key => $value1) {

                    $roundPassword = rand(100000, 1000000);

                    $optPass = $this->ClubOperatorSecurityPassword->find(
                        "first", array(
                        'conditions' => array(
                            'ClubOperatorSecurityPassword.operatoruser_id' => $value1['ClubOperator']['user_id'],
                            'ClubOperatorSecurityPassword.clubuser_id' => $user_id
                        )
                    ));

                    if (!empty($optPass['ClubOperatorSecurityPassword']['password'])) {
                        $opt_password = $optPass['ClubOperatorSecurityPassword']['password'];
                    }

                    $mgPass = $this->ClubPasswordMangment->getRecordByUserID($value1['ClubOperator']['user_id']);

                    if (!empty($mgPass['ClubPasswordMangment']['club_manage_password'])) {

                        $opt_password_management = $mgPass['ClubPasswordMangment']['club_manage_password'];
                    }

                    if (!empty($value1['User'])) {

                        $this->User->id = $value1['User']['id'];
                        if ($this->User->save(array('password' => $roundPassword))) {
                            $opt_main_password = $roundPassword;
                        }

                        $aEmail = $commonMethods->authorEmail();
                        if (!empty($email)) {
                            $aEmail = $email;
                        }

                        $passwords = array(
                            'opt_password' => $opt_password,
                            'opt_password_management' => $opt_password_management,
                            'opt_main_password' => $opt_main_password
                        );

                        $Email2 = new CakeEmail('smtp');
                        $Email2->from(array($aEmail => 'MovesBook'))
                            ->to($value1['User']['email'])
                            ->subject('Operator section passwords')
                            ->emailFormat('html')
                            ->template('send_operator_password')
                            ->viewVars(array('password' => $passwords, 'username' => $value1['User']['username']));

                        $Email2->send();
                    }
                }

                echo "1";
                exit;
            }
        }
        echo "0";
        exit;
    }

    public function addNewExpense()
    {
        $this->layout = "club_clubtab";
        $members = $this->getClubMembers();
        $this->set(compact("members"));
        // $this->loadModel('DeadlineExpensesDetail');
        // $result = $this->DeadlineExpensesDetail->find('all');
        // print_r( $result);die;
    }

    public function payment_of_deadline() //swap
    {
        $this->layout = 'club_clubtab';
        $this->loadModel("club_members");
        $this->loadModel("users");
        $club_members = $this->club_members->find(
            "list", array(
            'conditions' => array(
                'club_members.club_id' => $this->Session->read('Auth.Club.id'),
            ),
            'fields' => array('id', 'user_id')
        ));
        $members_list = $this->users->find(
            'all', array(
            'conditions' => array(
                "users.id" => $club_members,
            ),
            'fields' => array('id', 'username', 'firstname', 'lastname')
        ));

        $members = array();
        foreach ($members_list as $member) {

            $id = $member['users']['id'];
            if (!empty($member['users']['firstname'])) {
                $members[$id] = $member['users']['firstname'] . " " . $member['users']['lastname'];
            } else {
                $members[$id] = $member['users']['username'];
            }
        }
        $this->set(compact("members"));
    }

    public function ajax_payment_of_deadline($id)
    { //swap

        $this->layout = 'ajax';
        $this->loadModel('ClubOperator');
        $this->loadModel('ServicePurchase');
        $this->loadModel('ServicePurchasesDetail');
        $this->ServicePurchase->recursive = 1;
        //$ServicePurchase =$this->ServicePurchase->getRecordBydId($id);
        $spId = $this->ServicePurchase->getAllRecordByUserId($id);
        if (!empty($spId)) {

            $restAmout = $this->ServicePurchase->getRestAmout();
            $ServicePurchase = $this->ServicePurchasesDetail->getRecordBySPId($spId);
            $total = $ServicePurchase['ServicePurchase']['value'];
            $section = $ServicePurchase['ClubSettingSector']['sector_name'] . "-" . $ServicePurchase['ClubSettingService']['service_name'];
            $UserID = $this->Session->read('Auth.User.id');
            $operators = $this->ClubOperator->getUsernameByUserID($UserID);
            $this->set('ServicePurchase', $ServicePurchase);
            $this->set('operators', $operators);
            $this->set('id', $id);
            $this->set('user_id', $id);
            $this->set('total', $total);
            $this->set('section', $section);
            $this->set('restAmout', $restAmout);

        } else {

            echo "5";
            exit();
        }


    }

    public function user_payment_detail($id)
    { //swap

        $this->layout = 'club_clubtab';
        $this->loadModel('ClubOperator');
        $this->loadModel('ServicePurchase');
        $this->loadModel('ServicePurchasesDetail');
        $this->ServicePurchase->recursive = 1;
        $ServicePurchase = $this->ServicePurchase->getRecordBydId($id);

        $restAmount = $this->request->data['rest_give'] - $this->request->data['amount_paid'];
        $previousAmount = $ServicePurchase['ServicePurchase']['pay'] + $this->request->data['amount_paid'];
        $this->__updateServicePurchaseTable($this->request->data, $previousAmount, $restAmount, $id);
        $this->__insertServicePurchaseDetailbeTable($this->request->data, $previousAmount, $restAmount, $id);
        if ($this->request->data['pay_mode'] == 3)
            $this->__savePaymentCreditRecord($this->request->data, $ServicePurchase['ServicePurchase']['user_id']);
        return $this->redirect(array('controller' => 'clubs', 'action' => 'payment_of_deadline'));

    }

    function delete_db_name()
    { //swap

        $this->layout = 'ajax';

        $options = array();
        if ($this->request->is('ajax')) {

            $userID = $this->Session->read('Auth.User.id');

            if (unlink("files/reload-database/user-" . $userID . "/all/" . $this->request->data['db_name'])) {

                unlink("files/reload-database/user-" . $userID . "/member/" . $this->request->data['db_name']);
                unlink("files/reload-database/user-" . $userID . "/setting/" . $this->request->data['db_name']);

                echo "1";
                die;
            } else {

                echo "0";
                die;
            }

        }
    }

    public function movesbook_website_setting()
    {
        $this->layout = 'ajax';
        if ($this->request->is('ajax')) {
            $this->loadmodel('movesbook_website_settings');

            $display_status = $this->request->data['display_status'];

            $club_id_presence = $this->movesbook_website_settings->find('count', array('conditions' => array('club_id' => $this->Session->read('Auth.Club.id'))));
            if ($club_id_presence <= 0) {
                $data['club_id'] = $this->Session->read('Auth.Club.id');
                $data['display_status'] = $this->request->data['display_status'];
                if ($this->movesbook_website_settings->save($data)) {
                    echo "1";
                    exit;
                } else {
                    echo "0";
                    exit;
                }
            } else {
                $this->movesbook_website_settings->id = $this->movesbook_website_settings->field('id', array('club_id' => $this->Session->read('Auth.Club.id')));
                if ($this->movesbook_website_settings->id) {
                    $this->movesbook_website_settings->saveField('display_status', $this->request->data['display_status']);
                    echo "1";
                    exit;

                } else {
                    echo "0";
                    exit;
                }
            }
        }
    }

    public function change_display_official_status()
    {
        $this->layout = 'ajax';
        if ($this->request->is('ajax')) {
            $this->loadmodel('club_site_settings');
            $data = array();
            $display_status = $this->request->data['display_status'];
            $display_value = $this->request->data['display_value'];
            $club_id_presence = $this->club_site_settings->find('count', array('conditions' => array('club_id' => $this->Session->read('Auth.Club.id'))));
            if ($display_value == "top") {
                $data['top_banner'] = $this->request->data['display_status'];
                $data_field = 'top_banner';
            } else if ($display_value == "left") {
                $data['left_frame'] = $this->request->data['display_status'];
                $data_field = 'left_frame';
            } else if ($display_value == "right") {
                $data['right_frame'] = $this->request->data['display_status'];
                $data_field = 'right_frame';
            }
            if ($club_id_presence <= 0) {
                $data['club_id'] = $this->Session->read('Auth.Club.id');
                if ($this->club_site_settings->save($data)) {
                    echo "1";
                    exit;
                } else {
                    echo "0";
                    exit;
                }
            } else {
                $this->club_site_settings->id = $this->club_site_settings->field('id', array('club_id' => $this->Session->read('Auth.Club.id')));
                if ($this->club_site_settings->id) {
                    $this->club_site_settings->saveField($data_field, $this->request->data['display_status']);
                    echo "1";
                    exit;

                } else {
                    echo "0";
                    exit;
                }
            }


        }
    }


    public function official_website_setting()
    {
        $this->layout = 'ajax';
        if ($this->request->is('ajax')) {

            $this->loadmodel('club_site_settings');
            $display_status = $this->request->data['display_status'];
            $club_id_presence = $this->club_site_settings->find('count', array('conditions' => array('club_id' => $this->Session->read('Auth.Club.id'))));
            if ($club_id_presence <= 0) {
                $data['club_id'] = $this->Session->read('Auth.Club.id');
                $data['display_status'] = $this->request->data['display_status'];
                if ($this->club_site_settings->save($data)) {
                    echo "1";
                    exit;
                } else {
                    echo "0";
                    exit;
                }
            } else {
                $this->club_site_settings->id = $this->club_site_settings->field('id', array('club_id' => $this->Session->read('Auth.Club.id')));
                if ($this->club_site_settings->id) {
                    $this->club_site_settings->saveField('display_status', $this->request->data['display_status']);
                    echo "1";
                    exit;

                } else {
                    echo "0";
                    exit;
                }
            }
        }
    }

    public function riepilog_of_cash()
    {

        $this->layout = 'club_clubtab';
        $this->loadModel('ClubSettingSubscriptionTypology');
        $this->loadModel('PaymentInstalment');
        $this->loadModel('PaymentInstalmentDetail');
        $this->loadModel('ClubMembershipPaymentDetail');
        $categoryList = $this->ClubSettingSubscriptionTypology->find('list', array('fields' => array('id', 'activity_name')));

        $this->PaymentInstalment->recursive = 2;
        $PaymentInstalment = $this->PaymentInstalment->find('all');
        $topologyArray = array();

        $ClubMembershipPaymentDetail = $this->ClubMembershipPaymentDetail->find('all');

        // print_r($PaymentInstalment);die;
        foreach ($ClubMembershipPaymentDetail as $key => $row) {
            // print_r($value);die;
            $topologyArray[$row['ClubMembershipPaymentDetail']["typology_id"]][] = $row['ClubMembershipPaymentDetail']["amount_paid"] . "##_##" . $row['ClubMembershipPaymentDetail']["resto_to_give"] . "##_##" . $row['ClubMembershipPaymentDetail']["payment_date"];

        }

        // foreach ($PaymentInstalment as $key => $value) {
        //     foreach ($value['PaymentInstalmentDetail'] as $key1 => $row) {
        //         $topologyArray[$row["typology_id"]][]= $row["cost"]."##_##".$row["cost_installment"]."##_##".$row["payment_date"];
        //     }
        // }


        $this->set(compact('categoryList', 'topologyArray'));
    }

    public function show_riepilog_detail_old()
    {
        $this->layout = 'ajax';
        if ($this->request->is('ajax')) {
            //print_r($this->request->data['record_id']); exit;
            if ($this->request->data['record_id'] == "category") {
                $this->loadModel('ClubSettingSector');
                $getList = $this->ClubSettingSector->getSectorRecord();
                echo json_encode($getList);
                exit;
            }
        }
    }

    public function show_riepilog_detail()
    {

        $this->layout = 'ajax';

        if ($this->request->is('ajax')) {

            $this->loadModel('ClubSettingSubscriptionTypology');
            $this->loadModel('PaymentInstalment');
            $this->loadModel('ClubMembershipPaymentDetail');
            if ($this->request->data['record_id'] != 0)
                $categoryList = $this->ClubSettingSubscriptionTypology->find('list', array('conditions' => array('id' => $this->request->data['record_id']), 'fields' => array('id', 'activity_name')));
            else
                $categoryList = $this->ClubSettingSubscriptionTypology->find(
                    'list', array(
                    'fields' => array('id', 'activity_name')));

            //$this->PaymentInstalment->recursive = 2;
            if (!empty($this->request->data['from_date']) && !empty($this->request->data['to_date'])) {


                $ClubMembershipPaymentDetail = $this->ClubMembershipPaymentDetail->find('all', array('conditions' => array('ClubMembershipPaymentDetail.payment_date BETWEEN ? AND ?' => array($this->request->data['from_date'], $this->request->data['to_date']))));
                //print_r($ClubMembershipPaymentDetail);die;

                // $PaymentInstalmentDetail = $this->PaymentInstalmentDetail->find('list',array('fields'=>array('id','statement_id'),'conditions'=>array('PaymentInstalmentDetail.payment_date BETWEEN ? AND ?' => array( $this->request->data['from_date'],$this->request->data['to_date']))));
                //$PaymentInstalmentDetail = array_unique($PaymentInstalmentDetail);

                // $PaymentInstalment = $this->PaymentInstalment->find('all',array('conditions'=>array('id'=>$PaymentInstalmentDetail)));
                //  print_r($PaymentInstalmentDetail);die;

            } else {
                $ClubMembershipPaymentDetail = $this->ClubMembershipPaymentDetail->find('all');
            }

            $topologyArray = array();


            // print_r($PaymentInstalment);die;
            foreach ($ClubMembershipPaymentDetail as $key => $row) {
                // print_r($value);die;
                $topologyArray[$row['ClubMembershipPaymentDetail']["typology_id"]][] = $row['ClubMembershipPaymentDetail']["amount_paid"] . "##_##" . $row['ClubMembershipPaymentDetail']["resto_to_give"] . "##_##" . $row['ClubMembershipPaymentDetail']["payment_date"];

            }


            // foreach ($PaymentInstalment as $key => $value) {
            //     foreach ($value['PaymentInstalmentDetail'] as $key1 => $row) {
            //         $topologyArray[$row["typology_id"]][]= $row["cost"]."##_##".$row["cost_installment"]."##_##".$row["payment_date"];
            //     }
            // }


            $this->set(compact('categoryList', 'topologyArray'));
        }
    }

    public function report_moment_of_cash()
    {
        $this->layout = 'club_clubtab';
    }

    public function accsess_data()
    {
        $this->layout = 'club_clubtab';
    }


    public function filter_readers_and_subscriptions_by_user()
    {
        $this->layout = '';
        $this->autoRender = true;
        $member_id = $this->request->data['member_id'];

        $this->loadModel('ClubMemberSubscription');

        $conditions = [
            'ClubMemberSubscription.user_id' => $member_id,
            'ClubMemberSubscription.club_id' => $this->Session->read('Auth.Club.id'),
            'ClubMemberSubscription.end_date >=' => date('Y-m-d'),
            'ClubMemberSubscription.delete_status' => 0
        ];

        $access = $this->ClubMemberSubscription->find(
            'all', array(
            'fields' => array(
                'ClubMemberSubscription.id',
                'ClubMemberSubscription.accesses',
                'ClubMemberSubscription.subscription_name',
                'ClubMemberSubscription.used_access',
                'ClubMemberSubscription.start_date',
                'ClubMemberSubscription.end_date',
                'ClubMemberSubscription.membership_until_date',
                'ClubSettingSubscriptionTypology.activity_name',
                'ClubSettingSubscriptionTypology.area_activity'
            ),
            'conditions' => $conditions,
            'order' => array('ClubMemberSubscription.id' => 'DESC')

        ));


        $area_of_activity_ids = array_unique(
            array_map(
                function ($ar) {
                    return $ar['ClubSettingSubscriptionTypology']['area_activity'];
                }, $access));

        $reader_list = [];

        #region get card readers based on member subscriptions
        if (!empty($area_of_activity_ids)) {
            $this->loadModel('ClubCardReader');
            $conditions = [
                'ClubCardReader.club_id' => $this->Session->read('Auth.Club.id'),
                'ClubCardReader.control_mode_id' => [1, 2, 3],
            ];

            #region ask only for readers enabled in current device
            if (isset($this->viewVars['deviceAccessControl']['AccessControlPanel'])) {
                $conditions['ClubCardReader.id'] = explode(',', $this->viewVars['deviceAccessControl']['AccessControlPanel']['readers']);
            }
            #endregion

            // $conditions['OR'] = [];
            // foreach ($area_of_activity_ids as $activity) {
            //     $conditions['OR'][] = "FIND_IN_SET({$activity}, ClubCardReader.activity_list)";
            // }

            $reader_list = $this->ClubCardReader->find(
                'all', [
                'fields' => [
                    'ClubCardReader.id',
                    'ClubCardReader.reader_name',
                    'ClubCardReader.description',
                    'ClubCardReader.activity_list',
                    'ClubCardReaderType.name',
                    'ClubCardControlMode.name'
                ],
                'conditions' => $conditions
            ]);

            if (empty($reader_list)) {
                $access = [];
            }
        }
        #endregion


        if (!empty($access)) {
            $userId = $this->Session->read('Auth.User.id');
            $ClubCardReader = ClassRegistry::init('ClubCardReader')->findRecordClubCardReaderByUserId($userId, false);

            $this->request->data = $ClubCardReader;
            $conditions = array();
            $conditions = array(
                'conditions' =>
                    array('reader_type_id' => $ClubCardReader['ClubCardReader']['reader_type_id'])
            );
            $clubCardreader = ClassRegistry::init('ClubCardreaderSportHallSetting')
                ->FindClubCardreaderSportHallSettingRecordByid($conditions);


            if (!empty($clubCardreader)) {
                $this->request->data = $clubCardreader[0];
            }

            $this->loadModel('MemberOtherdetail');
            $this->loadModel('ClubMemberAdditionalSetting');
            $MemberOtherdetail = $this->MemberOtherdetail->getMemberOtherDetail(
                ['User' => ['id' => $member_id]],
                $this->Session->read('Auth.Club.id')
            );
            $memberAdditionalData = $this->ClubMemberAdditionalSetting->getMemberAdditionalRecord(
                ['User' => ['id' => $member_id]],
                $this->Session->read('Auth.Club.id')
            );

            $this->loadModel('ClubMember');
            $ClubMember = $this->ClubMember->getClubMemberById(['User' => ['id' => $member_id]], $this->Session->read('Auth.Club.id'));
            $ClubMember = (!empty($ClubMember) ? $ClubMember[0] : []);

            $this->loadModel('Athlete');

            $Athlete = $this->Athlete->getDateOfBirth(['User' => ['id' => $member_id]]);
        }

        $this->set(
            compact(
                'MemberOtherdetail',
                'memberAdditionalData',
                'Athlete',
                'access',
                'reader_list',
                'ClubMember',
                'ClubCardReader'
            ));


    }

    public function get_user_data_by_card()
    {

        $this->layout = '';
        $this->autoRender = true;
        $unique_id = $this->request->data['unique_id'];
        $params = $this->request->data['card_type'];
        $random = (bool)$this->request->data['random'];
        $token = $this->random_string(3);

        $card_types = ['magnetic', 'rfidbadge', 'rfidbracelet', 'smartcard'];
        //$params = ($random ? $card_types[array_rand($card_types, 1)] : $params);

        // $unique_id = 1446;
        // $params = 'magnetic';

        // $random = true;


        $card_name = null;
        switch ($params) {
            case 'magnetic':
                $tblFtchName = 'card_magnetic_pools';
                $secndTblFetch = 'card_magnetic_pool_allocations';
                $cnd_id_name = 'card_magneticpool_id';
                $optfields = array(
                    'block_magnetic',
                    'block_magneticbadge_date',
                    'block_magneticbadge_range_from1',
                    'block_magneticbadge_range_to1',
                    'block_magneticbadge_range_from2',
                    'block_magneticbadge_range_to2'
                );
                $optfields2 = array('card_magneticpool_id');
                $card_name = "magnetic_card_list";
                break;
            case 'rfidbadge' :
                $tblFtchName = 'card_rfidbadges_pools';
                $secndTblFetch = 'card_rfidbadges_pool_allocations';
                $cnd_id_name = 'card_rfidbadgespool_id';
                $optfields = array(
                    'block_rfidbadges',
                    'block_rfidbadge_date',
                    'block_rfidbadge_range_from1',
                    'block_rfidbadge_range_to1',
                    'block_rfidbadge_range_from2',
                    'block_rfidbadge_range_to2'
                );
                $optfields2 = array('card_rfidbadgespool_id');
                $card_name = "rfid_card_list";
                break;
            case 'rfidbracelet' :
                $tblFtchName = 'card_rfidbracelets_pools';
                $secndTblFetch = 'card_rfidbracelets_pool_allocations';
                $cnd_id_name = 'card_rfidbraceletspool_id';
                $optfields = array(
                    'block_rfidbracelets',
                    'block_rfidbracelets_date',
                    'block_rfidbracelets_range_from1',
                    'block_rfidbracelets_range_to1',
                    'block_rfidbracelets_range_from2',
                    'block_rfidbracelets_range_to2'
                );
                $optfields2 = array('card_rfidbraceletspool_id');
                $card_name = "braclet_card_list";
                break;
            case 'smartcard' :
                $tblFtchName = 'card_smartcards_pools';
                $secndTblFetch = 'card_smartcards_pool_allocations';
                $cnd_id_name = 'card_smartcardspool_id';
                $optfields = array(
                    'block_smartcards',
                    'block_smartcards_date',
                    'block_smartcards_range_from1',
                    'block_smartcards_range_to1',
                    'block_smartcards_range_from2',
                    'block_smartcards_range_to2'
                );
                $optfields2 = array('card_smartcardspool_id');
                $card_name = "smart_card_list";
                break;
            default :
                $tblFtchName = 'card_magnetic_pools';
                $secndTblFetch = 'card_magnetic_pool_allocations';
                $cnd_id_name = 'card_magneticpool_id';
                $optfields = array(
                    'block_magnetic',
                    'block_magneticbadge_date',
                    'block_magneticbadge_range_from1',
                    'block_magneticbadge_range_to1',
                    'block_magneticbadge_range_from2',
                    'block_magneticbadge_range_to2'
                );
                $optfields2 = array('card_magneticpool_id');
                $card_name = "magnetic_card_list";
                break;

        }

        $this->loadModel($tblFtchName);
        $this->loadModel($secndTblFetch);
        $this->$tblFtchName->User->recursive = 2;

        $result_cards_conds = [
            $tblFtchName . ".clubuser_id" => $_SESSION['Auth']['User']["id"],
            $tblFtchName . ".enable" => "Y"

        ];

        if (!empty($unique_id)) {
            $result_cards_conds[$tblFtchName . '.unique_id'] = $unique_id;
        }

        if ($random) {
            $result_cards_conds[] = " (IF((DAYNAME($tblFtchName.suspended_date) IS NOT NULL AND $tblFtchName.suspended_status = 'Y'), $tblFtchName.suspended_date < DATE_ADD(NOW(), INTERVAL 90 DAY), $tblFtchName.suspended_status = 'N'))";
        }

        $result = $this->$tblFtchName->find(
            'all', [
            'joins' => [
                [
                    'table' => $secndTblFetch,
                    'alias' => $secndTblFetch,
                    'type' => 'INNER',
                    'conditions' => [
                        $tblFtchName . '.id =' . $secndTblFetch . '.' . $cnd_id_name,
                    ]
                ],
                [
                    'table' => 'users',
                    'alias' => 'User',
                    'type' => 'INNER',
                    'conditions' => [
                        $secndTblFetch . '.user_id =User.id',
                    ]
                ]
            ],
            'fields' => [
                'User.*', $tblFtchName . ".*", $secndTblFetch . '.*'
            ],
            'limit' => 1,
            'order' => 'rand()',
            'conditions' => $result_cards_conds

        ]);


        $userId = $this->Session->read('Auth.User.id');
        $ClubCardReader = ClassRegistry::init('ClubCardReader')->findRecordClubCardReaderByUserId($userId, $random);

        $this->request->data = $ClubCardReader;
        $conditions = array();
        $conditions = array(
            'conditions' =>
                array('reader_type_id' => $ClubCardReader['ClubCardReader']['reader_type_id'])
        );
        $clubCardreader = ClassRegistry::init('ClubCardreaderSportHallSetting')
            ->FindClubCardreaderSportHallSettingRecordByid($conditions);


        if (!empty($result)) {
            $result = $result[0];
            $unique_id = $result[$tblFtchName]['unique_id'];
        } else {
            $result = [];
        }

        if (!empty($clubCardreader)) {
            $this->request->data = $clubCardreader[0];
        }


        $this->loadModel('ClubMemberSubscription');
        $this->loadModel('ClubMemberSubscription');
        $this->loadModel('MemberOtherdetail');
        $this->loadModel('MemberOtherdetail');
        $this->loadModel('ClubMemberAdditionalSetting');
        $this->loadModel('Athlete');
        $this->loadModel('ClubMember');
        $this->loadModel('Message');


        $MemberOtherdetail = $this->MemberOtherdetail->getMemberOtherDetail(
            $result,
            $_SESSION['Auth']['User']["Club"][0]["id"]
        );


        $memberAdditionalData = $this->ClubMemberAdditionalSetting->getMemberAdditionalRecord(
            $result,
            $_SESSION['Auth']['User']["Club"][0]["id"]
        );


        $ClubMember = $this->ClubMember->getClubMemberById($result, $_SESSION['Auth']['User']["Club"][0]["id"]);


        $Athlete = $this->Athlete->getDateOfBirth($result);


        $access = $this->ClubMemberSubscription
            ->getMemberAccess(
                $result,
                $_SESSION['Auth']['User']["Club"][0]["id"],
                null,
                $card_name,
                $unique_id
            );


        $messages = $this->Message->getFlashMessageByUserId($result['User']['id']);


        #region Random Reader
        $random_reader = null;
        if (!empty($access)) {
            $this->loadModel('ClubCardReader');
            $limit = ($random ? 1 : null);

            $conditions = [
                'ClubCardReader.club_id' => $this->Session->read('Auth.Club.id'),
                'ClubCardReader.control_mode_id' => [1, 2, 3]
            ];


            #region ask only for readers enabled for the current device
            if (isset($this->viewVars['deviceAccessControl']['AccessControlPanel'])) {
                $conditions['ClubCardReader.id'] = explode(',', $this->viewVars['deviceAccessControl']['AccessControlPanel']['readers']);
            }
            #endregion

            if ($random) {
                $arr_key_random = array_rand($access, 1);
                $conditions[] = "FIND_IN_SET({$access[$arr_key_random]['ClubSettingSubscriptionTypology']['area_activity']}, ClubCardReader.activity_list)";
            } else {

                /**
                 * If is not random mode is a search performed manually.
                 * In the manually searches we need to get only readers related
                 * to any subscription of the user. So in the client, when
                 * choose a reader, we can hide or display the subscriptions
                 */
                $activities_list = array_map(
                    function ($value) {
                        return $value['ClubSettingSubscriptionTypology']['area_activity'];
                    }, $access);
                // $conditions['OR'] = [];
                // foreach ($activities_list as $activity) {
                //     $conditions['OR'][] = " FIND_IN_SET({$activity}, ClubCardReader.activity_list) ";
                // }
            }

            $random_reader = $this->ClubCardReader->find(
                'all', [
                'fields' => [
                    'ClubCardReader.id',
                    'ClubCardReader.reader_name',
                    'ClubCardReader.description',
                    'ClubCardReader.activity_list',
                    'ClubCardReaderType.name',
                    'ClubCardControlMode.name'
                ],
                'limit' => $limit,
                'order' => 'rand()',
                'conditions' => $conditions
            ]);

            if ($limit != null)
                $random_reader = (!empty($random_reader) ? $random_reader[0] : []);

            if (empty($random_reader)) {
                $result = [];
            }

        }

        #endregion


        $this->set(
            compact(
                'result',
                'access',
                'MemberOtherdetail',
                'memberAdditionalData',
                'Athlete',
                'token',
                'ClubMember',
                'ClubCardReader',
                'secndTblFetch',
                'random_reader',
                'unique_id',
                'random',
                'messages'
            ));

    }

    function random_string($length)
    {
        $key = '';
        $keys = array_merge(range(0, 9), range('a', 'z'));

        for ($i = 0; $i < $length; $i++) {

            $key .= ucwords($keys[array_rand($keys)]);
        }
        return $key;
    }

    public function get_user_data_by_card_decrease()
    {
        $this->layout = '';
        $this->autoRender = true;
        $unique_id = $this->request->data['unique_id'];
        $params = $this->request->data['card_type'];

        switch ($params) {

            case 'magnetic':
                $tblFtchName = 'card_magnetic_pools';
                $secndTblFetch = 'card_magnetic_pool_allocations';
                $cnd_id_name = 'card_magneticpool_id';
                $optfields = array(
                    'block_magnetic',
                    'block_magneticbadge_date',
                    'block_magneticbadge_range_from1',
                    'block_magneticbadge_range_to1',
                    'block_magneticbadge_range_from2',
                    'block_magneticbadge_range_to2'
                );
                $column_club_member = 'magnetic_card_list';
                $optfields2 = array('card_magneticpool_id');
                break;
            case 'rfidbadge' :
                $tblFtchName = 'card_rfidbadges_pools';
                $secndTblFetch = 'card_rfidbadges_pool_allocations';
                $cnd_id_name = 'card_rfidbadgespool_id';
                $optfields = array(
                    'block_rfidbadges',
                    'block_rfidbadge_date',
                    'block_rfidbadge_range_from1',
                    'block_rfidbadge_range_to1',
                    'block_rfidbadge_range_from2',
                    'block_rfidbadge_range_to2'
                );
                $column_club_member = 'rfid_card_list';
                $optfields2 = array('card_rfidbadgespool_id');
                break;
            case 'rfidbracelet' :
                $tblFtchName = 'card_rfidbracelets_pools';
                $secndTblFetch = 'card_rfidbracelets_pool_allocations';
                $cnd_id_name = 'card_rfidbraceletspool_id';
                $optfields = array(
                    'block_rfidbracelets',
                    'block_rfidbracelets_date',
                    'block_rfidbracelets_range_from1',
                    'block_rfidbracelets_range_to1',
                    'block_rfidbracelets_range_from2',
                    'block_rfidbracelets_range_to2'
                );
                $column_club_member = 'braclet_card_list';
                $optfields2 = array('card_rfidbraceletspool_id');
                break;
            case 'smartcard' :
                $tblFtchName = 'card_smartcards_pools';
                $secndTblFetch = 'card_smartcards_pool_allocations';
                $cnd_id_name = 'card_smartcardspool_id';
                $optfields = array(
                    'block_smartcards',
                    'block_smartcards_date',
                    'block_smartcards_range_from1',
                    'block_smartcards_range_to1',
                    'block_smartcards_range_from2',
                    'block_smartcards_range_to2'
                );
                $optfields2 = array('card_smartcardspool_id');
                $column_club_member = 'smart_card_list';
                break;
            default :
                $tblFtchName = 'card_magnetic_pools';
                $secndTblFetch = 'card_magnetic_pool_allocations';
                $cnd_id_name = 'card_magneticpool_id';
                $optfields = array(
                    'block_magnetic',
                    'block_magneticbadge_date',
                    'block_magneticbadge_range_from1',
                    'block_magneticbadge_range_to1',
                    'block_magneticbadge_range_from2',
                    'block_magneticbadge_range_to2'
                );
                $optfields2 = array('card_magneticpool_id');
                $column_club_member = 'magnetic_card_list';
                break;

        }

        $this->loadModel($tblFtchName);
        $this->loadModel($secndTblFetch);
        $this->$tblFtchName->User->recursive = 2;

        $result = $this->$tblFtchName->find(
            'all'
            , array(
            'joins' => array(
                array(
                    'table' => $secndTblFetch,
                    'alias' => $secndTblFetch,
                    'type' => 'INNER',
                    'conditions' => array(
                        $tblFtchName . '.id =' . $secndTblFetch . '.' . $cnd_id_name,
                    )
                ),
                array(
                    'table' => 'users',
                    'alias' => 'User',
                    'type' => 'INNER',
                    'conditions' => array(
                        $secndTblFetch . '.user_id =User.id',
                    )
                )
            ),
            'fields' => array('User.*', $tblFtchName . ".*", $secndTblFetch . '.*'),
            'conditions' => array(
                $tblFtchName . '.unique_id' => $unique_id,
                $tblFtchName . ".clubuser_id" => $_SESSION['Auth']['User']["id"]
            )
        ));

        $result = !empty($result) ? $result[0] : array();
        if (!empty($this->request->data['unique_id']) && $result[$tblFtchName]['enable'] == "N") {
            echo 0;
            exit;
        }
        $userId = $this->Session->read('Auth.User.id');
        $ClubCardReader = ClassRegistry::init('ClubCardReader')->findRecordClubCardReaderByUserId($userId);
        //$this->request->data = $ClubCardReader;
        $conditions = array();
        $conditions = array(
            'conditions' =>
                array('reader_type_id' => $ClubCardReader['ClubCardReader']['reader_type_id'])
        );
        $clubCardreader = ClassRegistry::init('ClubCardreaderSportHallSetting')
            ->FindClubCardreaderSportHallSettingRecordByid($conditions);
        //$clubCardreader = $this->ClubCardreaderSportHallSetting->find('all', array('conditions' => array('reader_type_id' => $this->request->data['ClubCardReader']['reader_type_id'])));
        if (!empty($clubCardreader)) {
            // $this->request->data = $clubCardreader[0];
        }
        $this->loadModel('ClubMemberSubscription');
        $this->loadModel('MemberOtherdetail');
        $this->loadModel('MemberOtherdetail');
        $this->loadModel('ClubMemberAdditionalSetting');
        $this->loadModel('Athlete');
        //print_r($this->request->data['card_type']);exit;


        $MemberOtherdetail = $this->MemberOtherdetail->getMemberOtherDetail(
            $result,
            $_SESSION['Auth']['User']["Club"][0]["id"]
        );
        //  print_r($MemberOtherdetail);die;

        $memberAdditionalData = $this->ClubMemberAdditionalSetting->getMemberAdditionalRecord(
            $result,
            $_SESSION['Auth']['User']["Club"][0]["id"]
        );
        $Athlete = $this->Athlete->getDateOfBirth($result);
        // $access =$this->ClubMemberSubscription
        //                             ->getMemberAccess(
        //                                 $result,
        //                                 $_SESSION['Auth']['User']["Club"][0]["id"]
        //                             );
        $access = $this->ClubMemberSubscription
            ->getMemberAccessByCard(
                $result,
                $_SESSION['Auth']['User']["Club"][0]["id"],
                $unique_id,
                $column_club_member,
                $this->request->data['member_id'],
                false
            );


        $this->set(compact('result', 'access', 'MemberOtherdetail', 'memberAdditionalData', 'Athlete'));

    }


    /**
     * Load the course readers related with subscription
     * Used in get_user_data_by_card_decrease screen
     */
    public function load_course_readers_data($course_id)
    {
        $this->layout = '';

        $this->loadModel('ClubCardReader');
        $user_id = $this->request->query['uid'];

        if ((int)$course_id > 0) {
            $conditions_reader = [
                'ClubCardReader.club_id' => $this->Session->read('Auth.Club.id'),
                'ClubCardReader.enable' => 'Y',
                "IF(ClubCardReader.control_mode_id = 6, FIND_IN_SET('{$course_id}', ClubCardReader.service_list), FIND_IN_SET('{$course_id}', ClubCardReader.activity_list))",
                "ClubCardReader.control_mode_id" => [1, 2, 3]
            ];
        } else {
            $conditions_reader = [
                'ClubCardReader.club_id' => $this->Session->read('Auth.Club.id'),
                "ClubCardReader.control_mode_id" => [1, 2, 3],
                "ClubCardReader.enable" => 'Y'
            ];
        }

        $count = $this->ClubCardReader->find(
            'count', [
            'conditions' => $conditions_reader
        ]);
        if ($count > 1) {
            $data = $this->ClubCardReader->find(
                'all', [
                'conditions' => $conditions_reader,
                'fields' => [
                    'ClubCardReader.id',
                    'ClubCardReader.reader_name',
                    'ClubCardReader.reader_port',
                    'ClubCardReader.description',
                    'ClubCardReaderType.name',
                    'ClubCardControlMode.name']
            ]);

            echo json_encode($data);
            exit;
        } else {
            echo json_encode(['result_type' => 'numeric', 'value' => 1]);
            exit;
        }

    }

    public function sub_descrease_access()
    {

        $this->layout = '';
        $this->autoRender = true;

        $this->loadModel('ClubMemberSubscription');
        $updateData = array();

        // the access should not be decreased nor increased
        //$updateData['accesses']=$this->request->data['accesses']-1;
        $updateData['used_access'] = $this->request->data['used_access'] - 1;
        $this->ClubMemberSubscription->id = $this->request->data['id'];
        if ($this->ClubMemberSubscription->save($updateData)) {
            $array = array("accesses" => $this->request->data['accesses'], "used_access" => $updateData['used_access']);
            echo json_encode($array);
            exit;
        } else {
            echo json_encode(array("accesses" => 0, "used_access" => 0));
            exit;
        }


    }

    public function ajax_check_password()
    {

        $this->layout = 'ajax';
        $this->autoRender = true;
        $org_passwrod = $this->request->data["password"];
        $cbs = $this->request->data['cbs'];
        $passwordHasher = new SimplePasswordHasher();
        $status_to_put = (int)($cbs == 0 ? 1 : 0);

        if ($this->Session->read('Auth.User.password') == $passwordHasher->hash($org_passwrod)) {
            if ($cbs !== null) {

                $user_id = $this->Session->read('Auth.User.id');
                $this->loadModel('club_access_settings');
                $this->club_access_settings->query("UPDATE club_access_settings SET access_status = {$status_to_put} WHERE club_user_id = '{$user_id}'");
                $this->Session->write('Auth.User.HaveAccssControlToPanel', $status_to_put);


            }
            echo "1";
            exit;
        } else if ($this->Session->read('Auth.User.alternate_pass') == $passwordHasher->hash($org_passwrod)) {
            if ($cbs !== null) {
                $user_id = $this->Session->read('Auth.User.id');
                $this->loadModel('club_access_settings');
                $this->club_access_settings->query("UPDATE club_access_settings SET access_status = {$status_to_put} WHERE club_user_id = '{$user_id}';");
                $this->Session->write('Auth.User.HaveAccssControlToPanel', $status_to_put);
            }
            echo "1";
            exit;
        } else {
            $this->Session->write('Auth.User.HaveAccssControlToPanel', 0);
            echo "0";
            exit;
        }

    }

    public function ajax_change_checkpoint_setting()
    {

        $this->layout = 'ajax';
        $this->autoRender = true;
        $id = $this->request->data["id"];
        $access_control['ClubCardreaderSportHallSetting']['access_control'] = $this->request->data["access_control"];
        $this->loadModel('ClubCardreaderSportHallSetting');
        $this->ClubCardreaderSportHallSetting->id = $id;
        if ($this->ClubCardreaderSportHallSetting->save($access_control['ClubCardreaderSportHallSetting'])) {
            echo "1";
            exit;
        } else {
            echo "0";
            exit;
        }


    }


    public function payment_post()
    {
        $this->layout = "ajax";
        $this->autoRendor = false;

        $this->loadModel("PaymentInstalment");
        $this->loadModel("ClubMembershipPaymentDetail");
        $this->loadModel("PaymentInstalmentDetail");
        $clubId = $this->Session->read('Auth.Club.id');
        $userId = $this->Session->read('Auth.User.id');

        if ($this->request->is("post")) {
            //print_r($this->request->data); exit;
            $postData = $this->request->data;

            $installmentIds = $postData['installment_ids'];
            $rest_give = $postData['rest_give'];
            $encid = $postData['encid'];
            $installments = $this->PaymentInstalment->getRecordsByIds($installmentIds);
            //print_r($installments); exit;

            $amount = array();
            $this->loadModel('ServicePurchase');
            foreach ($installments as $value) {
                if ($postData['amount_paid'] >= $value['PaymentInstalment']['cost_installment']) {
                    $postData['amount_paid'] = $postData['amount_paid'] - $value['PaymentInstalment']['cost_installment'];
                    $this->PaymentInstalment->id = $value['PaymentInstalment']['id'];
                    $this->PaymentInstalment->saveField('rest_installment', '0');
                    $total_rest = $postData['debt_total'] - $postData['amount_paid'];

                    $service_data = array(
                        'user_id' => $postData['user_id'],
                        'operator_id' => $postData['operator_id'],
                        'pay' => $value['PaymentInstalment']['cost_installment'],
                        'rest' => $total_rest,
                        'paydate' => $postData['date_payment'],
                        'casual' => $postData['description'],
                        'payment_type' => $postData['payment_type'],
                        'pay_mode' => $postData['pay_mode'],
                        'tax_doc' => $postData['tax_doc'],
                        'amount' => $postData['debt_total']
                    );
                    $this->ServicePurchase->create();
                    $this->ServicePurchase->save($service_data);
                }
            }


            $paidAmount = array();
            foreach ($installments as $value) {
                $paidAmount[] = $value['PaymentInstalment']['rest_installment'];
            }
            $paidAmount = floatval(array_sum($paidAmount));
            $postpaidAmount = floatval($postData['amount_paid']);
            $TotalPaidAmount = floatval($postData['amount_paid']);


            $tax_doc = 0;
            if ($postData['tax_doc'] == 'on') {
                $tax_doc = 1;
            }

            $password_status = 0;
            if ($postData['password_status'] == 'on') {

                $password_status = 1;

                if (!empty($postData['operator_password'])) {

                    $this->loadModel("User");
                    $checkOptPassword = $this->User->checkOptPassword($userId, $postData['operator_password']);

                    if (!$checkOptPassword) {

                        $this->Session->setFlash(__('Incorrect your password.'));
                        return $this->redirect(array('controller' => 'users', 'action' => 'payment_detail', $encid));
                    }
                }

            }

            $tpId = $postData['typology_id'];
            $sbId = $postData['subscription_id'];

            $paidInstallments = array();
            foreach ($installments as $value) {
                $id = $value['PaymentInstalment']['id'];
                $rest = $value['PaymentInstalment']['rest_installment'];
                $paidInstallments[$id] = $rest;
            }


            if ($paidAmount == $postpaidAmount) {

                $this->PaymentInstalment->updateAll(
                    array('PaymentInstalment.rest_installment' => "'0'"),
                    array('PaymentInstalment.id' => $installmentIds)
                );

                $restTotals = $this->PaymentInstalment->getTotalRemainingRestBysubID($sbId);
                $inserts = array(
                    'typology_id' => $tpId,
                    'subscription_id' => $sbId,
                    'user_id' => $postData['user_id'],
                    'club_id' => $clubId,
                    'type_of_payment' => $postData['payment_type'],
                    'debt_total' => $postData['debt_total'],
                    'debt_expired' => $postData['debt_expire'],
                    'description' => $postData['description'],
                    'amount_paid' => $postData['amount_paid'],
                    'pay_mode' => $postData['pay_mode'],
                    'tax_doc' => $tax_doc,
                    'payment_date' => $postData['date_payment'],
                    'operater_id' => $postData['operator_id'],
                    'password_status' => $password_status,
                    //'password'          => $postData['operator_password'],
                    'pay_with' => $postData['pay_with'],
                    'resto_to_give' => $postData['rest_give'],
                    'active' => 'Y',
                    'installment_count' => count($installmentIds),
                    'total_paid_installment' => $TotalPaidAmount,
                    'ramining_rest' => $restTotals
                );

                $record = $this->ClubMembershipPaymentDetail->find(
                    "first", array(
                    'conditions' => array(
                        'ClubMembershipPaymentDetail.active' => 'Y',
                        'ClubMembershipPaymentDetail.typology_id' => $tpId,
                        'ClubMembershipPaymentDetail.subscription_id' => $sbId
                    )
                ));
                $id = $record['ClubMembershipPaymentDetail']['id'];


                if ($this->ClubMembershipPaymentDetail->save($inserts)) {

                    if (!empty($id)) {

                        $this->ClubMembershipPaymentDetail->id = $id;
                        $this->ClubMembershipPaymentDetail->save(array('active' => 'N'));
                    }

                    $updatedData = $this->PaymentInstalment->getRecordsByIds($installmentIds);
                    $statementId = $this->ClubMembershipPaymentDetail->getLastInsertID();

                    $insertInstallment = array();
                    foreach ($updatedData as $key => $value) {

                        $data = $value['PaymentInstalment'];
                        $pId = $data['id'];
                        $restUpdateAmount = $paidInstallments[$pId];

                        $insertInstallment[] = array(
                            'subscription_id' => $data['subscription_id'],
                            'statement_id' => $statementId,
                            'typology_id' => $data['typology_id'],
                            'tipology' => $data['tipology'],
                            'subscription_name' => $data['subscription_name'],
                            'payment_date' => $postData['date_payment'],
                            'price_list_id' => $data['price_list_id'],
                            'cost' => $data['cost'],
                            'cost_installment' => $data['cost_installment'],
                            'rest' => $data['rest'],
                            'rest_installment' => $restUpdateAmount,
                            'installment_count' => $data['installment_count'],
                            'vendor_id' => $postData['operator_id'],
                            'start_date' => $data['start_date'],
                            'end_date' => $data['end_date'],
                            'active' => 'Y'
                        );

                    }

                    $this->PaymentInstalmentDetail->saveAll($insertInstallment);
                }

                $this->Session->setFlash(__('Installments paid successfully.'));
                return $this->redirect(array('controller' => 'users', 'action' => 'payment_detail', $encid));

            } else {

                $data = $this->PaymentInstalment->getRestAmountList($installmentIds, 'asc');
                $resultArray = array();
                $resultArray2 = array();

                if (!empty($data)) {
                    foreach ($data as $key => $value) {


                        if ($value < $postpaidAmount) {

                            $resultArray[] = array(
                                'id' => $key,
                                'rest_installment' => 0
                            );
                            $postpaidAmount = $postpaidAmount - $value;
                            $resultArray2[$key] = $value;
                        } else {

                            $resultArray[] = array(
                                'id' => $key,
                                'rest_installment' => abs($postpaidAmount - $value)
                            );
                            $postpaidAmount = $postpaidAmount - $value;

                            $newValue = abs($postpaidAmount);
                            if ($newValue < $value) {
                                $resultArray2[$key] = abs($postpaidAmount);
                            }

                            if ($postpaidAmount < 0)
                                $postpaidAmount = 0;
                        }

                    }

                    $newInstallmentIds = array();
                    foreach ($resultArray2 as $key => $value) {
                        $newInstallmentIds[] = $key;
                    }


                    if ($this->PaymentInstalment->saveAll($resultArray)) {

                        /*Payment details insert data start*/
                        $restTotals = $this->PaymentInstalment->getTotalRemainingRestBysubID($sbId);
                        $inserts = array(
                            'typology_id' => $tpId,
                            'subscription_id' => $sbId,
                            'user_id' => $postData['user_id'],
                            'club_id' => $clubId,
                            'type_of_payment' => $postData['payment_type'],
                            'debt_total' => $postData['debt_total'],
                            'debt_expired' => $postData['debt_expire'],
                            'description' => $postData['description'],
                            'amount_paid' => $postData['amount_paid'],
                            'pay_mode' => $postData['pay_mode'],
                            'tax_doc' => $tax_doc,
                            'payment_date' => $postData['date_payment'],
                            'operater_id' => $postData['operator_id'],
                            'password_status' => $password_status,
                            'password' => $postData['operator_password'],
                            'pay_with' => $postData['pay_with'],
                            'resto_to_give' => $postData['rest_give'],
                            'active' => 'Y',
                            'installment_count' => count($resultArray2),
                            'total_paid_installment' => $TotalPaidAmount,
                            'ramining_rest' => $restTotals
                        );

                        $record = $this->ClubMembershipPaymentDetail->find(
                            "first", array(
                            'conditions' => array(
                                'ClubMembershipPaymentDetail.active' => 'Y',
                                'ClubMembershipPaymentDetail.typology_id' => $tpId,
                                'ClubMembershipPaymentDetail.subscription_id' => $sbId
                            )
                        ));
                        $id = $record['ClubMembershipPaymentDetail']['id'];

                        if ($this->ClubMembershipPaymentDetail->save($inserts)) {

                            if (!empty($id)) {

                                $this->ClubMembershipPaymentDetail->id = $id;
                                $this->ClubMembershipPaymentDetail->save(array('active' => 'N'));
                            }

                            $updatedData = $this->PaymentInstalment->getRecordsByIds($newInstallmentIds);
                            $statementId = $this->ClubMembershipPaymentDetail->getLastInsertID();

                            $insertInstallment = array();
                            foreach ($updatedData as $key => $value) {

                                $data = $value['PaymentInstalment'];
                                $pId = $data['id'];
                                $rest = $resultArray2[$pId];

                                $insertInstallment[] = array(
                                    'subscription_id' => $data['subscription_id'],
                                    'statement_id' => $statementId,
                                    'typology_id' => $data['typology_id'],
                                    'tipology' => $data['tipology'],
                                    'subscription_name' => $data['subscription_name'],
                                    'payment_date' => $postData['date_payment'],
                                    'price_list_id' => $data['price_list_id'],
                                    'cost' => $data['cost'],
                                    'cost_installment' => $data['cost_installment'],
                                    'rest' => $data['rest'],
                                    'rest_installment' => $rest,
                                    'installment_count' => $data['installment_count'],
                                    'vendor_id' => $postData['operator_id'],
                                    'start_date' => $data['start_date'],
                                    'end_date' => $data['end_date'],
                                    'active' => 'Y'
                                );

                            }

                            $this->PaymentInstalmentDetail->saveAll($insertInstallment);

                            $this->Session->setFlash(__('Installments paid successfully.'));
                            return $this->redirect(array('controller' => 'users', 'action' => 'payment_detail', $encid));

                        }
                        /*Payment details insert data end*/
                    }

                    $this->Session->setFlash(__('Error occured.'));
                    return $this->redirect(array('controller' => 'users', 'action' => 'payment_detail', $encid));

                }

            }

        }
    }


    public function add_club_sponser()
    {
        $this->layout = 'club_clubtab';
    }

    public function help_page_ajax_data($value = '')
    {
        $this->layout = 'ajax';
        $this->loadmodel('help_pages');
        $this->loadmodel('site_pages');
        $this->loadmodel('language_values');
        $postData = $this->request->data;
        $pgnametxt = $searchsection = "";

        if ($this->RequestHandler->isAjax()) {

            $pgnametxt = !empty($postData['page_text_input']) ? $postData['page_text_input'] : '';
            $searchsection = !empty($postData['searchSectionID']) ? $postData['searchSectionID'] : '';

            $this->layout = 'ajax';


            if (!empty($postData['lang'])) {

                $limit = 5;
                if (!empty($postData['get_limit'])) {
                    $limit = $postData['get_limit'];
                }


                if (!empty($postData['page_text_input'])) {

                    $siteConditions['site_pages.pagename LIKE'] = '%' . $postData['page_text_input'] . '%';

                    if (!empty($postData['searchSectionID'])) {
                        $siteConditions['site_pages.section'] = $postData['searchSectionID'];
                    }

                    $options = array(

                        'fields' => array(
                            'site_pages.id',
                            'site_pages.pagename',
                            'site_pages.section'
                        ),
                        'order' => array(
                            'site_pages.pagename' => 'ASC'
                        ),
                        'limit' => $limit,
                        'conditions' => $siteConditions
                    );
                } else {
                    $options = array(

                        'fields' => array(
                            'site_pages.id',
                            'site_pages.pagename',
                            'site_pages.section'
                        ),
                        'order' => array(
                            'site_pages.pagename' => 'ASC'
                        ),
                        'limit' => $limit
                    );
                }

                $this->Paginator->settings = $options;
                $sitepages = $this->Paginator->paginate('site_pages');

                $langId = $postData['lang'];
                $this->set('langId', $langId);

                foreach ($sitepages as $key => $value) {

                    $helppages = $this->help_pages->find(
                        'first', array(
                        'conditions' => array(
                            'sitepage_id' => $value['site_pages']['id'],
                            'lang_id' => $postData['lang']
                        ),
                        'fields' => array('id', 'user_id', 'sitepage_id', 'lang_id', 'name_assigned')
                    ));

                    $sitepages[$key] = $value;

                    $sitepages[$key]['site_pages']['title'] = "";
                    if (!empty($helppages['help_pages']['name_assigned'])) {
                        $sitepages[$key]['site_pages']['title'] = $helppages['help_pages']['name_assigned'];
                    }
                }
            }

        }

        $languageDetl = $this->language_values->find(
            'list', array(
            'fields' => array('id', 'lang_name')
        ));

        $helppages = $this->help_pages->find(
            'all', array(
            'fields' => array('id', 'user_id', 'sitepage_id', 'lang_id')
        ));

        $ContentExistAry = array();
        foreach ($helppages as $keyh => $valueh) {
            $ContentExistAry[$valueh['help_pages']['sitepage_id']][] = $valueh['help_pages']['lang_id'];
        }

        $this->set(
            compact(
                'languageDetl', 'sitepages', 'ContentExistAry',
                'limit', 'pgnametxt', 'searchsection'));

    }

    public function html_editing_page_ajax_data()
    {
        $this->layout = 'ajax';
        $this->loadmodel('help_pages');
        $this->loadmodel('language_values');
        $this->loadmodel('help_pages');
        $this->loadmodel('site_pages');
        $this->loadmodel('build_fors');
        $this->loadmodel('help_html_page_sections');
        $this->loadmodel('language_values');

        if ($this->Session->read('Auth.User.username') == 'operator') {
            $get_operator_id = explode('_', $this->Session->read('Auth.User.id'));
            $user_id = $get_operator_id[1];
        } else {
            $user_id = $this->Session->read('Auth.User.id');
        }

        $langid = 1;
        if ($this->request->data['lang']) {
            $langid = $this->request->data['lang'];
        }

        $user_nam = $this->Session->read('Auth.User.username');
        //        $help_html_pages;
        //        $help_html_pages;
        //        $help_html_pages1;
        if (isset($_COOKIE['lg']) && $_COOKIE['lg'] != '') {
            $languageCheck = $_COOKIE['lg'];
        } else {
            $languageCheck = 'en';
        }

        $result = $this->build_fors->find(
            'all', array(
            'joins' => array(
                array(
                    'table' => 'help_html_pages',
                    'alias' => 'page',
                    'type' => 'INNER',
                    'conditions' => array(
                        'page.build_for = build_fors.id'
                    )
                )),
            'fields' => array(
                'build_fors.name',
                'page.id'
            ),
            'group' => array(
                'page_title'
            )
        ));


        if (!empty($this->request->query['page'])) {
            $page = $this->request->query['page'];
        } else {
            $page = 1;
        }


        if (!empty($this->request->data['pagin'])) {
            $limit = $this->request->data['pagin'];
        } else {
            $limit = 5;
        }

        $pageLimit = ($page * $limit) - $limit;

        $build_for_value = array();
        foreach ($result as $key => $value) {
            $build_for_value[$value['page']['id']] = $value['build_fors']['name'];
        }

        $lang_selected = '';
        $selected_lang = '';
        $language_id = $this->language_values->find(
            'first', array(
            'conditions' => array(
                'language_values.lang_name' => $languageCheck
            ),
            'fields' => array('id')
        ));

        $this->loadmodel('help_html_pages');
        $conditions = array();

        if ($this->request->is('post')) {

            $lang_selected = $this->request->data['selected_value'];
            $selected_lang = $this->request->data['selected_lang'];
            $enable = $this->request->data['enable'];

            $this->set(compact('lang_selected', $lang_selected, 'selected_lang', $selected_lang));

            if (($this->request->data['searchsection'] == '')
                && ($this->request->data['pgnametxt'] == ''
                    && empty($this->request->data['section_id'])
                    && empty($this->request->data['build_for']['id']))
            ) {

                $conditions['conditions']['lang_id'] = $langid;
                if (!empty($enable)) {
                    $conditions['conditions']['enable_document'] = $enable;
                }
                $conditions['order'] = array('help_html_pages.id' => 'DESC');

                $this->Session->setFlash(__('Please Give Search Criteria.'));
                $this->set(compact('searchsection', 'pgnametxt', 'help_html_pages'));

            } else {

                $section_id = $this->request->data['section_id'];
                $build_for_id = $this->request->data['buldfor'];

                if (!empty($section_id) && !empty($build_for_id)) {

                    if (!empty($enable)) {
                        $conditions['conditions']['enable_document'] = $enable;
                    }
                    $conditions = array(
                        'conditions' => array(
                            'section_id' => $section_id,
                            'build_for' => $build_for_id,
                            'lang_id' => $langid
                        ),
                        'group' => array('page_title'),
                        'order' => array('help_html_pages.page_title' => 'ASC')
                    );


                } else if ((!empty($section_id) && empty($this->request->data['build_for']['id'])) || (empty($section_id) && !empty($build_for_id))) {

                    if (!empty($enable)) {
                        $conditions['conditions']['enable_document'] = $enable;
                    }
                    $conditions['conditions'] = array(
                        'lang_id' => $langid,
                        array(
                            'OR' => array(
                                array(
                                    'section_id' => $section_id
                                ),
                                array(
                                    "build_for" => $build_for_id
                                )
                            )
                        )
                    );

                    $conditions['group'] = array('page_title');
                    $conditions['order'] = array('help_html_pages.page_title' => 'ASC');


                } else if (!empty($this->request->data['pgnametxt'])) {

                    $pgnametxt = $this->request->data['pgnametxt'];
                    if ($this->Session->read('Auth.User.username') != 'operator') {

                        if (!empty($enable)) {
                            $conditions['conditions']['enable_document'] = $enable;
                        }
                        $conditions['conditions'] = array(
                            'page_title LIKE' => trim($pgnametxt),
                            'lang_id' => $langid,
                        );

                        $conditions['group'] = array('page_title');
                        $conditions['order'] = array('help_html_pages.page_title' => 'ASC');

                    } else {

                        if (!empty($enable)) {
                            $conditions['conditions']['enable_document'] = $enable;
                        }

                        $conditions['conditions'] = array(
                            'page_title LIKE' => trim($pgnametxt),
                            'lang_id' => $langid,
                        );

                        $conditions['group'] = array('page_title');
                        $conditions['order'] = array('help_html_pages.page_title' => 'ASC');

                    }

                } else if ($this->request->data['searchsection'] == "by Alphabetical") {

                    if (!empty($enable)) {
                        $conditions['conditions']['enable_document'] = $enable;
                    }
                    $conditions['conditions'] = array(
                        'lang_id' => $langid,
                    );
                    $conditions['group'] = array('page_title');
                    $conditions['order'] = array('help_html_pages.page_title' => 'ASC');

                } else if ($this->request->data['searchsection'] == "by Section") {

                    $help_html_pages1 = $this->help_html_pages->find(
                        'all', array(
                        'group' => array('page_title'),
                        'order' => array('help_html_pages.section_id' => 'ASC')
                    ));

                    $section = $this->help_html_pages->find(
                        'all', array(
                        'joins' => array(
                            array(
                                'table' => 'help_html_page_sections',
                                'alias' => 'sections',
                                'type' => 'INNER',
                                'conditions' => array(
                                    'sections.id = help_html_pages.section_id'
                                )
                            )
                        ),
                        'fields' => array(
                            'sections.section',
                            'help_html_pages.id'
                        ),
                        'group' => array(
                            'help_html_pages.page_title'
                        ),
                        'order' => array('sections.section' => 'ASC')
                    ));
                    $ii = 0;
                    foreach ($section as $key => $value) {
                        $help_html_pages[$ii] = $help_html_pages1[$ii];
                        $ii++;
                    }

                } else if ($this->request->data['searchsection'] == "by Existing in my language") {
                    //echo "amol8";
                    if ($this->Session->read('Auth.User.username') != 'operator') {
                        $lang_id = $language_id['language_values']['id'];
                    } else {
                        $lang_id = $this->Session->read('Auth.User.work_lang_id');
                    }

                    if (!empty($enable)) {
                        $conditions['conditions']['enable_document'] = $enable;
                    }
                    $conditions['conditions'] = array(
                        'lang_id' => $langid,
                    );

                    $conditions['group'] = array('page_title');
                    $conditions['order'] = array('help_html_pages.page_title' => 'ASC');

                }


                $searchsection = $this->request->data['searchsection'];
                $pgnametxt = $this->request->data['pgnametxt'];
                $this->set(compact('searchsection', 'pgnametxt', 'help_html_pages'));
            }

        } else {

            if ($this->Session->read('Auth.User.username') == 'operator') {

                if (!empty($enable)) {
                    $conditions['conditions']['enable_document'] = $enable;
                }
                $conditions['conditions'] = array(
                    'lang_id' => $langid,
                );
                $conditions['order'] = array('help_html_pages.id' => 'ASC');


                $help_html_pages1 = $this->help_html_pages->find('all', array($conditions));

                $key_value = array();
                foreach ($help_html_pages1 as $key => $value) {

                    if (!in_array($value['help_html_pages']['page_title'], $key_value)) {
                        $key_value[$key] = $value['help_html_pages']['page_title'];
                        $help_html_pages[$key] = $value;
                    }
                }
            } else {

                if (!empty($enable)) {
                    $conditions['conditions']['enable_document'] = $enable;
                }

                $conditions['conditions'] = array(
                    'lang_id' => $langid,
                );
                $conditions['order'] = array('help_html_pages.id' => 'ASC');

                $help_html_pages1 = $this->help_html_pages->find('all', array($conditions));

                $help_html_pages = array();
                $key_value = array();
                foreach ($help_html_pages1 as $key => $value) {

                    if (!in_array($value['help_html_pages']['page_title'], $key_value)) {
                        $key_value[$key] = $value['help_html_pages']['page_title'];
                        $help_html_pages[$key] = $value;
                    }
                }
            }
        }

        $paginConditions['limit'] = $limit;
        $paginConditions['offset'] = $pageLimit;
        $dataConditions = array_merge($conditions, $paginConditions);

        $help_html_pages = $this->help_html_pages->find('all', $dataConditions);
        $totalRecordCOunt = $this->help_html_pages->find('count', $conditions);

        //For Import Pages We need all list of pages
        $this->set(compact('lang_selected', $lang_selected));
        $imp_sitepages = $this->site_pages->find(
            'all', array(
            'fields' => array('id', 'pagename', 'section')
        ));

        $languageDetl = $this->language_values->find(
            'list', array(
            'fields' => array('id', 'lang_name')
        ));

        $helppages = $this->help_pages->find(
            'all', array(
            'fields' => array('id', 'user_id', 'sitepage_id', 'lang_id')
        ));

        $ContentExistAry = array();
        //  foreach ($helppages as $keyh => $valueh) {
        //    $ContentExistAry[$valueh['help_pages']['sitepage_id']][]=$valueh['help_pages']['lang_id'];
        //    }

        if ($lngUrlStats != NULL) {
            $lngUrlStatus = $lngUrlStats;
        } else {
            $lngUrlStatus = '0';
        }

        $html_page_section = array();
        $build_for = $this->build_fors->find('list', array('fields' => array('id', 'name')));
        $html_page_section = $this->help_html_page_sections->find(
            'list', array(
            'fields' => array('id', 'section')
        ));

        $section_name = array();
        $i = 0;
        foreach ($help_html_pages as $key => $value) {

            $page_title = $value['help_html_pages']['page_title'];
            $get_lang_id = $this->help_html_pages->find(
                'all', array(
                'conditions' => array('page_title' => $page_title),
                'fields' => array('id', 'lang_id', 'page_title')
            ));

            foreach ($get_lang_id as $key_lang => $value_lang) {
                $ContentExistAry[$value['help_html_pages']['id']][$value_lang['help_html_pages']['id']] = $value_lang['help_html_pages']['lang_id'];
            }

            $section_name[$value['help_html_pages']['id']] = $html_page_section[$value['help_html_pages']['section_id']];
        }

        $this->set(compact('lang_selected', $lang_selected, 'selected_lang', $selected_lang));
        //$buid_for=array("Mail"=>'Mail','Inside link'=>'Inside link','Standalone'=>'Standalone');
        //$display_mode=array("Same page"=>'Same page','New tab'=>'New tab','New page'=>'New page');
        //$section_link=array("replay_to_subscription"=>'Reply to subscription done','automatic_mail'=>'Automatic mail when subscription expire');

        $pagination = $this->paginationGenerator($limit, $page, $totalRecordCOunt);

        $this->set(compact('display_mode', 'languageDetl', 'sitepages', 'ContentExistAry', 'imp_sitepages', 'build_for_value', 'lngUrlStatus', 'build_for', 'html_page_section', 'buid_for', 'help_html_pages', 'section_name', 'user_name', 'section_link', 'isAjax', 'langid', 'pagination', 'totalRecordCOunt', 'limit'));
    }


    /*
     * Method to load the confirm password form
     * load in a modal
     * */
    public function confirm_pwd()
    {
        $this->layout = 'ajax';
        $this->autoRender = true;

        $callback = $this->request->query['clbk'] ? $this->request->query['clbk'] : null;
        $callback_param = json_encode($this->request->query);


        $this->set(compact('callback', 'callback_param'));
    }

    /*
     * Method to load the modal with readers
     * for the current selected device
     * @param int $access_id id of the access_control_panel
     * */
    public function readers_for_device($access_id = null)
    {
        $this->layout = 'ajax';
        $this->autoRender = true;
        $device_id = $this->request->query['device_id'];


        $this->loadModel('AccessControlPanel');


        if ($this->request->is('post')) {
            $data_to_insert = [
                'AccessControlPanel' => [
                    'id' => $access_id,
                    'device_id' => (int)$this->request->data['device_id'],
                    'access_control' => $this->request->data['access_control'] ? 0 : 1,
                    'access_control_secondary' => (int)$this->request->data['access_contol_secondary'],
                    'identify_by_password' => (int)$this->request->data['identify_by_password'],
                    'readers' => implode(',', $this->request->data['reader'])
                ]
            ];

            if (empty($access_id)) {
                $this->AccessCOntrolPanel->create();
            }

            $this->AccessControlPanel->save($data_to_insert);
            $this->Session->setFlash(__('The device was successfully updated'));


            $this->redirect(array('action' => 'enable_password'));
        }

        $access_control_panel = $this->AccessControlPanel->find(
            'first', [
            'conditions' => ['AccessControlPanel.device_id' => $device_id]
        ]);


        $this->loadModel('ClubCardReader');
        $card_readers = $this->ClubCardReader->find(
            'all', [
            'conditions' => [
                'ClubCardReader.club_id' => $this->Session->read('Auth.Club.id'),
                'ClubCardReader.control_mode_id' => [1, 2, 3],
                'ClubCardReader.enable' => 'Y'
            ],
            'order' => ['ClubCardReader.num_order ASC']
        ]);


        $this->set(compact('access_control_panel', 'card_readers', 'device_id'));
    }


    public function messages($type = 'members')
    {
        $this->layout = 'club_clubtab';

        $conditions = [
            'Message.sender_id' => $this->Session->read('Auth.User.id'),
            'Message.msg_moto' => 'internal_message'
        ];

        if ($this->request->query['active']) {
            $conditions['DATE(Message.display_until_date) >='] = date('Y-m-d');
        }

        $limit = (empty($this->request->query['limit']) ? 5 : $this->request->query['limit']);

        #region search
        if ($this->request->query['search']) {
            $search = $this->request->query['search'];
            $conditions['OR'] = [
                'Message.message_body LIKE' => "%{$search}%",
                'u.firstname LIKE' => "%{$search}%",
                'u.lastname LIKE' => "%{$search}%",
                'u.username LIKE' => "%{$search}%",
            ];
        }
        #endregion


        #region order by
        $order = "Message.sending_time DESC";
        if ($reqQuery['ordering']) {
            switch ($reqQuery['ordering']) {
                case 'oldest':
                    $order = "Message.sending_time ASC";
                    break;
            }
        }
        #endregion


        $pagination = [
            'fields' => [
                'Message.id',
                'Message.message_body',
                'Message.display_until_date',
                'Message.play_audio',
                'u.firstname',
                'u.lastname',
                'att.name'
            ],
            'limit' => $limit,
            'order' => $order,
            'joins' => [
                [
                    'table' => 'users',
                    'alias' => 'u',
                    'type' => 'LEFT',
                    'conditions' => [
                        'Message.reciver_id = u.id'
                    ]
                ],
                [
                    'table' => 'attachments',
                    'alias' => 'att',
                    'type' => 'LEFT',
                    'conditions' => [
                        'Message.id = att.message_id'
                    ]
                ]
            ],
            'conditions' => $conditions,
            'recursive' => -1
        ];

        $this->loadModel('Message');
        $this->paginate = $pagination;

        $messages_to_members = $this->paginate('Message');
        $this->set(compact('messages_to_members'));

    }


    public function paused()
    {
        $this->layout = 'basic_layout';
    }


    public function screensavers()
    {
        $this->layout = 'ajax';
        $this->autoRender = true;
        $list = $this->request->query['list'];
        $this->set(compact('list'));
    }


    /**
     * Remove an actual background
     * Method called by ajax function
     */
    public function remove_background()
    {
        $this->layout = 'ajax';
        $this->autoRender = false;

        $file = $this->request->data['file_to_delete'];
        $role = (empty($this->request->data['role']) ? 8 : $this->request->data['role']);
        $fileType = (empty($this->request->data['f_type']) ? 'img' : $this->request->data['f_type']);
        $this->loadModel('Banner');
        $banner = $this->Banner->find(
            'first', [
            'conditions' => [
                'profile_background' => $file,
                'user_id' => $this->Session->read('Auth.User.id'),
                'role_id' => (int)$this->Session->read('Auth.User.role_id')
            ],
            'fields' => ['profile_background', 'id'],
            'recursive' => -1
        ]);

        if ($banner) {
            $bannerPath = WWW_ROOT . '/' . $fileType . '/';
            $filePathName = $bannerPath . $banner['Banner']['profile_background'];
            if (file_exists($filePathName)) {
                unlink($filePathName);
                $this->Banner->delete($banner['Banner']['id']);
                echo 1;
                exit;
            }
        } else {
            echo 0;
            exit;
        }

    }

    /**
     * Save new banner image. Method called by ajax
     * function
     */
    public function ajax_new_banner()
    {
        $this->layout = 'ajax';
        $this->autoRender = false;

        if ($this->request->is('ajax')) {
            
            $base_data_split = explode(',', substr($this->request->data['file'], 5), 2);
            $mime = $base_data_split[0];
            $mime_split_without_base64 = explode(';', $mime, 2);
            $mime_split = explode('/', $mime_split_without_base64[0], 2);

            $ext_perm = ['jpg', 'png', 'jpeg', 'gif'];
            if (!is_null($mime_split)) {
                $ext_perm = ($mime_split[0] == 'video' ? ['mpeg', 'mov', 'mp4'] : $ext_perm);
            }

            $uploading = $this->upload_from_base64(
                $this->request->data['file'],
                WWW_ROOT . '/img/banner/',
                md5(microtime(true)),
                $ext_perm);

            if ($uploading) {
                $user_id = $this->Session->read('Auth.User.id');
                $role_id = $this->Session->read('Auth.User.role_id');
                $this->loadModel('Banner');
                $this->Banner->query("DELETE FROM banners WHERE user_id = '{$user_id}' AND role_id = '{$role_id}' AND profile_background IS NULL");

                $bannerData = [
                    'profile_background' => $uploading,
                    'user_id' => $user_id,
                    'role_id' => (int)$role_id,
                    'file_type' => $mime_split_without_base64[0],
                    'created_at' => date('Y-m-d H:i:s')
                ];
                if ($this->request->data['old']) {
                    $firstDate = $this->Banner->find(
                        'first', [
                        'conditions' => ['user_id' => $user_id, 'role_id' => $role_id],
                        'fields' => ['Banner.created_at'],
                        'order' => ['Banner.created_at ASC'],
                        'recursive' => -1
                    ]);

                    $date = date('Y-m-d H:i:s');
                    if ($firstDate) {
                        $dateNew = date_create($firstDate['Banner']['created_at']);
                        $date = date_format(
                            date_sub($dateNew, date_interval_create_from_date_string("10 days")),
                            "Y-m-d H:i:s");
                    }
                    $bannerData['created_at'] = $date;
                }

                if($this->request->data['position']) {
                    $bannerData['profile_background_position'] = $this->request->data['position'];
                }

                $this->Banner->create();
                $this->Banner->save($bannerData);
                $bannerData['b64'] = $this->request->data['file'];
                echo json_encode(['rs' => 1, 'f' => $bannerData]);
                exit;
            } else {
                echo json_encode(['rs' => 0]);
                exit;
            }
        }
    }

    /**
     * Remove a banner image from files and database
     * but only if the images belongs to user
     * called by ajax function
     */
    public function remove_banner_images()
    {
        $this->layout = 'ajax';
        $this->autoRender = false;
        $this->loadModel('Banner');
        $user_id = $this->Session->read('Auth.User.id');
        $role_id = $this->Session->read('Auth.User.role_id');
        $filesTryingToDelete = $this->request->data['files'];
        if (!empty($filesTryingToDelete)) {
            $selectBannersToDelete = $this->Banner->find(
                'all', [
                'conditions' => [
                    'user_id' => $user_id,
                    'role_id' => $role_id,
                    'profile_background' => $filesTryingToDelete
                ],
                'fields' => ['Banner.id', 'Banner.profile_background'],
                'recursive' => -1,
            ]);
            if ($selectBannersToDelete) {
                $deleteIds = [];
                $deletePaths = [];
                foreach ($selectBannersToDelete as $banner) {
                    $fileName = $banner['Banner']['profile_background'];
                    if (unlink(WWW_ROOT . '/img/banner/' . $fileName)) {
                        $deleteIds[] = $banner['Banner']['id'];
                        $deletePaths[] = $fileName;
                    }
                }
                if (!empty($deleteIds)) {
                    $this->Banner->deleteAll(
                        [
                            'Banner.id IN' => $deleteIds
                        ], false);

                    echo json_encode(['rs' => 1, 'f' => $deletePaths]);
                    exit;
                }
            } else {
                echo json_encode(['rs' => 0]);
                exit;
            }
        }
    }


    /**
     * method to save the banner of type slide
     * called via ajax
     */
    public function save_seq_banner()
    {
        $this->layout = 'ajax';
        $this->autoRender = false;

        $this->loadModel('Banner');
        $files = $this->request->data['files'];

        if (!empty($files)) {
            $user_id = $this->Session->read('Auth.User.id');
            $role_id = $this->Session->read('Auth.User.role_id');
            $mode = (empty($this->request->data['displayMode']) ? 'h' : $this->request->data['displayMode']);
            $tt = (empty($this->request->data['secs']) ? 1 : (int)$this->request->data['secs']);

            $selectBannersToSave = $this->Banner->find(
                'all', [
                'conditions' => [
                    'user_id' => $user_id,
                    'role_id' => $role_id,
                    'profile_background IN' => $files
                ],
                'fields' => ['Banner.profile_background'],
                'recursive' => -1,
            ]);

            if ($selectBannersToSave) {
                $files_found = [];
                foreach ($selectBannersToSave as $f) {
                    $files_found[] = $f['Banner']['profile_background'];
                }

                $this->Banner->query("DELETE FROM banners WHERE file_type = 'json' AND user_id = '{$user_id}'");

                $this->Banner->create();
                if ($this->Banner->save(
                    [
                        'profile_background' => json_encode(
                            [
                                'images' => $files_found,
                                'mode' => $mode,
                                'tt' => $tt
                            ]),
                        'file_type' => 'json',
                        'user_id' => $user_id,
                        'role_id' => $role_id,
                        'created_at' => date('Y-m-d H:i:s')
                    ])) {
                    echo json_encode(['rs' => 1]);
                }
            } else {
                echo json_encode(['rs' => 0]);
            }
        } else {
            echo json_encode(['rs' => 0]);
        }

    }

    /**
     * Method to save the embed banner
     * called by a form
     */
    public function save_embed_banner()
    {
        $this->layout = 'ajax';
        $this->autoRender = false;

        if ($this->request->data['profile_background']) {
            $this->loadModel('Banner');
            $this->Banner->query("DELETE FROM banners WHERE user_id = '{$this->Session->read('Auth.User.id')}' AND role_id = '{$this->Session->read('Auth.User.role_id')}' AND profile_background IS NULL");
            $this->Banner->create();

            $this->Banner->save(
                [
                    'profile_background' => $this->request->data['profile_background'],
                    'user_id' => $this->Session->read('Auth.User.id'),
                    'role_id' => $this->Session->read('Auth.User.role_id'),
                    'created_at' => date('Y-m-d H:i:s')
                ]);

            $this->Session->setFlash($this->viewVars['langs']['banner_save_success']);
            return $this->redirect($this->webroot . 'clubs/clubindex');
        }
    }

    /**
     * Load help documents
     */
    public function helpPage($pgName = null)
    {
        $userid = $this->Session->read('Auth.User.id');

        if ($userid) {
            $this->layout = 'single_user';
        } else {
            $this->layout = 'club_basic_layout';
        }


        $this->loadModel('Language_value');

        $this->set('helpStatus', "true");

        $this->loadModel("help_pages");
        $this->loadModel('site_pages');
        $this->loadModel('language_values');

        $site_page = $this->site_pages->find("first", array(
            'conditions' => array(
                'site_pages.pagename' => $pgName
            )
        ));

        $languagesid = $this->getLangId();


        if (isset($_COOKIE['setLang'])) {
            $langid = $_COOKIE['setLang'];
        } else {
            if (!empty($languagesid)) {
                $langid = $languagesid;
            } else {
                $langid = '1';
            }
        }

        if (!empty($_COOKIE['setMode'])) {
            $modeid = $_COOKIE['setMode'];
        } else {
            $modeid = '1';
        }

        $lang_list = $this->Language_value->getLanguageList();
        $this->set(compact("lang_list", 'langid', 'modeid'));

        $help_doc_data = $this->help_pages->find('first', array(
            'conditions' => array(
                'help_pages.sitepage_id' => $site_page['site_pages']['id'],
                'help_pages.lang_id' => $langid
            )
        ));
        $this->set(compact("help_doc_data"));
    }


    public function purchase_new_members()
    {
        $this->layout = 'club_clubtab';
    }


}